
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000310  00800100  00002d9a  00002e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ba  00800410  00800410  0000315e  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  0000315e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000050a0  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000011cb  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000093df  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000048  00000000  00000000  000093f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003d97  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000652  00000000  00000000  0000d1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000754  00000000  00000000  0000d821  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000708  00000000  00000000  0000df78  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000997  00000000  00000000  0000e680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002434  00000000  00000000  0000f017  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  0001144b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_3>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_11>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_18>
      4c:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_19>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_21>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

00000068 <__c.2230>:
      68:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      78:	3a 20 00                                            : .

0000007b <__c.2232>:
      7b:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      8b:	6f 72 3a 20 00                                      or: .

00000090 <__c.2234>:
      90:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      a0:	65 72 72 6f 72 3a 20 00 00 40 7a 10 f3 5a 00 a0     error: ..@z..Z..
      b0:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c0:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d0:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e0:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f0:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     100:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     110:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     120:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     130:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     140:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     150:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     160:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     170:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     180:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     190:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a0:	3d 27                                               ='

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	d8 e0       	ldi	r29, 0x08	; 8
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	14 e0       	ldi	r17, 0x04	; 4
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	ea e9       	ldi	r30, 0x9A	; 154
     1b6:	fd e2       	ldi	r31, 0x2D	; 45
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a0 31       	cpi	r26, 0x10	; 16
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	15 e0       	ldi	r17, 0x05	; 5
     1c6:	a0 e1       	ldi	r26, 0x10	; 16
     1c8:	b4 e0       	ldi	r27, 0x04	; 4
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	aa 3c       	cpi	r26, 0xCA	; 202
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <main>
     1d8:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <ds18b20_reset>:
 */
uint8_t ds18b20_reset(void) {
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     1e0:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     1e2:	3d 9a       	sbi	0x07, 5	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e4:	8e ea       	ldi	r24, 0xAE	; 174
     1e6:	97 e0       	ldi	r25, 0x07	; 7
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <ds18b20_reset+0x8>
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     1ec:	3d 98       	cbi	0x07, 5	; 7
     1ee:	85 ef       	ldi	r24, 0xF5	; 245
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <ds18b20_reset+0x12>
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
     1f6:	86 b1       	in	r24, 0x06	; 6
     1f8:	e8 eb       	ldi	r30, 0xB8	; 184
     1fa:	f6 e0       	ldi	r31, 0x06	; 6
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <ds18b20_reset+0x1c>
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
}
     200:	80 72       	andi	r24, 0x20	; 32
     202:	08 95       	ret

00000204 <ds18b20_writebit>:
/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     204:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     206:	3d 9a       	sbi	0x07, 5	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <ds18b20_writebit+0x6>
	_delay_us(1);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     20e:	81 11       	cpse	r24, r1
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     210:	3d 98       	cbi	0x07, 5	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     212:	85 ef       	ldi	r24, 0xF5	; 245
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <ds18b20_writebit+0x12>

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     21a:	3d 98       	cbi	0x07, 5	; 7
     21c:	08 95       	ret

0000021e <ds18b20_readbit>:
 */
uint8_t ds18b20_readbit(void){
	uint8_t bit=0;

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     21e:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     220:	3d 9a       	sbi	0x07, 5	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <ds18b20_readbit+0x6>
	_delay_us(1);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     228:	3d 98       	cbi	0x07, 5	; 7
     22a:	8c e4       	ldi	r24, 0x4C	; 76
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <ds18b20_readbit+0xe>
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
     230:	86 b1       	in	r24, 0x06	; 6
     232:	95 ef       	ldi	r25, 0xF5	; 245
     234:	9a 95       	dec	r25
     236:	f1 f7       	brne	.-4      	; 0x234 <ds18b20_readbit+0x16>
		bit=1;

	//wait 45uS and return read value
	_delay_us(45);
	return bit;
}
     238:	85 fb       	bst	r24, 5
     23a:	88 27       	eor	r24, r24
     23c:	80 f9       	bld	r24, 0
     23e:	08 95       	ret

00000240 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	d8 2f       	mov	r29, r24
	uint8_t i=8;
	while(i--){
     246:	c9 e0       	ldi	r28, 0x09	; 9
     248:	05 c0       	rjmp	.+10     	; 0x254 <ds18b20_writebyte+0x14>
		ds18b20_writebit(byte&1);
     24a:	8d 2f       	mov	r24, r29
     24c:	81 70       	andi	r24, 0x01	; 1
     24e:	0e 94 02 01 	call	0x204	; 0x204 <ds18b20_writebit>
		byte >>= 1;
     252:	d6 95       	lsr	r29
     254:	c1 50       	subi	r28, 0x01	; 1
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
     256:	c9 f7       	brne	.-14     	; 0x24a <ds18b20_writebyte+0xa>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	uint8_t i=8, n=0;
	while(i--){
     262:	d9 e0       	ldi	r29, 0x09	; 9

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
     264:	c0 e0       	ldi	r28, 0x00	; 0
	while(i--){
     266:	08 c0       	rjmp	.+16     	; 0x278 <ds18b20_readbyte+0x1a>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
     268:	0e 94 0f 01 	call	0x21e	; 0x21e <ds18b20_readbit>
     26c:	20 e8       	ldi	r18, 0x80	; 128
     26e:	82 9f       	mul	r24, r18
     270:	c0 01       	movw	r24, r0
     272:	11 24       	eor	r1, r1
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
     274:	c6 95       	lsr	r28
		n |= (ds18b20_readbit()<<7);
     276:	c8 2b       	or	r28, r24
     278:	d1 50       	subi	r29, 0x01	; 1
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
     27a:	b1 f7       	brne	.-20     	; 0x268 <ds18b20_readbyte+0xa>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
}
     27c:	8c 2f       	mov	r24, r28
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <ds18b20_gettemp>:

/*
 * get temperature
 */
double ds18b20_gettemp(void) {
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
	uint8_t temperature[2];
	int8_t digit;
	uint16_t decimal;
	double retd = 0;

	ds18b20_reset(); //reset
     292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
     296:	8c ec       	ldi	r24, 0xCC	; 204
     298:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
     29c:	84 e4       	ldi	r24, 0x44	; 68
     29e:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
     2a2:	0e 94 0f 01 	call	0x21e	; 0x21e <ds18b20_readbit>
     2a6:	88 23       	and	r24, r24
     2a8:	e1 f3       	breq	.-8      	; 0x2a2 <ds18b20_gettemp+0x1e>

	ds18b20_reset(); //reset
     2aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
     2ae:	8c ec       	ldi	r24, 0xCC	; 204
     2b0:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
     2b4:	8e eb       	ldi	r24, 0xBE	; 190
     2b6:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature[0] = ds18b20_readbyte();
     2ba:	0e 94 2f 01 	call	0x25e	; 0x25e <ds18b20_readbyte>
     2be:	c8 2f       	mov	r28, r24
	temperature[1] = ds18b20_readbyte();
     2c0:	0e 94 2f 01 	call	0x25e	; 0x25e <ds18b20_readbyte>
     2c4:	18 2f       	mov	r17, r24

	ds18b20_reset(); //reset
     2c6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>

	//store temperature integer digits
	digit = temperature[0]>>4;
     2ca:	6c 2f       	mov	r22, r28
     2cc:	62 95       	swap	r22
     2ce:	6f 70       	andi	r22, 0x0F	; 15
	digit |= (temperature[1]&0x7)<<4;

	//store temperature decimal digits
	decimal = temperature[0]&0xf;
     2d0:	cf 70       	andi	r28, 0x0F	; 15
     2d2:	d0 e0       	ldi	r29, 0x00	; 0

	ds18b20_reset(); //reset

	//store temperature integer digits
	digit = temperature[0]>>4;
	digit |= (temperature[1]&0x7)<<4;
     2d4:	17 70       	andi	r17, 0x07	; 7
     2d6:	20 e1       	ldi	r18, 0x10	; 16
     2d8:	12 9f       	mul	r17, r18
     2da:	c0 01       	movw	r24, r0
     2dc:	11 24       	eor	r1, r1
     2de:	68 2b       	or	r22, r24
	//store temperature decimal digits
	decimal = temperature[0]&0xf;
	decimal *= DS18B20_DECIMALSTEPS;

	//compose the double temperature value and return it
	retd = digit + decimal * 0.0001;
     2e0:	77 27       	eor	r23, r23
     2e2:	67 fd       	sbrc	r22, 7
     2e4:	70 95       	com	r23
     2e6:	87 2f       	mov	r24, r23
     2e8:	97 2f       	mov	r25, r23
     2ea:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
     2ee:	6b 01       	movw	r12, r22
     2f0:	7c 01       	movw	r14, r24
	digit = temperature[0]>>4;
	digit |= (temperature[1]&0x7)<<4;

	//store temperature decimal digits
	decimal = temperature[0]&0xf;
	decimal *= DS18B20_DECIMALSTEPS;
     2f2:	81 e7       	ldi	r24, 0x71	; 113
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	c8 9f       	mul	r28, r24
     2f8:	b0 01       	movw	r22, r0
     2fa:	c9 9f       	mul	r28, r25
     2fc:	70 0d       	add	r23, r0
     2fe:	d8 9f       	mul	r29, r24
     300:	70 0d       	add	r23, r0
     302:	11 24       	eor	r1, r1

	//compose the double temperature value and return it
	retd = digit + decimal * 0.0001;
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 c7 11 	call	0x238e	; 0x238e <__floatunsisf>
     30c:	27 e1       	ldi	r18, 0x17	; 23
     30e:	37 eb       	ldi	r19, 0xB7	; 183
     310:	41 ed       	ldi	r20, 0xD1	; 209
     312:	58 e3       	ldi	r21, 0x38	; 56
     314:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c7 01       	movw	r24, r14
     31e:	b6 01       	movw	r22, r12
     320:	0e 94 cb 10 	call	0x2196	; 0x2196 <__addsf3>

	return retd;
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	08 95       	ret

00000334 <ioInit>:
{
    //~~~~~~~~~~~~~~~~~~******************** Pin Configuration ********************~~~~~~~~~~~~~~~~~~~~
    
    // outputs
    
    DDRD |= ( ( 1 << SW_1 ) | ( 1 << SER ) | ( 1 << SRCLK ) | ( 1 << RCLK ) | ( 1 << F_BOOST ) | ( 1 << LED ) );	// set  to "1" for output
     334:	8a b1       	in	r24, 0x0a	; 10
     336:	8c 6f       	ori	r24, 0xFC	; 252
     338:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~( ( 1 << SW_1 ) | ( 1 << SER ) | ( 1 << SRCLK ) | ( 1 << RCLK ) |( 1 << F_BOOST ) | ( 1 << LED ) );	// set the outputs low
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	83 70       	andi	r24, 0x03	; 3
     33e:	8b b9       	out	0x0b, r24	; 11
    
    
    // inputs
    
    DDRD &= ~( 1 << SW_1 );	// set pin to 0 for input
     340:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= ( 1 << SW_1 );	// enable internal pullup
     342:	5a 9a       	sbi	0x0b, 2	; 11
    
    DDRB &= ~( 1 << AC_FREQ );	// set pin to 0 for input
     344:	20 98       	cbi	0x04, 0	; 4
    PORTB |= ( 1 << AC_FREQ );	// enable internal pullup
     346:	28 9a       	sbi	0x05, 0	; 5
    
    DDRC &= ~( ( 1 << PWR_OK ) | ( 1 << HV_FEEDBACK ) | ( 1 << BATT_VOLTAGE ) | ( 1 << RECTIFIED_AC ) ); 	
     348:	87 b1       	in	r24, 0x07	; 7
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	87 b9       	out	0x07, r24	; 7
     34e:	08 95       	ret

00000350 <extInterruptInit>:

void extInterruptInit( void )
{
	//~~~~~~~~~~~~~~~~~~************** External Interrupt Configuration ************~~~~~~~~~~~~~~~~~~~~

    PCICR = 0x01; 	// Allow pin change interrupts.
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 68 00 	sts	0x0068, r24
    PCMSK0 = 0x01; 	// Enable interrupts specifically for pin PCINT0 
     356:	80 93 6b 00 	sts	0x006B, r24
     35a:	08 95       	ret

0000035c <rtcInit>:

void rtcInit( void )
{
	//~~~~~~~~~~~~~~~~~~***************** RTC Timer Configuration *****************~~~~~~~~~~~~~~~~~~~~

    OCR1AH = 0;                 // Interrupt at 1.000 kHz, 0.001 S.
     35c:	10 92 89 00 	sts	0x0089, r1
    OCR1AL = 63;                // Decimal 63, one less than 64000/1000 because 0 and top are counted.
     360:	8f e3       	ldi	r24, 0x3F	; 63
     362:	80 93 88 00 	sts	0x0088, r24
    TIMSK1 |= ( 1 << OCIE1A );  // enable OCR1A match interrupt
     366:	ef e6       	ldi	r30, 0x6F	; 111
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
    TCCR1B |= (( 1 << WGM12 ) | ( 1 << CS12 ));	// start timer, CTC mode OCR1A match, ck/div by 256 for 64000 Hz
     370:	e1 e8       	ldi	r30, 0x81	; 129
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	8c 60       	ori	r24, 0x0C	; 12
     378:	80 83       	st	Z, r24
     37a:	08 95       	ret

0000037c <adcInit>:
void adcInit( void )
{
	//~~~~~~~~~~~~~~~~~~******************** ADC Configuration ********************~~~~~~~~~~~~~~~~~~~~

  	// ADC clock prescale of 1/128 for 128 kHz
  	ADCSRA = ( ( 1 << ADEN ) | ( 1 << ADATE ) | ( 1 << ADIE ) | ( 1 << ADPS2 ) | ( 1 << ADPS1 ) | ( 1 << ADPS0 ) );
     37c:	8f ea       	ldi	r24, 0xAF	; 175
     37e:	80 93 7a 00 	sts	0x007A, r24
  	
  	ADCSRB |= (1<<ADTS2);
     382:	eb e7       	ldi	r30, 0x7B	; 123
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	80 83       	st	Z, r24
  	
  	// Disable digital input buffers to save power.
  	DIDR0 = ( ( 1 << ADC0D ) | ( 1 << ADC1D ) | ( 1 << ADC2D ) | ( 1 << ADC3D ) );
     38c:	8f e0       	ldi	r24, 0x0F	; 15
     38e:	80 93 7e 00 	sts	0x007E, r24
     392:	08 95       	ret

00000394 <boostConverterInit>:
	//~~~~~~~~~~~~~~~~~~************** Boost Converter Configuration **************~~~~~~~~~~~~~~~~~~~~

	// PWM Frequency: 64 kHz
	
	// Timer/Counter0: channel: A, clear on compare match ( non-inverting ), Fast PWM, TOP = 0xFF
	TCCR0A |= ((1<<COM0A1) | (1<<WGM01) | (1<<WGM00));
     394:	84 b5       	in	r24, 0x24	; 36
     396:	83 68       	ori	r24, 0x83	; 131
     398:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ( 1 << CS00 );	// internal clock as source, no prescale, start the timer
     39a:	85 b5       	in	r24, 0x25	; 37
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	85 bd       	out	0x25, r24	; 37
     3a0:	08 95       	ret

000003a2 <__vector_21>:

// ADC interrupt service routine.
// This is called at the completion of each ADC read cycle.
// At the end of the ISR, the next conversion is started and we exit.
ISR(ADC_vect) 
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
static unsigned char input_index=0;

// Read the AD conversion result
   adc_raw[input_index]=ADCH;
     3b4:	80 91 33 04 	lds	r24, 0x0433
     3b8:	e8 2f       	mov	r30, r24
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	90 91 79 00 	lds	r25, 0x0079
     3c0:	ea 53       	subi	r30, 0x3A	; 58
     3c2:	fa 4f       	sbci	r31, 0xFA	; 250
     3c4:	90 83       	st	Z, r25
   
// Select next ADC input
   if (++input_index >= ADC_CHANNELS)
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	18 f4       	brcc	.+6      	; 0x3d2 <__vector_21+0x30>
     3cc:	80 93 33 04 	sts	0x0433, r24
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__vector_21+0x34>
      {
      input_index=0;
     3d2:	10 92 33 04 	sts	0x0433, r1
      }

   ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE | ( 1 << ADLAR ) ) + input_index; //and left adjust
     3d6:	80 91 33 04 	lds	r24, 0x0433
     3da:	80 5a       	subi	r24, 0xA0	; 160
     3dc:	80 93 7c 00 	sts	0x007C, r24

// Start the AD conversion
   ADCSRA |= (1<<ADSC);
     3e0:	80 91 7a 00 	lds	r24, 0x007A
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 93 7a 00 	sts	0x007A, r24

} 
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <__vector_3>:
// This function will only be called so long as there is an AC input waveform.
// For that reason, we do not need to code for when we lose AC power.  We just have
// to say, if this function is called and we want to use the AC frequency as a timebase
// then increment our seconds.  In ISR( TIMER1_COMPA_vect ) we have to have a bit more logic.
ISR (PCINT0_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
	static uint8_t timebaseCounter = 0;		// For timekeeping
	
	timebaseCounter++;	// Counting AC cycles.
     40a:	80 91 34 04 	lds	r24, 0x0434
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 34 04 	sts	0x0434, r24
	
	if( acclock == 1 ){
     414:	90 91 0c 01 	lds	r25, 0x010C
     418:	91 30       	cpi	r25, 0x01	; 1
     41a:	49 f4       	brne	.+18     	; 0x42e <__vector_3+0x32>
	
		if( timebaseCounter > ( AC_HERTZ * 2 ) - 1 ){
     41c:	88 37       	cpi	r24, 0x78	; 120
     41e:	38 f0       	brcs	.+14     	; 0x42e <__vector_3+0x32>
		
			seconds++;	// Increment the main seconds counter.
     420:	80 91 10 01 	lds	r24, 0x0110
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 10 01 	sts	0x0110, r24
			
			timebaseCounter = 0;
     42a:	10 92 34 04 	sts	0x0434, r1
		}
		
	}
	
	acZeroCrossCounter++;	// For measuring the AC frequency - not used for timekeeping
     42e:	80 91 18 04 	lds	r24, 0x0418
     432:	90 91 19 04 	lds	r25, 0x0419
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	90 93 19 04 	sts	0x0419, r25
     43c:	80 93 18 04 	sts	0x0418, r24
	
}
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <toggle_led>:



void toggle_led()
{
    PORTD ^= ( 1 << LED );
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	80 58       	subi	r24, 0x80	; 128
     452:	8b b9       	out	0x0b, r24	; 11
     454:	08 95       	ret

00000456 <blip_led>:



void blip_led()
{
    PORTD |= ( 1 << LED );	// on
     456:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e3       	ldi	r25, 0x30	; 48
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <blip_led+0x6>
    _delay_ms(3);
    PORTD &= ~( 1 << LED );	// off
     460:	5f 98       	cbi	0x0b, 7	; 11
     462:	08 95       	ret

00000464 <is_switch_pressed>:


int is_switch_pressed( char port, char pin, int ms_debounce, int ms_block )
{
    
    if ( !( port & ( 1 << pin ) ) )
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <is_switch_pressed+0xa>
     46a:	35 95       	asr	r19
     46c:	27 95       	ror	r18
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <is_switch_pressed+0x6>
     472:	21 70       	andi	r18, 0x01	; 1
     474:	33 27       	eor	r19, r19
    {
        //_delay_ms( ms_debounce );
        if ( !( port & ( 1 << pin ) ) ) return 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	28 27       	eor	r18, r24
    }
    
    return 0;
}
     47a:	c9 01       	movw	r24, r18
     47c:	08 95       	ret

0000047e <splitString>:




uint32_t splitString(char aString[100])
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	c4 56       	subi	r28, 0x64	; 100
     488:	d1 09       	sbc	r29, r1
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
    
    char *splitChar;
    char subString[100];
    
    // find the equal symbol.  Var to the left, value to the right
    splitChar = strchr( aString, '=');
     494:	6d e3       	ldi	r22, 0x3D	; 61
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 a3 13 	call	0x2746	; 0x2746 <strchr>
    
    strcpy(subString, splitChar + 1);
     49c:	bc 01       	movw	r22, r24
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	0e 94 ae 13 	call	0x275c	; 0x275c <strcpy>
    
    return atol( subString );
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 57 13 	call	0x26ae	; 0x26ae <atol>
}
     4b2:	cc 59       	subi	r28, 0x9C	; 156
     4b4:	df 4f       	sbci	r29, 0xFF	; 255
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <copy_command>:


void copy_command ()
{
    // Move a copy of uartString to myuartString
    memmove(myUartString, uartString, sizeof( myUartString ) );
     4c6:	84 e6       	ldi	r24, 0x64	; 100
     4c8:	e6 ee       	ldi	r30, 0xE6	; 230
     4ca:	f4 e0       	ldi	r31, 0x04	; 4
     4cc:	a2 e6       	ldi	r26, 0x62	; 98
     4ce:	b5 e0       	ldi	r27, 0x05	; 5
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	8a 95       	dec	r24
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <copy_command+0xa>
    // Empty the uartString.
    memset(uartString, 0, sizeof( myUartString ) );
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	e6 ee       	ldi	r30, 0xE6	; 230
     4dc:	f4 e0       	ldi	r31, 0x04	; 4
     4de:	df 01       	movw	r26, r30
     4e0:	1d 92       	st	X+, r1
     4e2:	8a 95       	dec	r24
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <copy_command+0x1a>
     4e6:	08 95       	ret

000004e8 <inRange>:




uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
	if( inputValue >= lowerBound && inputValue <= upperBound )
     4f0:	6e 15       	cp	r22, r14
     4f2:	7f 05       	cpc	r23, r15
     4f4:	80 07       	cpc	r24, r16
     4f6:	91 07       	cpc	r25, r17
     4f8:	30 f0       	brcs	.+12     	; 0x506 <inRange+0x1e>
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	26 17       	cp	r18, r22
     4fe:	37 07       	cpc	r19, r23
     500:	48 07       	cpc	r20, r24
     502:	59 07       	cpc	r21, r25
     504:	08 f4       	brcc	.+2      	; 0x508 <inRange+0x20>
	{
		return 1;
	}
	
	return 0;
     506:	e0 e0       	ldi	r30, 0x00	; 0
}
     508:	8e 2f       	mov	r24, r30
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	08 95       	ret

00000514 <print_value>:
// RECTIFIED_AC	    PC3		// adc_raw[3]



void print_value (char *id, uint32_t value)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
     51a:	cb 01       	movw	r24, r22
     51c:	ba 01       	movw	r22, r20
    ultoa(value, printBuffer, 10);
     51e:	2a e0       	ldi	r18, 0x0A	; 10
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	42 e8       	ldi	r20, 0x82	; 130
     524:	54 e0       	ldi	r21, 0x04	; 4
     526:	0e 94 05 14 	call	0x280a	; 0x280a <ultoa>
    uart_puts(id);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(": ");
     530:	83 ee       	ldi	r24, 0xE3	; 227
     532:	93 e0       	ldi	r25, 0x03	; 3
     534:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(printBuffer);
     538:	82 e8       	ldi	r24, 0x82	; 130
     53a:	94 e0       	ldi	r25, 0x04	; 4
    //uart_puts(RETURN_NEWLINE);
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
void print_value (char *id, uint32_t value)
{
    ultoa(value, printBuffer, 10);
    uart_puts(id);
    uart_puts(": ");
    uart_puts(printBuffer);
     540:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <uart_puts>

00000544 <print_csv>:
}



void print_csv( char *id, uint32_t value )
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	cb 01       	movw	r24, r22
     54c:	ba 01       	movw	r22, r20
    ultoa(value, printBuffer, 10);
     54e:	2a e0       	ldi	r18, 0x0A	; 10
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	42 e8       	ldi	r20, 0x82	; 130
     554:	54 e0       	ldi	r21, 0x04	; 4
     556:	0e 94 05 14 	call	0x280a	; 0x280a <ultoa>

    //uart_puts(": ");
    uart_puts(printBuffer);
     55a:	82 e8       	ldi	r24, 0x82	; 130
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts(id);
     562:	ce 01       	movw	r24, r28
    //uart_puts(RETURN_NEWLINE);
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
{
    ultoa(value, printBuffer, 10);

    //uart_puts(": ");
    uart_puts(printBuffer);
        uart_puts(id);
     568:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <uart_puts>

0000056c <uart_ok>:



void uart_ok()
{
    uart_puts("OK");
     56c:	86 e2       	ldi	r24, 0x26	; 38
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     574:	89 e2       	ldi	r24, 0x29	; 41
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <uart_puts>

0000057c <uartWelcome>:


void uartWelcome( void )
{

    uart_puts("//~~~~~~~~~~~~************ Nixie Clock Instructions ************~~~~~~~~~~~~~~");
     57c:	8c e2       	ldi	r24, 0x2C	; 44
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     584:	89 e2       	ldi	r24, 0x29	; 41
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("ATMega328 Nixie Clock");
     58c:	8b e7       	ldi	r24, 0x7B	; 123
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     594:	89 e2       	ldi	r24, 0x29	; 41
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("Check petemills.blogspot.com for more info");
     59c:	81 e9       	ldi	r24, 0x91	; 145
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5a4:	89 e2       	ldi	r24, 0x29	; 41
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5ac:	89 e2       	ldi	r24, 0x29	; 41
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("Type 'HOURS=10' to set the hours to '10'.");
     5b4:	8c eb       	ldi	r24, 0xBC	; 188
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5bc:	89 e2       	ldi	r24, 0x29	; 41
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("Type 'MINUTES=26' to set the minutes to '26'.");
     5c4:	86 ee       	ldi	r24, 0xE6	; 230
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5cc:	89 e2       	ldi	r24, 0x29	; 41
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("Visit the URL above to download a clock calibration app.");
     5d4:	84 e1       	ldi	r24, 0x14	; 20
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5dc:	89 e2       	ldi	r24, 0x29	; 41
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_puts("//~~~~~~~~~~~~************ Nixie Clock Instructions ************~~~~~~~~~~~~~~");
     5e4:	8c e2       	ldi	r24, 0x2C	; 44
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <uart_puts>

000005ec <uartInit>:



void uartInit( void )
{
        uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
     5ec:	80 e1       	ldi	r24, 0x10	; 16
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <uart_init>

000005f4 <serialPrintDateTime>:
void serialPrintDateTime( void )
{
    //if( isLeapYear() )
    //    uart_puts("L ");
    // Print the date in YYYY.MM.DD format
    uart_puts( itoa( year, printBuffer, 10 ) );
     5f4:	4a e0       	ldi	r20, 0x0A	; 10
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	62 e8       	ldi	r22, 0x82	; 130
     5fa:	74 e0       	ldi	r23, 0x04	; 4
     5fc:	80 91 11 01 	lds	r24, 0x0111
     600:	90 91 12 01 	lds	r25, 0x0112
     604:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     608:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_putc('-');
     60c:	8d e2       	ldi	r24, 0x2D	; 45
     60e:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
    
    uart_puts( itoa( month, printBuffer, 10 ) );
     612:	4a e0       	ldi	r20, 0x0A	; 10
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	62 e8       	ldi	r22, 0x82	; 130
     618:	74 e0       	ldi	r23, 0x04	; 4
     61a:	80 91 13 01 	lds	r24, 0x0113
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     624:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_putc('-');
     628:	8d e2       	ldi	r24, 0x2D	; 45
     62a:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
    
    uart_puts( itoa( day, printBuffer, 10 ) );
     62e:	4a e0       	ldi	r20, 0x0A	; 10
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	62 e8       	ldi	r22, 0x82	; 130
     634:	74 e0       	ldi	r23, 0x04	; 4
     636:	80 91 14 01 	lds	r24, 0x0114
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     640:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    
    uart_puts(", ");
     644:	8d e4       	ldi	r24, 0x4D	; 77
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    
    
    if( miltime == 0  && hours > 12 )
     64c:	80 91 0f 01 	lds	r24, 0x010F
     650:	81 11       	cpse	r24, r1
     652:	14 c0       	rjmp	.+40     	; 0x67c <serialPrintDateTime+0x88>
     654:	80 91 16 01 	lds	r24, 0x0116
     658:	8d 30       	cpi	r24, 0x0D	; 13
     65a:	38 f0       	brcs	.+14     	; 0x66a <serialPrintDateTime+0x76>
    {
        // Display the hours in 12 hour format.
        uart_puts( itoa( hours - 12, printBuffer, 10 ) );
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	4a e0       	ldi	r20, 0x0A	; 10
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	62 e8       	ldi	r22, 0x82	; 130
     664:	74 e0       	ldi	r23, 0x04	; 4
     666:	0c 97       	sbiw	r24, 0x0c	; 12
     668:	10 c0       	rjmp	.+32     	; 0x68a <serialPrintDateTime+0x96>
    }
    else if( miltime == 0 && hours == 0 )
     66a:	81 11       	cpse	r24, r1
     66c:	07 c0       	rjmp	.+14     	; 0x67c <serialPrintDateTime+0x88>
    {
        // Don't display '0' hours in 12-hour format, display "12" instead.
        uart_puts( itoa( 12, printBuffer, 10 ) );
     66e:	4a e0       	ldi	r20, 0x0A	; 10
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	62 e8       	ldi	r22, 0x82	; 130
     674:	74 e0       	ldi	r23, 0x04	; 4
     676:	8c e0       	ldi	r24, 0x0C	; 12
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	07 c0       	rjmp	.+14     	; 0x68a <serialPrintDateTime+0x96>
    }
    else
    {
        // Otherwise, everything is cool, just print the hours.
        uart_puts( itoa( hours, printBuffer, 10 ) );
     67c:	4a e0       	ldi	r20, 0x0A	; 10
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	62 e8       	ldi	r22, 0x82	; 130
     682:	74 e0       	ldi	r23, 0x04	; 4
     684:	80 91 16 01 	lds	r24, 0x0116
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     68e:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    }
    uart_putc(':');
     692:	8a e3       	ldi	r24, 0x3A	; 58
     694:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
        
    uart_puts( itoa( minutes, printBuffer, 10 ) );
     698:	4a e0       	ldi	r20, 0x0A	; 10
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	62 e8       	ldi	r22, 0x82	; 130
     69e:	74 e0       	ldi	r23, 0x04	; 4
     6a0:	80 91 15 01 	lds	r24, 0x0115
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     6aa:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    uart_putc(':');
     6ae:	8a e3       	ldi	r24, 0x3A	; 58
     6b0:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
        
    uart_puts( itoa( seconds, printBuffer, 10 ) );
     6b4:	80 91 10 01 	lds	r24, 0x0110
     6b8:	4a e0       	ldi	r20, 0x0A	; 10
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	62 e8       	ldi	r22, 0x82	; 130
     6be:	74 e0       	ldi	r23, 0x04	; 4
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
     6c6:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        
    //uart_puts(RETURN_NEWLINE);
    uart_putc( ',');
     6ca:	8c e2       	ldi	r24, 0x2C	; 44
     6cc:	0c 94 27 10 	jmp	0x204e	; 0x204e <uart_putc>

000006d0 <isLeapYear>:



uint8_t isLeapYear( void )
{
    if( year % 4 != 0 )
     6d0:	20 91 11 01 	lds	r18, 0x0111
     6d4:	30 91 12 01 	lds	r19, 0x0112
     6d8:	c9 01       	movw	r24, r18
     6da:	83 70       	andi	r24, 0x03	; 3
     6dc:	99 27       	eor	r25, r25
     6de:	89 2b       	or	r24, r25
     6e0:	79 f4       	brne	.+30     	; 0x700 <isLeapYear+0x30>
    {
        return 0;   // not a leap year
    }
    else if( year % 100 != 0 )
     6e2:	c9 01       	movw	r24, r18
     6e4:	64 e6       	ldi	r22, 0x64	; 100
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
     6ec:	89 2b       	or	r24, r25
     6ee:	51 f4       	brne	.+20     	; 0x704 <isLeapYear+0x34>
    {
        return 1;   // it is a leap year
    }
    else if( year % 400 )
     6f0:	c9 01       	movw	r24, r18
     6f2:	60 e9       	ldi	r22, 0x90	; 144
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
     6fa:	21 e0       	ldi	r18, 0x01	; 1
     6fc:	89 2b       	or	r24, r25
     6fe:	19 f0       	breq	.+6      	; 0x706 <isLeapYear+0x36>

uint8_t isLeapYear( void )
{
    if( year % 4 != 0 )
    {
        return 0;   // not a leap year
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	01 c0       	rjmp	.+2      	; 0x706 <isLeapYear+0x36>
    }
    else if( year % 100 != 0 )
    {
        return 1;   // it is a leap year
     704:	21 e0       	ldi	r18, 0x01	; 1
    }
    else
    {
        return 1;   // it is a leap year
    }
}
     706:	82 2f       	mov	r24, r18
     708:	08 95       	ret

0000070a <updateDateTime>:




void updateDateTime( void )
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	2d 97       	sbiw	r28, 0x0d	; 13
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
    uint8_t numDaysInMonth[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
     71e:	8d e0       	ldi	r24, 0x0D	; 13
     720:	e7 e1       	ldi	r30, 0x17	; 23
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	de 01       	movw	r26, r28
     726:	11 96       	adiw	r26, 0x01	; 1
     728:	01 90       	ld	r0, Z+
     72a:	0d 92       	st	X+, r0
     72c:	8a 95       	dec	r24
     72e:	e1 f7       	brne	.-8      	; 0x728 <updateDateTime+0x1e>
    
    if( numDaysInMonth[2] == 28 && isLeapYear() )
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	8c 31       	cpi	r24, 0x1C	; 28
     734:	31 f4       	brne	.+12     	; 0x742 <updateDateTime+0x38>
     736:	0e 94 68 03 	call	0x6d0	; 0x6d0 <isLeapYear>
     73a:	88 23       	and	r24, r24
     73c:	31 f0       	breq	.+12     	; 0x74a <updateDateTime+0x40>
    {
        numDaysInMonth[2] = 29;
     73e:	8d e1       	ldi	r24, 0x1D	; 29
     740:	03 c0       	rjmp	.+6      	; 0x748 <updateDateTime+0x3e>
    }
    else if( numDaysInMonth[2] == 29 )
     742:	8d 31       	cpi	r24, 0x1D	; 29
     744:	11 f4       	brne	.+4      	; 0x74a <updateDateTime+0x40>
    {
        numDaysInMonth[2] = 28;
     746:	8c e1       	ldi	r24, 0x1C	; 28
     748:	8b 83       	std	Y+3, r24	; 0x03
    }
    
    
    if( seconds > 59 )
     74a:	80 91 10 01 	lds	r24, 0x0110
     74e:	8c 33       	cpi	r24, 0x3C	; 60
     750:	38 f0       	brcs	.+14     	; 0x760 <updateDateTime+0x56>
    {
        minutes++;		// increment minutes
     752:	80 91 15 01 	lds	r24, 0x0115
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 15 01 	sts	0x0115, r24
        seconds = 0;	// reset seconds
     75c:	10 92 10 01 	sts	0x0110, r1
    }
    
    if( minutes > 59 )
     760:	80 91 15 01 	lds	r24, 0x0115
     764:	8c 33       	cpi	r24, 0x3C	; 60
     766:	38 f0       	brcs	.+14     	; 0x776 <updateDateTime+0x6c>
    {
        hours++;		// increment hours
     768:	80 91 16 01 	lds	r24, 0x0116
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 93 16 01 	sts	0x0116, r24
        minutes = 0; 	// reset minutes
     772:	10 92 15 01 	sts	0x0115, r1
    }
    
    if( hours > 23 )
     776:	80 91 16 01 	lds	r24, 0x0116
     77a:	88 31       	cpi	r24, 0x18	; 24
     77c:	38 f0       	brcs	.+14     	; 0x78c <updateDateTime+0x82>
    {
        day++;          // increment day
     77e:	80 91 14 01 	lds	r24, 0x0114
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 14 01 	sts	0x0114, r24
        hours = 0;		// reset hours
     788:	10 92 16 01 	sts	0x0116, r1
    }
    
    if( day > numDaysInMonth[ month ] )
     78c:	80 91 13 01 	lds	r24, 0x0113
     790:	fe 01       	movw	r30, r28
     792:	e8 0f       	add	r30, r24
     794:	f1 1d       	adc	r31, r1
     796:	20 91 14 01 	lds	r18, 0x0114
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	92 17       	cp	r25, r18
     79e:	30 f4       	brcc	.+12     	; 0x7ac <updateDateTime+0xa2>
    {
        month++;        // increment the month
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 13 01 	sts	0x0113, r24
        day = 1;        // reset the day counter to the first
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 14 01 	sts	0x0114, r24
    }
    
    if( month > 12 )
     7ac:	80 91 13 01 	lds	r24, 0x0113
     7b0:	8d 30       	cpi	r24, 0x0D	; 13
     7b2:	60 f0       	brcs	.+24     	; 0x7cc <updateDateTime+0xc2>
    {
        year++;         // increment the year
     7b4:	80 91 11 01 	lds	r24, 0x0111
     7b8:	90 91 12 01 	lds	r25, 0x0112
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	90 93 12 01 	sts	0x0112, r25
     7c2:	80 93 11 01 	sts	0x0111, r24
        month = 1;      // reset the month to january
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 13 01 	sts	0x0113, r24
    }
    
    
}
     7cc:	2d 96       	adiw	r28, 0x0d	; 13
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <dayOfWeek>:




uint8_t dayOfWeek(uint8_t day, uint8_t month, uint16_t year)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	d8 2f       	mov	r29, r24
     7e4:	c6 2f       	mov	r28, r22
     7e6:	fa 01       	movw	r30, r20
   // http://en.wikipedia.org/wiki/Zeller%27s_congruence
   // returns 0 for monday thru 6 for sunday.
   
	if( month < 3 ){
     7e8:	63 30       	cpi	r22, 0x03	; 3
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <dayOfWeek+0x12>
		month += 12;
     7ec:	c4 5f       	subi	r28, 0xF4	; 244
		year--;
     7ee:	31 97       	sbiw	r30, 0x01	; 1
   }
   return ( ( 13 * month + 3 ) / 5 + day + year + ( year / 4 ) - ( year / 100 ) + ( year / 400 ) ) % 7;
     7f0:	9f 01       	movw	r18, r30
     7f2:	36 95       	lsr	r19
     7f4:	27 95       	ror	r18
     7f6:	36 95       	lsr	r19
     7f8:	27 95       	ror	r18
     7fa:	cf 01       	movw	r24, r30
     7fc:	60 e9       	ldi	r22, 0x90	; 144
     7fe:	71 e0       	ldi	r23, 0x01	; 1
     800:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
     804:	26 0f       	add	r18, r22
     806:	37 1f       	adc	r19, r23
     808:	2e 0f       	add	r18, r30
     80a:	3f 1f       	adc	r19, r31
     80c:	cf 01       	movw	r24, r30
     80e:	64 e6       	ldi	r22, 0x64	; 100
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
     816:	26 1b       	sub	r18, r22
     818:	37 0b       	sbc	r19, r23
     81a:	4d e0       	ldi	r20, 0x0D	; 13
     81c:	c4 9f       	mul	r28, r20
     81e:	c0 01       	movw	r24, r0
     820:	11 24       	eor	r1, r1
     822:	03 96       	adiw	r24, 0x03	; 3
     824:	65 e0       	ldi	r22, 0x05	; 5
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 00 13 	call	0x2600	; 0x2600 <__divmodhi4>
     82c:	6d 0f       	add	r22, r29
     82e:	71 1d       	adc	r23, r1
     830:	26 0f       	add	r18, r22
     832:	37 1f       	adc	r19, r23
     834:	c9 01       	movw	r24, r18
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <readTemperature>:



double readTemperature( void )
{
    celsiusTemperature = ds18b20_gettemp();
     844:	0e 94 42 01 	call	0x284	; 0x284 <ds18b20_gettemp>
     848:	9b 01       	movw	r18, r22
     84a:	46 2f       	mov	r20, r22
     84c:	53 2f       	mov	r21, r19
     84e:	68 2f       	mov	r22, r24
     850:	79 2f       	mov	r23, r25
     852:	40 93 06 01 	sts	0x0106, r20
     856:	50 93 07 01 	sts	0x0107, r21
     85a:	60 93 08 01 	sts	0x0108, r22
     85e:	70 93 09 01 	sts	0x0109, r23
    
    return celsiusTemperature;
}
     862:	62 2f       	mov	r22, r18
     864:	73 2f       	mov	r23, r19
     866:	08 95       	ret

00000868 <updateBoostConverter>:
    // 5 v / 8 bits = ~0.019685 V/count, or 50.8 counts/V
    
    // ex. 50 V on the boost converter is 0.5 V to the ADC.  0.5 V in counts is 25.4
    //    175 V on the boost converter is 1.75V to the ADC.  1.75V in counts is 88.9
    
    uint16_t myVoltage = adc_raw[1];	// HV_FEEDBACK
     868:	80 91 c7 05 	lds	r24, 0x05C7
    
	if( myVoltage > 89 )
     86c:	8a 35       	cpi	r24, 0x5A	; 90
     86e:	18 f0       	brcs	.+6      	; 0x876 <updateBoostConverter+0xe>
	{
		boostConverterPwm = boostLowPwm;
     870:	80 91 00 01 	lds	r24, 0x0100
     874:	02 c0       	rjmp	.+4      	; 0x87a <updateBoostConverter+0x12>
		//boostConverterPwm--;
	}
	else 
	{
		boostConverterPwm = boostHighPwm;
     876:	80 91 01 01 	lds	r24, 0x0101
     87a:	80 93 1a 04 	sts	0x041A, r24
		//boostConverterPwm++;
	}
	
	OCR0A = boostConverterPwm;        
     87e:	80 91 1a 04 	lds	r24, 0x041A
     882:	87 bd       	out	0x27, r24	; 39
     884:	08 95       	ret

00000886 <updateTemperatureFilter>:




void updateTemperatureFilter( uint8_t moduloSeconds )
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	68 2f       	mov	r22, r24
	if( seconds % moduloSeconds == 0 )
     890:	80 91 10 01 	lds	r24, 0x0110
     894:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
     898:	91 11       	cpse	r25, r1
     89a:	54 c0       	rjmp	.+168    	; 0x944 <__stack+0x45>
     89c:	0a e4       	ldi	r16, 0x4A	; 74
     89e:	15 e0       	ldi	r17, 0x05	; 5
     8a0:	c0 e0       	ldi	r28, 0x00	; 0
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
            
        // FIR
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
        {
            if( i < TEMPERATURE_ARRAY_SIZE - 1 )
     8a4:	c5 30       	cpi	r28, 0x05	; 5
     8a6:	d1 05       	cpc	r29, r1
     8a8:	51 f0       	breq	.+20     	; 0x8be <updateTemperatureFilter+0x38>
            {
                movingAverageArray[ i ] = movingAverageArray[ i + 1 ];
     8aa:	f8 01       	movw	r30, r16
     8ac:	84 81       	ldd	r24, Z+4	; 0x04
     8ae:	95 81       	ldd	r25, Z+5	; 0x05
     8b0:	a6 81       	ldd	r26, Z+6	; 0x06
     8b2:	b7 81       	ldd	r27, Z+7	; 0x07
     8b4:	80 83       	st	Z, r24
     8b6:	91 83       	std	Z+1, r25	; 0x01
     8b8:	a2 83       	std	Z+2, r26	; 0x02
     8ba:	b3 83       	std	Z+3, r27	; 0x03
     8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <updateTemperatureFilter+0x4c>
            }
            else
            {
                movingAverageArray[ i ] = readTemperature();
     8be:	0e 94 22 04 	call	0x844	; 0x844 <readTemperature>
     8c2:	60 93 5e 05 	sts	0x055E, r22
     8c6:	70 93 5f 05 	sts	0x055F, r23
     8ca:	80 93 60 05 	sts	0x0560, r24
     8ce:	90 93 61 05 	sts	0x0561, r25
	if( seconds % moduloSeconds == 0 )
    {
            
        // FIR
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
     8d2:	21 96       	adiw	r28, 0x01	; 1
     8d4:	0c 5f       	subi	r16, 0xFC	; 252
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
     8d8:	c6 30       	cpi	r28, 0x06	; 6
     8da:	d1 05       	cpc	r29, r1
     8dc:	19 f7       	brne	.-58     	; 0x8a4 <updateTemperatureFilter+0x1e>
     8de:	ca e4       	ldi	r28, 0x4A	; 74
     8e0:	d5 e0       	ldi	r29, 0x05	; 5





void updateTemperatureFilter( uint8_t moduloSeconds )
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
            
        arraySum = 0;
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
        {
            arraySum += movingAverageArray[ i ];
     8ea:	29 91       	ld	r18, Y+
     8ec:	39 91       	ld	r19, Y+
     8ee:	49 91       	ld	r20, Y+
     8f0:	59 91       	ld	r21, Y+
     8f2:	0f 2f       	mov	r16, r31
     8f4:	1e 2f       	mov	r17, r30
     8f6:	b8 01       	movw	r22, r16
     8f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <__addsf3>
     8fc:	f6 2f       	mov	r31, r22
     8fe:	e7 2f       	mov	r30, r23
                
        }
            
        arraySum = 0;
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
     900:	25 e0       	ldi	r18, 0x05	; 5
     902:	c2 36       	cpi	r28, 0x62	; 98
     904:	d2 07       	cpc	r29, r18
     906:	89 f7       	brne	.-30     	; 0x8ea <updateTemperatureFilter+0x64>
     908:	df 01       	movw	r26, r30
     90a:	4b 2f       	mov	r20, r27
     90c:	5a 2f       	mov	r21, r26
     90e:	68 2f       	mov	r22, r24
     910:	79 2f       	mov	r23, r25
     912:	40 93 1b 04 	sts	0x041B, r20
     916:	50 93 1c 04 	sts	0x041C, r21
     91a:	60 93 1d 04 	sts	0x041D, r22
     91e:	70 93 1e 04 	sts	0x041E, r23
        {
            arraySum += movingAverageArray[ i ];
        }
            
		averageCelsiusTemperature = arraySum / TEMPERATURE_ARRAY_SIZE;       
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 ec       	ldi	r20, 0xC0	; 192
     928:	50 e4       	ldi	r21, 0x40	; 64
     92a:	ef 01       	movw	r28, r30
     92c:	6d 2f       	mov	r22, r29
     92e:	7c 2f       	mov	r23, r28
     930:	0e 94 33 11 	call	0x2266	; 0x2266 <__divsf3>
     934:	60 93 02 01 	sts	0x0102, r22
     938:	70 93 03 01 	sts	0x0103, r23
     93c:	80 93 04 01 	sts	0x0104, r24
     940:	90 93 05 01 	sts	0x0105, r25
    }
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <serialPrintTemperature>:




void serialPrintTemperature( void )
{
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
	if( celsius == 1 )
     952:	80 91 0e 01 	lds	r24, 0x010E
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	49 f4       	brne	.+18     	; 0x96c <serialPrintTemperature+0x1e>
        {
            //dtostrf(readTemperature(), 10, 3, printBuffer);
            dtostrf(averageCelsiusTemperature, 10, 3, printBuffer);
     95a:	60 91 02 01 	lds	r22, 0x0102
     95e:	70 91 03 01 	lds	r23, 0x0103
     962:	80 91 04 01 	lds	r24, 0x0104
     966:	90 91 05 01 	lds	r25, 0x0105
     96a:	14 c0       	rjmp	.+40     	; 0x994 <serialPrintTemperature+0x46>
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
        }
        else
        {
            //double tempF = ( readTemperature() * 1.8 ) + 32;
            double tempF = ( averageCelsiusTemperature * 1.8 ) + 32;
     96c:	26 e6       	ldi	r18, 0x66	; 102
     96e:	36 e6       	ldi	r19, 0x66	; 102
     970:	46 ee       	ldi	r20, 0xE6	; 230
     972:	5f e3       	ldi	r21, 0x3F	; 63
     974:	60 91 02 01 	lds	r22, 0x0102
     978:	70 91 03 01 	lds	r23, 0x0103
     97c:	80 91 04 01 	lds	r24, 0x0104
     980:	90 91 05 01 	lds	r25, 0x0105
     984:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	52 e4       	ldi	r21, 0x42	; 66
     990:	0e 94 cb 10 	call	0x2196	; 0x2196 <__addsf3>
            dtostrf(tempF , 10, 3, printBuffer);
     994:	02 e8       	ldi	r16, 0x82	; 130
     996:	14 e0       	ldi	r17, 0x04	; 4
     998:	23 e0       	ldi	r18, 0x03	; 3
     99a:	4a e0       	ldi	r20, 0x0A	; 10
     99c:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
            //uart_puts(", Temperature: ");
            //uart_putc(',');
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    }
    
    uart_putc( ',');
     9a6:	8c e2       	ldi	r24, 0x2C	; 44
}
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
            //uart_puts(", Temperature: ");
            //uart_putc(',');
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
    }
    
    uart_putc( ',');
     9ac:	0c 94 27 10 	jmp	0x204e	; 0x204e <uart_putc>

000009b0 <serialPrintAcFrequency>:




void serialPrintAcFrequency( void )
{
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
	dtostrf(acFrequency, 10, 3, printBuffer);
     9b4:	60 91 12 04 	lds	r22, 0x0412
     9b8:	70 91 13 04 	lds	r23, 0x0413
     9bc:	80 91 14 04 	lds	r24, 0x0414
     9c0:	90 91 15 04 	lds	r25, 0x0415
     9c4:	02 e8       	ldi	r16, 0x82	; 130
     9c6:	14 e0       	ldi	r17, 0x04	; 4
     9c8:	23 e0       	ldi	r18, 0x03	; 3
     9ca:	4a e0       	ldi	r20, 0x0A	; 10
     9cc:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
	uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
     9d0:	c8 01       	movw	r24, r16
     9d2:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
	uart_putc( ',');	
     9d6:	8c e2       	ldi	r24, 0x2C	; 44
}
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16

void serialPrintAcFrequency( void )
{
	dtostrf(acFrequency, 10, 3, printBuffer);
	uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
	uart_putc( ',');	
     9dc:	0c 94 27 10 	jmp	0x204e	; 0x204e <uart_putc>

000009e0 <readEepromToVars>:


void readEepromToVars( void )
{
	
	mscal = eeprom_read_dword( &ee_mscal );	
     9e0:	81 e1       	ldi	r24, 0x11	; 17
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 32 14 	call	0x2864	; 0x2864 <__eerd_dword_m328p>
     9e8:	60 93 2c 04 	sts	0x042C, r22
     9ec:	70 93 2d 04 	sts	0x042D, r23
     9f0:	80 93 2e 04 	sts	0x042E, r24
     9f4:	90 93 2f 04 	sts	0x042F, r25
	nixiesleepstart = eeprom_read_dword( &ee_nixiesleepstart );
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 32 14 	call	0x2864	; 0x2864 <__eerd_dword_m328p>
     a00:	60 93 23 04 	sts	0x0423, r22
     a04:	70 93 24 04 	sts	0x0424, r23
     a08:	80 93 25 04 	sts	0x0425, r24
     a0c:	90 93 26 04 	sts	0x0426, r25
	nixiesleepend = eeprom_read_dword( &ee_nixiesleepend );
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 32 14 	call	0x2864	; 0x2864 <__eerd_dword_m328p>
     a18:	60 93 1f 04 	sts	0x041F, r22
     a1c:	70 93 20 04 	sts	0x0420, r23
     a20:	80 93 21 04 	sts	0x0421, r24
     a24:	90 93 22 04 	sts	0x0422, r25
	
	miltime = eeprom_read_byte( &ee_miltime );
     a28:	80 e1       	ldi	r24, 0x10	; 16
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a30:	80 93 0f 01 	sts	0x010F, r24
	showtherm = eeprom_read_byte( &ee_showtherm );
     a34:	8f e0       	ldi	r24, 0x0F	; 15
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a3c:	80 93 29 04 	sts	0x0429, r24
	showfreq = eeprom_read_byte( &ee_showfreq );
     a40:	8e e0       	ldi	r24, 0x0E	; 14
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a48:	80 93 28 04 	sts	0x0428, r24
	showdate = eeprom_read_byte( &ee_showdate );
     a4c:	8d e0       	ldi	r24, 0x0D	; 13
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a54:	80 93 27 04 	sts	0x0427, r24
	celsius = eeprom_read_byte( &ee_celsius );
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a60:	80 93 0e 01 	sts	0x010E, r24
	doecho = eeprom_read_byte( &ee_doecho );
     a64:	8b e0       	ldi	r24, 0x0B	; 11
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a6c:	80 93 0d 01 	sts	0x010D, r24
	acclock = eeprom_read_byte( &ee_acclock );
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a78:	80 93 0c 01 	sts	0x010C, r24
	xtalisfast = eeprom_read_byte( &ee_xtalisfast );
     a7c:	89 e0       	ldi	r24, 0x09	; 9
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a84:	80 93 0b 01 	sts	0x010B, r24
	toggleled = eeprom_read_byte( &ee_toggleled );
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eerd_byte_m328p>
     a90:	80 93 0a 01 	sts	0x010A, r24
     a94:	08 95       	ret

00000a96 <updateVarsToEeprom>:

// Update will only write data to eeprom if the new value is different from the stored value.
void updateVarsToEeprom( void )
{

	eeprom_update_dword( &ee_mscal, mscal );
     a96:	40 91 2c 04 	lds	r20, 0x042C
     a9a:	50 91 2d 04 	lds	r21, 0x042D
     a9e:	60 91 2e 04 	lds	r22, 0x042E
     aa2:	70 91 2f 04 	lds	r23, 0x042F
     aa6:	81 e1       	ldi	r24, 0x11	; 17
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 4a 14 	call	0x2894	; 0x2894 <__eeupd_dword_m328p>
	eeprom_update_dword( &ee_nixiesleepstart, nixiesleepstart );
     aae:	40 91 23 04 	lds	r20, 0x0423
     ab2:	50 91 24 04 	lds	r21, 0x0424
     ab6:	60 91 25 04 	lds	r22, 0x0425
     aba:	70 91 26 04 	lds	r23, 0x0426
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 4a 14 	call	0x2894	; 0x2894 <__eeupd_dword_m328p>
	eeprom_update_dword( &ee_nixiesleepend, nixiesleepend );
     ac6:	40 91 1f 04 	lds	r20, 0x041F
     aca:	50 91 20 04 	lds	r21, 0x0420
     ace:	60 91 21 04 	lds	r22, 0x0421
     ad2:	70 91 22 04 	lds	r23, 0x0422
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 4a 14 	call	0x2894	; 0x2894 <__eeupd_dword_m328p>
	
	eeprom_update_byte( &ee_miltime, miltime );
     ade:	60 91 0f 01 	lds	r22, 0x010F
     ae2:	80 e1       	ldi	r24, 0x10	; 16
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showtherm, showtherm );
     aea:	60 91 29 04 	lds	r22, 0x0429
     aee:	8f e0       	ldi	r24, 0x0F	; 15
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showfreq, showfreq );
     af6:	60 91 28 04 	lds	r22, 0x0428
     afa:	8e e0       	ldi	r24, 0x0E	; 14
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showdate, showdate );
     b02:	60 91 27 04 	lds	r22, 0x0427
     b06:	8d e0       	ldi	r24, 0x0D	; 13
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_celsius, celsius );
     b0e:	60 91 0e 01 	lds	r22, 0x010E
     b12:	8c e0       	ldi	r24, 0x0C	; 12
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_doecho, doecho );
     b1a:	60 91 0d 01 	lds	r22, 0x010D
     b1e:	8b e0       	ldi	r24, 0x0B	; 11
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_acclock, acclock );
     b26:	60 91 0c 01 	lds	r22, 0x010C
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_xtalisfast, xtalisfast );
     b32:	60 91 0b 01 	lds	r22, 0x010B
     b36:	89 e0       	ldi	r24, 0x09	; 9
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_toggleled, toggleled );
     b3e:	60 91 0a 01 	lds	r22, 0x010A
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__eeupd_byte_m328p>

00000b4a <process_command>:




void process_command()
{
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
    if(strcasestr(myUartString,"hours") != NULL){
     b56:	60 e5       	ldi	r22, 0x50	; 80
     b58:	72 e0       	ldi	r23, 0x02	; 2
     b5a:	82 e6       	ldi	r24, 0x62	; 98
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     b62:	89 2b       	or	r24, r25
     b64:	21 f1       	breq	.+72     	; 0xbae <process_command+0x64>
        if(strcasestr(myUartString,"?") != NULL){
     b66:	66 e5       	ldi	r22, 0x56	; 86
     b68:	72 e0       	ldi	r23, 0x02	; 2
     b6a:	82 e6       	ldi	r24, 0x62	; 98
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     b72:	89 2b       	or	r24, r25
     b74:	41 f0       	breq	.+16     	; 0xb86 <process_command+0x3c>
            print_value("Hours", hours);
     b76:	40 91 16 01 	lds	r20, 0x0116
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	88 e5       	ldi	r24, 0x58	; 88
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	ed c1       	rjmp	.+986    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     b86:	6e e5       	ldi	r22, 0x5E	; 94
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	82 e6       	ldi	r24, 0x62	; 98
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     b92:	89 2b       	or	r24, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <process_command+0x4e>
     b96:	9a c4       	rjmp	.+2356   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 23, 0 ) )
     b98:	82 e6       	ldi	r24, 0x62	; 98
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     ba0:	68 31       	cpi	r22, 0x18	; 24
     ba2:	71 05       	cpc	r23, r1
     ba4:	81 05       	cpc	r24, r1
     ba6:	91 05       	cpc	r25, r1
     ba8:	08 f4       	brcc	.+2      	; 0xbac <process_command+0x62>
     baa:	9a c4       	rjmp	.+2356   	; 0x14e0 <process_command+0x996>
     bac:	8f c4       	rjmp	.+2334   	; 0x14cc <process_command+0x982>
            		hours = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"minutes") != NULL){
     bae:	60 e6       	ldi	r22, 0x60	; 96
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	82 e6       	ldi	r24, 0x62	; 98
     bb4:	95 e0       	ldi	r25, 0x05	; 5
     bb6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     bba:	89 2b       	or	r24, r25
     bbc:	21 f1       	breq	.+72     	; 0xc06 <process_command+0xbc>
        if(strcasestr(myUartString,"?") != NULL){
     bbe:	66 e5       	ldi	r22, 0x56	; 86
     bc0:	72 e0       	ldi	r23, 0x02	; 2
     bc2:	82 e6       	ldi	r24, 0x62	; 98
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     bca:	89 2b       	or	r24, r25
     bcc:	41 f0       	breq	.+16     	; 0xbde <process_command+0x94>
            print_value("Minutes", minutes);
     bce:	40 91 15 01 	lds	r20, 0x0115
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	88 e6       	ldi	r24, 0x68	; 104
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	c1 c1       	rjmp	.+898    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     bde:	6e e5       	ldi	r22, 0x5E	; 94
     be0:	72 e0       	ldi	r23, 0x02	; 2
     be2:	82 e6       	ldi	r24, 0x62	; 98
     be4:	95 e0       	ldi	r25, 0x05	; 5
     be6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     bea:	89 2b       	or	r24, r25
     bec:	09 f4       	brne	.+2      	; 0xbf0 <process_command+0xa6>
     bee:	6e c4       	rjmp	.+2268   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 59, 0 ) )
     bf0:	82 e6       	ldi	r24, 0x62	; 98
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     bf8:	6c 33       	cpi	r22, 0x3C	; 60
     bfa:	71 05       	cpc	r23, r1
     bfc:	81 05       	cpc	r24, r1
     bfe:	91 05       	cpc	r25, r1
     c00:	08 f4       	brcc	.+2      	; 0xc04 <process_command+0xba>
     c02:	75 c4       	rjmp	.+2282   	; 0x14ee <process_command+0x9a4>
     c04:	63 c4       	rjmp	.+2246   	; 0x14cc <process_command+0x982>
            		minutes = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"seconds") != NULL){
     c06:	60 e7       	ldi	r22, 0x70	; 112
     c08:	72 e0       	ldi	r23, 0x02	; 2
     c0a:	82 e6       	ldi	r24, 0x62	; 98
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     c12:	89 2b       	or	r24, r25
     c14:	21 f1       	breq	.+72     	; 0xc5e <process_command+0x114>
        if(strcasestr(myUartString,"?") != NULL){
     c16:	66 e5       	ldi	r22, 0x56	; 86
     c18:	72 e0       	ldi	r23, 0x02	; 2
     c1a:	82 e6       	ldi	r24, 0x62	; 98
     c1c:	95 e0       	ldi	r25, 0x05	; 5
     c1e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     c22:	89 2b       	or	r24, r25
     c24:	41 f0       	breq	.+16     	; 0xc36 <process_command+0xec>
            print_value("Seconds", seconds);
     c26:	40 91 10 01 	lds	r20, 0x0110
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	88 e7       	ldi	r24, 0x78	; 120
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	95 c1       	rjmp	.+810    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     c36:	6e e5       	ldi	r22, 0x5E	; 94
     c38:	72 e0       	ldi	r23, 0x02	; 2
     c3a:	82 e6       	ldi	r24, 0x62	; 98
     c3c:	95 e0       	ldi	r25, 0x05	; 5
     c3e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     c42:	89 2b       	or	r24, r25
     c44:	09 f4       	brne	.+2      	; 0xc48 <process_command+0xfe>
     c46:	42 c4       	rjmp	.+2180   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 59, 0 ) )
     c48:	82 e6       	ldi	r24, 0x62	; 98
     c4a:	95 e0       	ldi	r25, 0x05	; 5
     c4c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     c50:	6c 33       	cpi	r22, 0x3C	; 60
     c52:	71 05       	cpc	r23, r1
     c54:	81 05       	cpc	r24, r1
     c56:	91 05       	cpc	r25, r1
     c58:	08 f4       	brcc	.+2      	; 0xc5c <process_command+0x112>
     c5a:	50 c4       	rjmp	.+2208   	; 0x14fc <process_command+0x9b2>
     c5c:	37 c4       	rjmp	.+2158   	; 0x14cc <process_command+0x982>
            		seconds = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"mscal") != NULL){
     c5e:	60 e8       	ldi	r22, 0x80	; 128
     c60:	72 e0       	ldi	r23, 0x02	; 2
     c62:	82 e6       	ldi	r24, 0x62	; 98
     c64:	95 e0       	ldi	r25, 0x05	; 5
     c66:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     c6a:	89 2b       	or	r24, r25
     c6c:	69 f1       	breq	.+90     	; 0xcc8 <process_command+0x17e>
        if(strcasestr(myUartString,"?") != NULL){
     c6e:	66 e5       	ldi	r22, 0x56	; 86
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	82 e6       	ldi	r24, 0x62	; 98
     c74:	95 e0       	ldi	r25, 0x05	; 5
     c76:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     c7a:	89 2b       	or	r24, r25
     c7c:	59 f0       	breq	.+22     	; 0xc94 <process_command+0x14a>
            print_value("mS Calibration", mscal);
     c7e:	40 91 2c 04 	lds	r20, 0x042C
     c82:	50 91 2d 04 	lds	r21, 0x042D
     c86:	60 91 2e 04 	lds	r22, 0x042E
     c8a:	70 91 2f 04 	lds	r23, 0x042F
     c8e:	86 e8       	ldi	r24, 0x86	; 134
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	66 c1       	rjmp	.+716    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     c94:	6e e5       	ldi	r22, 0x5E	; 94
     c96:	72 e0       	ldi	r23, 0x02	; 2
     c98:	82 e6       	ldi	r24, 0x62	; 98
     c9a:	95 e0       	ldi	r25, 0x05	; 5
     c9c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ca0:	89 2b       	or	r24, r25
     ca2:	09 f4       	brne	.+2      	; 0xca6 <process_command+0x15c>
     ca4:	13 c4       	rjmp	.+2086   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 4294967295, 0 ) )
     ca6:	82 e6       	ldi	r24, 0x62	; 98
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
            		mscal = splitString(myUartString);
     cae:	82 e6       	ldi	r24, 0x62	; 98
     cb0:	95 e0       	ldi	r25, 0x05	; 5
     cb2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
     cb6:	60 93 2c 04 	sts	0x042C, r22
     cba:	70 93 2d 04 	sts	0x042D, r23
     cbe:	80 93 2e 04 	sts	0x042E, r24
     cc2:	90 93 2f 04 	sts	0x042F, r25
     cc6:	02 c4       	rjmp	.+2052   	; 0x14cc <process_command+0x982>
            }
        }
    }
    
    else if(strcasestr(myUartString,"miltime") != NULL){
     cc8:	65 e9       	ldi	r22, 0x95	; 149
     cca:	72 e0       	ldi	r23, 0x02	; 2
     ccc:	82 e6       	ldi	r24, 0x62	; 98
     cce:	95 e0       	ldi	r25, 0x05	; 5
     cd0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     cd4:	89 2b       	or	r24, r25
     cd6:	21 f1       	breq	.+72     	; 0xd20 <process_command+0x1d6>
        if(strcasestr(myUartString,"?") != NULL){
     cd8:	66 e5       	ldi	r22, 0x56	; 86
     cda:	72 e0       	ldi	r23, 0x02	; 2
     cdc:	82 e6       	ldi	r24, 0x62	; 98
     cde:	95 e0       	ldi	r25, 0x05	; 5
     ce0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ce4:	89 2b       	or	r24, r25
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <process_command+0x1ae>
            print_value("MIL Time", miltime);
     ce8:	40 91 0f 01 	lds	r20, 0x010F
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	8d e9       	ldi	r24, 0x9D	; 157
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	34 c1       	rjmp	.+616    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     cf8:	6e e5       	ldi	r22, 0x5E	; 94
     cfa:	72 e0       	ldi	r23, 0x02	; 2
     cfc:	82 e6       	ldi	r24, 0x62	; 98
     cfe:	95 e0       	ldi	r25, 0x05	; 5
     d00:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d04:	89 2b       	or	r24, r25
     d06:	09 f4       	brne	.+2      	; 0xd0a <process_command+0x1c0>
     d08:	e1 c3       	rjmp	.+1986   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     d0a:	82 e6       	ldi	r24, 0x62	; 98
     d0c:	95 e0       	ldi	r25, 0x05	; 5
     d0e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     d12:	62 30       	cpi	r22, 0x02	; 2
     d14:	71 05       	cpc	r23, r1
     d16:	81 05       	cpc	r24, r1
     d18:	91 05       	cpc	r25, r1
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <process_command+0x1d4>
     d1c:	d7 c3       	rjmp	.+1966   	; 0x14cc <process_command+0x982>
     d1e:	f5 c3       	rjmp	.+2026   	; 0x150a <process_command+0x9c0>
            		miltime = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"year") != NULL){
     d20:	66 ea       	ldi	r22, 0xA6	; 166
     d22:	72 e0       	ldi	r23, 0x02	; 2
     d24:	82 e6       	ldi	r24, 0x62	; 98
     d26:	95 e0       	ldi	r25, 0x05	; 5
     d28:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d2c:	89 2b       	or	r24, r25
     d2e:	29 f1       	breq	.+74     	; 0xd7a <process_command+0x230>
        if(strcasestr(myUartString,"?") != NULL){
     d30:	66 e5       	ldi	r22, 0x56	; 86
     d32:	72 e0       	ldi	r23, 0x02	; 2
     d34:	82 e6       	ldi	r24, 0x62	; 98
     d36:	95 e0       	ldi	r25, 0x05	; 5
     d38:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d3c:	89 2b       	or	r24, r25
     d3e:	49 f0       	breq	.+18     	; 0xd52 <process_command+0x208>
            print_value("Year", year);
     d40:	40 91 11 01 	lds	r20, 0x0111
     d44:	50 91 12 01 	lds	r21, 0x0112
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	8b ea       	ldi	r24, 0xAB	; 171
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	07 c1       	rjmp	.+526    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     d52:	6e e5       	ldi	r22, 0x5E	; 94
     d54:	72 e0       	ldi	r23, 0x02	; 2
     d56:	82 e6       	ldi	r24, 0x62	; 98
     d58:	95 e0       	ldi	r25, 0x05	; 5
     d5a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d5e:	89 2b       	or	r24, r25
     d60:	09 f4       	brne	.+2      	; 0xd64 <process_command+0x21a>
     d62:	b4 c3       	rjmp	.+1896   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 2525, 0 ) )
     d64:	82 e6       	ldi	r24, 0x62	; 98
     d66:	95 e0       	ldi	r25, 0x05	; 5
     d68:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     d6c:	6e 3d       	cpi	r22, 0xDE	; 222
     d6e:	79 40       	sbci	r23, 0x09	; 9
     d70:	81 05       	cpc	r24, r1
     d72:	91 05       	cpc	r25, r1
     d74:	08 f4       	brcc	.+2      	; 0xd78 <process_command+0x22e>
     d76:	d0 c3       	rjmp	.+1952   	; 0x1518 <process_command+0x9ce>
     d78:	a9 c3       	rjmp	.+1874   	; 0x14cc <process_command+0x982>
            		year = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"month") != NULL){
     d7a:	60 eb       	ldi	r22, 0xB0	; 176
     d7c:	72 e0       	ldi	r23, 0x02	; 2
     d7e:	82 e6       	ldi	r24, 0x62	; 98
     d80:	95 e0       	ldi	r25, 0x05	; 5
     d82:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d86:	89 2b       	or	r24, r25
     d88:	21 f1       	breq	.+72     	; 0xdd2 <process_command+0x288>
        if(strcasestr(myUartString,"?") != NULL){
     d8a:	66 e5       	ldi	r22, 0x56	; 86
     d8c:	72 e0       	ldi	r23, 0x02	; 2
     d8e:	82 e6       	ldi	r24, 0x62	; 98
     d90:	95 e0       	ldi	r25, 0x05	; 5
     d92:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     d96:	89 2b       	or	r24, r25
     d98:	41 f0       	breq	.+16     	; 0xdaa <process_command+0x260>
            print_value("Month", month);
     d9a:	40 91 13 01 	lds	r20, 0x0113
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	86 eb       	ldi	r24, 0xB6	; 182
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	db c0       	rjmp	.+438    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     daa:	6e e5       	ldi	r22, 0x5E	; 94
     dac:	72 e0       	ldi	r23, 0x02	; 2
     dae:	82 e6       	ldi	r24, 0x62	; 98
     db0:	95 e0       	ldi	r25, 0x05	; 5
     db2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     db6:	89 2b       	or	r24, r25
     db8:	09 f4       	brne	.+2      	; 0xdbc <process_command+0x272>
     dba:	88 c3       	rjmp	.+1808   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 12, 0 ) )
     dbc:	82 e6       	ldi	r24, 0x62	; 98
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     dc4:	6d 30       	cpi	r22, 0x0D	; 13
     dc6:	71 05       	cpc	r23, r1
     dc8:	81 05       	cpc	r24, r1
     dca:	91 05       	cpc	r25, r1
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <process_command+0x286>
     dce:	ad c3       	rjmp	.+1882   	; 0x152a <process_command+0x9e0>
     dd0:	7d c3       	rjmp	.+1786   	; 0x14cc <process_command+0x982>
            		month = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"day") != NULL){
     dd2:	6c eb       	ldi	r22, 0xBC	; 188
     dd4:	72 e0       	ldi	r23, 0x02	; 2
     dd6:	82 e6       	ldi	r24, 0x62	; 98
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     dde:	89 2b       	or	r24, r25
     de0:	21 f1       	breq	.+72     	; 0xe2a <process_command+0x2e0>
        if(strcasestr(myUartString,"?") != NULL){
     de2:	66 e5       	ldi	r22, 0x56	; 86
     de4:	72 e0       	ldi	r23, 0x02	; 2
     de6:	82 e6       	ldi	r24, 0x62	; 98
     de8:	95 e0       	ldi	r25, 0x05	; 5
     dea:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     dee:	89 2b       	or	r24, r25
     df0:	41 f0       	breq	.+16     	; 0xe02 <process_command+0x2b8>
            print_value("Day", day);
     df2:	40 91 14 01 	lds	r20, 0x0114
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 ec       	ldi	r24, 0xC0	; 192
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	af c0       	rjmp	.+350    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     e02:	6e e5       	ldi	r22, 0x5E	; 94
     e04:	72 e0       	ldi	r23, 0x02	; 2
     e06:	82 e6       	ldi	r24, 0x62	; 98
     e08:	95 e0       	ldi	r25, 0x05	; 5
     e0a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e0e:	89 2b       	or	r24, r25
     e10:	09 f4       	brne	.+2      	; 0xe14 <process_command+0x2ca>
     e12:	5c c3       	rjmp	.+1720   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 31, 0 ) )
     e14:	82 e6       	ldi	r24, 0x62	; 98
     e16:	95 e0       	ldi	r25, 0x05	; 5
     e18:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     e1c:	60 32       	cpi	r22, 0x20	; 32
     e1e:	71 05       	cpc	r23, r1
     e20:	81 05       	cpc	r24, r1
     e22:	91 05       	cpc	r25, r1
     e24:	08 f4       	brcc	.+2      	; 0xe28 <process_command+0x2de>
     e26:	88 c3       	rjmp	.+1808   	; 0x1538 <process_command+0x9ee>
     e28:	51 c3       	rjmp	.+1698   	; 0x14cc <process_command+0x982>
            		day = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"celsius") != NULL){
     e2a:	64 ec       	ldi	r22, 0xC4	; 196
     e2c:	72 e0       	ldi	r23, 0x02	; 2
     e2e:	82 e6       	ldi	r24, 0x62	; 98
     e30:	95 e0       	ldi	r25, 0x05	; 5
     e32:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e36:	89 2b       	or	r24, r25
     e38:	21 f1       	breq	.+72     	; 0xe82 <process_command+0x338>
        if(strcasestr(myUartString,"?") != NULL){
     e3a:	66 e5       	ldi	r22, 0x56	; 86
     e3c:	72 e0       	ldi	r23, 0x02	; 2
     e3e:	82 e6       	ldi	r24, 0x62	; 98
     e40:	95 e0       	ldi	r25, 0x05	; 5
     e42:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e46:	89 2b       	or	r24, r25
     e48:	41 f0       	breq	.+16     	; 0xe5a <process_command+0x310>
            print_value("Celsius", celsius);
     e4a:	40 91 0e 01 	lds	r20, 0x010E
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	8c ec       	ldi	r24, 0xCC	; 204
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	83 c0       	rjmp	.+262    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     e5a:	6e e5       	ldi	r22, 0x5E	; 94
     e5c:	72 e0       	ldi	r23, 0x02	; 2
     e5e:	82 e6       	ldi	r24, 0x62	; 98
     e60:	95 e0       	ldi	r25, 0x05	; 5
     e62:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e66:	89 2b       	or	r24, r25
     e68:	09 f4       	brne	.+2      	; 0xe6c <process_command+0x322>
     e6a:	30 c3       	rjmp	.+1632   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     e6c:	82 e6       	ldi	r24, 0x62	; 98
     e6e:	95 e0       	ldi	r25, 0x05	; 5
     e70:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     e74:	62 30       	cpi	r22, 0x02	; 2
     e76:	71 05       	cpc	r23, r1
     e78:	81 05       	cpc	r24, r1
     e7a:	91 05       	cpc	r25, r1
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <process_command+0x336>
     e7e:	26 c3       	rjmp	.+1612   	; 0x14cc <process_command+0x982>
     e80:	62 c3       	rjmp	.+1732   	; 0x1546 <process_command+0x9fc>
            		celsius = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"doecho") != NULL){
     e82:	64 ed       	ldi	r22, 0xD4	; 212
     e84:	72 e0       	ldi	r23, 0x02	; 2
     e86:	82 e6       	ldi	r24, 0x62	; 98
     e88:	95 e0       	ldi	r25, 0x05	; 5
     e8a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e8e:	89 2b       	or	r24, r25
     e90:	21 f1       	breq	.+72     	; 0xeda <process_command+0x390>
        if(strcasestr(myUartString,"?") != NULL){
     e92:	66 e5       	ldi	r22, 0x56	; 86
     e94:	72 e0       	ldi	r23, 0x02	; 2
     e96:	82 e6       	ldi	r24, 0x62	; 98
     e98:	95 e0       	ldi	r25, 0x05	; 5
     e9a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     e9e:	89 2b       	or	r24, r25
     ea0:	41 f0       	breq	.+16     	; 0xeb2 <process_command+0x368>
            print_value("Do Echo", doecho);
     ea2:	40 91 0d 01 	lds	r20, 0x010D
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	8b ed       	ldi	r24, 0xDB	; 219
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	57 c0       	rjmp	.+174    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     eb2:	6e e5       	ldi	r22, 0x5E	; 94
     eb4:	72 e0       	ldi	r23, 0x02	; 2
     eb6:	82 e6       	ldi	r24, 0x62	; 98
     eb8:	95 e0       	ldi	r25, 0x05	; 5
     eba:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ebe:	89 2b       	or	r24, r25
     ec0:	09 f4       	brne	.+2      	; 0xec4 <process_command+0x37a>
     ec2:	04 c3       	rjmp	.+1544   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     ec4:	82 e6       	ldi	r24, 0x62	; 98
     ec6:	95 e0       	ldi	r25, 0x05	; 5
     ec8:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     ecc:	62 30       	cpi	r22, 0x02	; 2
     ece:	71 05       	cpc	r23, r1
     ed0:	81 05       	cpc	r24, r1
     ed2:	91 05       	cpc	r25, r1
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <process_command+0x38e>
     ed6:	fa c2       	rjmp	.+1524   	; 0x14cc <process_command+0x982>
     ed8:	3d c3       	rjmp	.+1658   	; 0x1554 <process_command+0xa0a>
            		doecho = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"acclock") != NULL){
     eda:	63 ee       	ldi	r22, 0xE3	; 227
     edc:	72 e0       	ldi	r23, 0x02	; 2
     ede:	82 e6       	ldi	r24, 0x62	; 98
     ee0:	95 e0       	ldi	r25, 0x05	; 5
     ee2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ee6:	89 2b       	or	r24, r25
     ee8:	21 f1       	breq	.+72     	; 0xf32 <process_command+0x3e8>
        if(strcasestr(myUartString,"?") != NULL){
     eea:	66 e5       	ldi	r22, 0x56	; 86
     eec:	72 e0       	ldi	r23, 0x02	; 2
     eee:	82 e6       	ldi	r24, 0x62	; 98
     ef0:	95 e0       	ldi	r25, 0x05	; 5
     ef2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ef6:	89 2b       	or	r24, r25
     ef8:	41 f0       	breq	.+16     	; 0xf0a <process_command+0x3c0>
            print_value("AC Clock", acclock);
     efa:	40 91 0c 01 	lds	r20, 0x010C
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	8b ee       	ldi	r24, 0xEB	; 235
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	2b c0       	rjmp	.+86     	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     f0a:	6e e5       	ldi	r22, 0x5E	; 94
     f0c:	72 e0       	ldi	r23, 0x02	; 2
     f0e:	82 e6       	ldi	r24, 0x62	; 98
     f10:	95 e0       	ldi	r25, 0x05	; 5
     f12:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     f16:	89 2b       	or	r24, r25
     f18:	09 f4       	brne	.+2      	; 0xf1c <process_command+0x3d2>
     f1a:	d8 c2       	rjmp	.+1456   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     f1c:	82 e6       	ldi	r24, 0x62	; 98
     f1e:	95 e0       	ldi	r25, 0x05	; 5
     f20:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     f24:	62 30       	cpi	r22, 0x02	; 2
     f26:	71 05       	cpc	r23, r1
     f28:	81 05       	cpc	r24, r1
     f2a:	91 05       	cpc	r25, r1
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <process_command+0x3e6>
     f2e:	ce c2       	rjmp	.+1436   	; 0x14cc <process_command+0x982>
     f30:	18 c3       	rjmp	.+1584   	; 0x1562 <process_command+0xa18>
            		acclock = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"xtalisfast") != NULL){
     f32:	64 ef       	ldi	r22, 0xF4	; 244
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	82 e6       	ldi	r24, 0x62	; 98
     f38:	95 e0       	ldi	r25, 0x05	; 5
     f3a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     f3e:	89 2b       	or	r24, r25
     f40:	31 f1       	breq	.+76     	; 0xf8e <process_command+0x444>
        if(strcasestr(myUartString,"?") != NULL){
     f42:	66 e5       	ldi	r22, 0x56	; 86
     f44:	72 e0       	ldi	r23, 0x02	; 2
     f46:	82 e6       	ldi	r24, 0x62	; 98
     f48:	95 e0       	ldi	r25, 0x05	; 5
     f4a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     f4e:	89 2b       	or	r24, r25
     f50:	51 f0       	breq	.+20     	; 0xf66 <process_command+0x41c>
            print_value("xtalisfast", xtalisfast);
     f52:	40 91 0b 01 	lds	r20, 0x010B
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	84 ef       	ldi	r24, 0xF4	; 244
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 8a 02 	call	0x514	; 0x514 <print_value>
     f64:	b3 c2       	rjmp	.+1382   	; 0x14cc <process_command+0x982>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     f66:	6e e5       	ldi	r22, 0x5E	; 94
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	82 e6       	ldi	r24, 0x62	; 98
     f6c:	95 e0       	ldi	r25, 0x05	; 5
     f6e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     f72:	89 2b       	or	r24, r25
     f74:	09 f4       	brne	.+2      	; 0xf78 <process_command+0x42e>
     f76:	aa c2       	rjmp	.+1364   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     f78:	82 e6       	ldi	r24, 0x62	; 98
     f7a:	95 e0       	ldi	r25, 0x05	; 5
     f7c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     f80:	62 30       	cpi	r22, 0x02	; 2
     f82:	71 05       	cpc	r23, r1
     f84:	81 05       	cpc	r24, r1
     f86:	91 05       	cpc	r25, r1
     f88:	08 f0       	brcs	.+2      	; 0xf8c <process_command+0x442>
     f8a:	a0 c2       	rjmp	.+1344   	; 0x14cc <process_command+0x982>
     f8c:	f1 c2       	rjmp	.+1506   	; 0x1570 <process_command+0xa26>
            		xtalisfast = splitString(myUartString);
            }
        }
    }
    
	else if(strcasestr(myUartString,"showtherm") != NULL){
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	72 e0       	ldi	r23, 0x02	; 2
     f92:	82 e6       	ldi	r24, 0x62	; 98
     f94:	95 e0       	ldi	r25, 0x05	; 5
     f96:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     f9a:	89 2b       	or	r24, r25
     f9c:	21 f1       	breq	.+72     	; 0xfe6 <process_command+0x49c>
        if(strcasestr(myUartString,"?") != NULL){
     f9e:	66 e5       	ldi	r22, 0x56	; 86
     fa0:	72 e0       	ldi	r23, 0x02	; 2
     fa2:	82 e6       	ldi	r24, 0x62	; 98
     fa4:	95 e0       	ldi	r25, 0x05	; 5
     fa6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     faa:	89 2b       	or	r24, r25
     fac:	41 f0       	breq	.+16     	; 0xfbe <process_command+0x474>
            print_value("Show Therm", showtherm);
     fae:	40 91 29 04 	lds	r20, 0x0429
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	89 e0       	ldi	r24, 0x09	; 9
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	d1 cf       	rjmp	.-94     	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     fbe:	6e e5       	ldi	r22, 0x5E	; 94
     fc0:	72 e0       	ldi	r23, 0x02	; 2
     fc2:	82 e6       	ldi	r24, 0x62	; 98
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     fca:	89 2b       	or	r24, r25
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <process_command+0x486>
     fce:	7e c2       	rjmp	.+1276   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     fd0:	82 e6       	ldi	r24, 0x62	; 98
     fd2:	95 e0       	ldi	r25, 0x05	; 5
     fd4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     fd8:	62 30       	cpi	r22, 0x02	; 2
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <process_command+0x49a>
     fe2:	74 c2       	rjmp	.+1256   	; 0x14cc <process_command+0x982>
     fe4:	cc c2       	rjmp	.+1432   	; 0x157e <process_command+0xa34>
            		showtherm = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"showfreq") != NULL){
     fe6:	64 e1       	ldi	r22, 0x14	; 20
     fe8:	73 e0       	ldi	r23, 0x03	; 3
     fea:	82 e6       	ldi	r24, 0x62	; 98
     fec:	95 e0       	ldi	r25, 0x05	; 5
     fee:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
     ff2:	89 2b       	or	r24, r25
     ff4:	21 f1       	breq	.+72     	; 0x103e <process_command+0x4f4>
        if(strcasestr(myUartString,"?") != NULL){
     ff6:	66 e5       	ldi	r22, 0x56	; 86
     ff8:	72 e0       	ldi	r23, 0x02	; 2
     ffa:	82 e6       	ldi	r24, 0x62	; 98
     ffc:	95 e0       	ldi	r25, 0x05	; 5
     ffe:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    1002:	89 2b       	or	r24, r25
    1004:	41 f0       	breq	.+16     	; 0x1016 <process_command+0x4cc>
            print_value("Show Freq", showfreq);
    1006:	40 91 28 04 	lds	r20, 0x0428
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	8d e1       	ldi	r24, 0x1D	; 29
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	a5 cf       	rjmp	.-182    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    1016:	6e e5       	ldi	r22, 0x5E	; 94
    1018:	72 e0       	ldi	r23, 0x02	; 2
    101a:	82 e6       	ldi	r24, 0x62	; 98
    101c:	95 e0       	ldi	r25, 0x05	; 5
    101e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    1022:	89 2b       	or	r24, r25
    1024:	09 f4       	brne	.+2      	; 0x1028 <process_command+0x4de>
    1026:	52 c2       	rjmp	.+1188   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    1028:	82 e6       	ldi	r24, 0x62	; 98
    102a:	95 e0       	ldi	r25, 0x05	; 5
    102c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    1030:	62 30       	cpi	r22, 0x02	; 2
    1032:	71 05       	cpc	r23, r1
    1034:	81 05       	cpc	r24, r1
    1036:	91 05       	cpc	r25, r1
    1038:	08 f0       	brcs	.+2      	; 0x103c <process_command+0x4f2>
    103a:	48 c2       	rjmp	.+1168   	; 0x14cc <process_command+0x982>
    103c:	a7 c2       	rjmp	.+1358   	; 0x158c <process_command+0xa42>
            		showfreq = splitString(myUartString);
            }
        }
    }
	
	else if(strcasestr(myUartString,"showdate") != NULL){
    103e:	67 e2       	ldi	r22, 0x27	; 39
    1040:	73 e0       	ldi	r23, 0x03	; 3
    1042:	82 e6       	ldi	r24, 0x62	; 98
    1044:	95 e0       	ldi	r25, 0x05	; 5
    1046:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    104a:	89 2b       	or	r24, r25
    104c:	21 f1       	breq	.+72     	; 0x1096 <process_command+0x54c>
        if(strcasestr(myUartString,"?") != NULL){
    104e:	66 e5       	ldi	r22, 0x56	; 86
    1050:	72 e0       	ldi	r23, 0x02	; 2
    1052:	82 e6       	ldi	r24, 0x62	; 98
    1054:	95 e0       	ldi	r25, 0x05	; 5
    1056:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    105a:	89 2b       	or	r24, r25
    105c:	41 f0       	breq	.+16     	; 0x106e <process_command+0x524>
            print_value("Show Date", showdate);
    105e:	40 91 27 04 	lds	r20, 0x0427
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	80 e3       	ldi	r24, 0x30	; 48
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	79 cf       	rjmp	.-270    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    106e:	6e e5       	ldi	r22, 0x5E	; 94
    1070:	72 e0       	ldi	r23, 0x02	; 2
    1072:	82 e6       	ldi	r24, 0x62	; 98
    1074:	95 e0       	ldi	r25, 0x05	; 5
    1076:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    107a:	89 2b       	or	r24, r25
    107c:	09 f4       	brne	.+2      	; 0x1080 <process_command+0x536>
    107e:	26 c2       	rjmp	.+1100   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    1080:	82 e6       	ldi	r24, 0x62	; 98
    1082:	95 e0       	ldi	r25, 0x05	; 5
    1084:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    1088:	62 30       	cpi	r22, 0x02	; 2
    108a:	71 05       	cpc	r23, r1
    108c:	81 05       	cpc	r24, r1
    108e:	91 05       	cpc	r25, r1
    1090:	08 f0       	brcs	.+2      	; 0x1094 <process_command+0x54a>
    1092:	1c c2       	rjmp	.+1080   	; 0x14cc <process_command+0x982>
    1094:	82 c2       	rjmp	.+1284   	; 0x159a <process_command+0xa50>
            		showdate = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"toggleled")!= NULL){
    1096:	6a e3       	ldi	r22, 0x3A	; 58
    1098:	73 e0       	ldi	r23, 0x03	; 3
    109a:	82 e6       	ldi	r24, 0x62	; 98
    109c:	95 e0       	ldi	r25, 0x05	; 5
    109e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    10a2:	89 2b       	or	r24, r25
    10a4:	21 f1       	breq	.+72     	; 0x10ee <process_command+0x5a4>
        if(strcasestr(myUartString,"?") != NULL){
    10a6:	66 e5       	ldi	r22, 0x56	; 86
    10a8:	72 e0       	ldi	r23, 0x02	; 2
    10aa:	82 e6       	ldi	r24, 0x62	; 98
    10ac:	95 e0       	ldi	r25, 0x05	; 5
    10ae:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    10b2:	89 2b       	or	r24, r25
    10b4:	41 f0       	breq	.+16     	; 0x10c6 <process_command+0x57c>
            print_value("Toggle LED", toggleled);
    10b6:	40 91 0a 01 	lds	r20, 0x010A
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	84 e4       	ldi	r24, 0x44	; 68
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	4d cf       	rjmp	.-358    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    10c6:	6e e5       	ldi	r22, 0x5E	; 94
    10c8:	72 e0       	ldi	r23, 0x02	; 2
    10ca:	82 e6       	ldi	r24, 0x62	; 98
    10cc:	95 e0       	ldi	r25, 0x05	; 5
    10ce:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    10d2:	89 2b       	or	r24, r25
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <process_command+0x58e>
    10d6:	fa c1       	rjmp	.+1012   	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    10d8:	82 e6       	ldi	r24, 0x62	; 98
    10da:	95 e0       	ldi	r25, 0x05	; 5
    10dc:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    10e0:	62 30       	cpi	r22, 0x02	; 2
    10e2:	71 05       	cpc	r23, r1
    10e4:	81 05       	cpc	r24, r1
    10e6:	91 05       	cpc	r25, r1
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <process_command+0x5a2>
    10ea:	f0 c1       	rjmp	.+992    	; 0x14cc <process_command+0x982>
    10ec:	5d c2       	rjmp	.+1210   	; 0x15a8 <process_command+0xa5e>
            		toggleled = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"nixiesleepstart") != NULL){
    10ee:	6f e4       	ldi	r22, 0x4F	; 79
    10f0:	73 e0       	ldi	r23, 0x03	; 3
    10f2:	82 e6       	ldi	r24, 0x62	; 98
    10f4:	95 e0       	ldi	r25, 0x05	; 5
    10f6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    10fa:	89 2b       	or	r24, r25
    10fc:	39 f1       	breq	.+78     	; 0x114c <process_command+0x602>
        if(strcasestr(myUartString,"?") != NULL){
    10fe:	66 e5       	ldi	r22, 0x56	; 86
    1100:	72 e0       	ldi	r23, 0x02	; 2
    1102:	82 e6       	ldi	r24, 0x62	; 98
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    110a:	89 2b       	or	r24, r25
    110c:	59 f0       	breq	.+22     	; 0x1124 <process_command+0x5da>
            print_value("Nixie Sleep Start Time", nixiesleepstart);
    110e:	40 91 23 04 	lds	r20, 0x0423
    1112:	50 91 24 04 	lds	r21, 0x0424
    1116:	60 91 25 04 	lds	r22, 0x0425
    111a:	70 91 26 04 	lds	r23, 0x0426
    111e:	8f e5       	ldi	r24, 0x5F	; 95
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	1e cf       	rjmp	.-452    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    1124:	6e e5       	ldi	r22, 0x5E	; 94
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	82 e6       	ldi	r24, 0x62	; 98
    112a:	95 e0       	ldi	r25, 0x05	; 5
    112c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    1130:	89 2b       	or	r24, r25
    1132:	09 f4       	brne	.+2      	; 0x1136 <process_command+0x5ec>
    1134:	cb c1       	rjmp	.+918    	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 2358, 0 ) )
    1136:	82 e6       	ldi	r24, 0x62	; 98
    1138:	95 e0       	ldi	r25, 0x05	; 5
    113a:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    113e:	67 33       	cpi	r22, 0x37	; 55
    1140:	79 40       	sbci	r23, 0x09	; 9
    1142:	81 05       	cpc	r24, r1
    1144:	91 05       	cpc	r25, r1
    1146:	08 f4       	brcc	.+2      	; 0x114a <process_command+0x600>
    1148:	36 c2       	rjmp	.+1132   	; 0x15b6 <process_command+0xa6c>
    114a:	c0 c1       	rjmp	.+896    	; 0x14cc <process_command+0x982>
            		nixiesleepstart = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"nixiesleepend") != NULL){
    114c:	66 e7       	ldi	r22, 0x76	; 118
    114e:	73 e0       	ldi	r23, 0x03	; 3
    1150:	82 e6       	ldi	r24, 0x62	; 98
    1152:	95 e0       	ldi	r25, 0x05	; 5
    1154:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    1158:	89 2b       	or	r24, r25
    115a:	d1 f1       	breq	.+116    	; 0x11d0 <process_command+0x686>
        if(strcasestr(myUartString,"?") != NULL){
    115c:	66 e5       	ldi	r22, 0x56	; 86
    115e:	72 e0       	ldi	r23, 0x02	; 2
    1160:	82 e6       	ldi	r24, 0x62	; 98
    1162:	95 e0       	ldi	r25, 0x05	; 5
    1164:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    1168:	89 2b       	or	r24, r25
    116a:	59 f0       	breq	.+22     	; 0x1182 <process_command+0x638>
            print_value("Nixie Sleep End Time", nixiesleepend);
    116c:	40 91 1f 04 	lds	r20, 0x041F
    1170:	50 91 20 04 	lds	r21, 0x0420
    1174:	60 91 21 04 	lds	r22, 0x0421
    1178:	70 91 22 04 	lds	r23, 0x0422
    117c:	84 e8       	ldi	r24, 0x84	; 132
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	ef ce       	rjmp	.-546    	; 0xf60 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    1182:	6e e5       	ldi	r22, 0x5E	; 94
    1184:	72 e0       	ldi	r23, 0x02	; 2
    1186:	82 e6       	ldi	r24, 0x62	; 98
    1188:	95 e0       	ldi	r25, 0x05	; 5
    118a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    118e:	89 2b       	or	r24, r25
    1190:	09 f4       	brne	.+2      	; 0x1194 <process_command+0x64a>
    1192:	9c c1       	rjmp	.+824    	; 0x14cc <process_command+0x982>
        		if( inRange( splitString(myUartString), 2359, nixiesleepstart + 1 ) )
    1194:	c0 90 23 04 	lds	r12, 0x0423
    1198:	d0 90 24 04 	lds	r13, 0x0424
    119c:	e0 90 25 04 	lds	r14, 0x0425
    11a0:	f0 90 26 04 	lds	r15, 0x0426
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	c8 1a       	sub	r12, r24
    11a8:	d8 0a       	sbc	r13, r24
    11aa:	e8 0a       	sbc	r14, r24
    11ac:	f8 0a       	sbc	r15, r24
    11ae:	82 e6       	ldi	r24, 0x62	; 98
    11b0:	95 e0       	ldi	r25, 0x05	; 5
    11b2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    11b6:	6c 15       	cp	r22, r12
    11b8:	7d 05       	cpc	r23, r13
    11ba:	8e 05       	cpc	r24, r14
    11bc:	9f 05       	cpc	r25, r15
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <process_command+0x678>
    11c0:	85 c1       	rjmp	.+778    	; 0x14cc <process_command+0x982>
    11c2:	68 33       	cpi	r22, 0x38	; 56
    11c4:	79 40       	sbci	r23, 0x09	; 9
    11c6:	81 05       	cpc	r24, r1
    11c8:	91 05       	cpc	r25, r1
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <process_command+0x684>
    11cc:	01 c2       	rjmp	.+1026   	; 0x15d0 <process_command+0xa86>
    11ce:	7e c1       	rjmp	.+764    	; 0x14cc <process_command+0x982>
            }
        }
    }
    
    
    else if(strcasestr(myUartString,"getall") != NULL){
    11d0:	69 e9       	ldi	r22, 0x99	; 153
    11d2:	73 e0       	ldi	r23, 0x03	; 3
    11d4:	82 e6       	ldi	r24, 0x62	; 98
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    11dc:	89 2b       	or	r24, r25
    11de:	09 f4       	brne	.+2      	; 0x11e2 <process_command+0x698>
    11e0:	fa c0       	rjmp	.+500    	; 0x13d6 <process_command+0x88c>
    	
    	print_csv( ",", hours );					
    11e2:	40 91 16 01 	lds	r20, 0x0116
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 ea       	ldi	r24, 0xA0	; 160
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", minutes );					
    11f4:	40 91 15 01 	lds	r20, 0x0115
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 ea       	ldi	r24, 0xA0	; 160
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", seconds );					
    1206:	40 91 10 01 	lds	r20, 0x0110
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 ea       	ldi	r24, 0xA0	; 160
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", mscal );					
    1218:	40 91 2c 04 	lds	r20, 0x042C
    121c:	50 91 2d 04 	lds	r21, 0x042D
    1220:	60 91 2e 04 	lds	r22, 0x042E
    1224:	70 91 2f 04 	lds	r23, 0x042F
    1228:	80 ea       	ldi	r24, 0xA0	; 160
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", miltime );					
    1230:	40 91 0f 01 	lds	r20, 0x010F
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	80 ea       	ldi	r24, 0xA0	; 160
    123c:	93 e0       	ldi	r25, 0x03	; 3
    123e:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", year );						
    1242:	40 91 11 01 	lds	r20, 0x0111
    1246:	50 91 12 01 	lds	r21, 0x0112
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 ea       	ldi	r24, 0xA0	; 160
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", month );					
    1256:	40 91 13 01 	lds	r20, 0x0113
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 ea       	ldi	r24, 0xA0	; 160
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", day );						
    1268:	40 91 14 01 	lds	r20, 0x0114
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	80 ea       	ldi	r24, 0xA0	; 160
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", celsius );					
    127a:	40 91 0e 01 	lds	r20, 0x010E
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	80 ea       	ldi	r24, 0xA0	; 160
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", doecho );					
    128c:	40 91 0d 01 	lds	r20, 0x010D
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 ea       	ldi	r24, 0xA0	; 160
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", xtalisfast );				
    129e:	40 91 0b 01 	lds	r20, 0x010B
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 ea       	ldi	r24, 0xA0	; 160
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", showtherm );				
    12b0:	40 91 29 04 	lds	r20, 0x0429
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", showdate );					
    12c2:	40 91 27 04 	lds	r20, 0x0427
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	80 ea       	ldi	r24, 0xA0	; 160
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", toggleled );				
    12d4:	40 91 0a 01 	lds	r20, 0x010A
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 ea       	ldi	r24, 0xA0	; 160
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", nixiesleepstart );			
    12e6:	40 91 23 04 	lds	r20, 0x0423
    12ea:	50 91 24 04 	lds	r21, 0x0424
    12ee:	60 91 25 04 	lds	r22, 0x0425
    12f2:	70 91 26 04 	lds	r23, 0x0426
    12f6:	80 ea       	ldi	r24, 0xA0	; 160
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", nixiesleepend );				
    12fe:	40 91 1f 04 	lds	r20, 0x041F
    1302:	50 91 20 04 	lds	r21, 0x0420
    1306:	60 91 21 04 	lds	r22, 0x0421
    130a:	70 91 22 04 	lds	r23, 0x0422
    130e:	80 ea       	ldi	r24, 0xA0	; 160
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", SERIAL_NUMBER );			
    1316:	44 e6       	ldi	r20, 0x64	; 100
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 ea       	ldi	r24, 0xA0	; 160
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	
    	// PWR_OK
    	double Volts = adc_raw[0] * 0.019375;
    1326:	60 91 c6 05 	lds	r22, 0x05C6
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    1334:	22 e5       	ldi	r18, 0x52	; 82
    1336:	38 eb       	ldi	r19, 0xB8	; 184
    1338:	4e e9       	ldi	r20, 0x9E	; 158
    133a:	5c e3       	ldi	r21, 0x3C	; 60
    133c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    1340:	02 e8       	ldi	r16, 0x82	; 130
    1342:	14 e0       	ldi	r17, 0x04	; 4
    1344:	22 e0       	ldi	r18, 0x02	; 2
    1346:	4a e0       	ldi	r20, 0x0A	; 10
    1348:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
        uart_puts(printBuffer);
    134c:	c8 01       	movw	r24, r16
    134e:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts(",");
    1352:	80 ea       	ldi	r24, 0xA0	; 160
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        
        // HV_Feedback
        Volts = adc_raw[1] * 1.9375;
    135a:	60 91 c7 05 	lds	r22, 0x05C7
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	48 ef       	ldi	r20, 0xF8	; 248
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    1374:	22 e0       	ldi	r18, 0x02	; 2
    1376:	4a e0       	ldi	r20, 0x0A	; 10
    1378:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
        uart_puts(printBuffer);
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts(",");
    1382:	80 ea       	ldi	r24, 0xA0	; 160
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        
        // Battery Voltage
        Volts = adc_raw[2] * 0.019375;
    138a:	60 91 c8 05 	lds	r22, 0x05C8
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    1398:	22 e5       	ldi	r18, 0x52	; 82
    139a:	38 eb       	ldi	r19, 0xB8	; 184
    139c:	4e e9       	ldi	r20, 0x9E	; 158
    139e:	5c e3       	ldi	r21, 0x3C	; 60
    13a0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    13a4:	22 e0       	ldi	r18, 0x02	; 2
    13a6:	4a e0       	ldi	r20, 0x0A	; 10
    13a8:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
        uart_puts(printBuffer);
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts(",");
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        
        // Rectified AC voltage
        Volts = adc_raw[3] * 0.11;
    13ba:	60 91 c9 05 	lds	r22, 0x05C9
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    13c8:	2e ea       	ldi	r18, 0xAE	; 174
    13ca:	37 e4       	ldi	r19, 0x47	; 71
    13cc:	41 ee       	ldi	r20, 0xE1	; 225
    13ce:	5d e3       	ldi	r21, 0x3D	; 61
    13d0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    13d4:	74 c0       	rjmp	.+232    	; 0x14be <process_command+0x974>
        dtostrf(Volts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    	
    }
    
    else if(strcasestr(myUartString,"ramtoeeprom") != NULL){
    13d6:	62 ea       	ldi	r22, 0xA2	; 162
    13d8:	73 e0       	ldi	r23, 0x03	; 3
    13da:	82 e6       	ldi	r24, 0x62	; 98
    13dc:	95 e0       	ldi	r25, 0x05	; 5
    13de:	0e 94 7e 13 	call	0x26fc	; 0x26fc <strcasestr>
    13e2:	89 2b       	or	r24, r25
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <process_command+0x8a6>
    	updateVarsToEeprom();   
    13e6:	0e 94 4b 05 	call	0xa96	; 0xa96 <updateVarsToEeprom>
		uart_puts( "EEPROM Storage Complete");
    13ea:	8e ea       	ldi	r24, 0xAE	; 174
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	6c c0       	rjmp	.+216    	; 0x14c8 <process_command+0x97e>
    }
    
    else if(strstr(myUartString,"poke") != NULL){
    13f0:	66 ec       	ldi	r22, 0xC6	; 198
    13f2:	73 e0       	ldi	r23, 0x03	; 3
    13f4:	82 e6       	ldi	r24, 0x62	; 98
    13f6:	95 e0       	ldi	r25, 0x05	; 5
    13f8:	0e 94 b5 13 	call	0x276a	; 0x276a <strstr>
    13fc:	89 2b       	or	r24, r25
    13fe:	a9 f0       	breq	.+42     	; 0x142a <process_command+0x8e0>
        
        uart_puts( "Hello!");
    1400:	8b ec       	ldi	r24, 0xCB	; 203
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts( RETURN_NEWLINE );
    1408:	89 e2       	ldi	r24, 0x29	; 41
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts( "I'm Serial Number: ");
    1410:	82 ed       	ldi	r24, 0xD2	; 210
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        uart_puts( itoa( SERIAL_NUMBER, printBuffer, 10 ) );
    1418:	4a e0       	ldi	r20, 0x0A	; 10
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	62 e8       	ldi	r22, 0x82	; 130
    141e:	74 e0       	ldi	r23, 0x04	; 4
    1420:	84 e6       	ldi	r24, 0x64	; 100
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 cf 13 	call	0x279e	; 0x279e <itoa>
    1428:	4f c0       	rjmp	.+158    	; 0x14c8 <process_command+0x97e>
        
    }
    
    else if(strstr(myUartString,"pwrok") != NULL){
    142a:	66 ee       	ldi	r22, 0xE6	; 230
    142c:	73 e0       	ldi	r23, 0x03	; 3
    142e:	82 e6       	ldi	r24, 0x62	; 98
    1430:	95 e0       	ldi	r25, 0x05	; 5
    1432:	0e 94 b5 13 	call	0x276a	; 0x276a <strstr>
    1436:	89 2b       	or	r24, r25
    1438:	19 f0       	breq	.+6      	; 0x1440 <process_command+0x8f6>
        // ~0.019375 V/count
        double pwrokVolts = adc_raw[0] * 0.019375;
    143a:	60 91 c6 05 	lds	r22, 0x05C6
    143e:	1e c0       	rjmp	.+60     	; 0x147c <process_command+0x932>
        dtostrf(pwrokVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"hvfeedback") != NULL){
    1440:	6c ee       	ldi	r22, 0xEC	; 236
    1442:	73 e0       	ldi	r23, 0x03	; 3
    1444:	82 e6       	ldi	r24, 0x62	; 98
    1446:	95 e0       	ldi	r25, 0x05	; 5
    1448:	0e 94 b5 13 	call	0x276a	; 0x276a <strstr>
    144c:	89 2b       	or	r24, r25
    144e:	61 f0       	breq	.+24     	; 0x1468 <process_command+0x91e>
        // ~1.9375 V/count
        double hvVolts = adc_raw[1] * 1.9375;
    1450:	60 91 c7 05 	lds	r22, 0x05C7
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	48 ef       	ldi	r20, 0xF8	; 248
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <process_command+0x96c>
        dtostrf(hvVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"battvoltage") != NULL){
    1468:	67 ef       	ldi	r22, 0xF7	; 247
    146a:	73 e0       	ldi	r23, 0x03	; 3
    146c:	82 e6       	ldi	r24, 0x62	; 98
    146e:	95 e0       	ldi	r25, 0x05	; 5
    1470:	0e 94 b5 13 	call	0x276a	; 0x276a <strstr>
    1474:	89 2b       	or	r24, r25
    1476:	61 f0       	breq	.+24     	; 0x1490 <process_command+0x946>
        // ~0.019375 V/count
        double battVolts = adc_raw[2] * 0.019375;
    1478:	60 91 c8 05 	lds	r22, 0x05C8
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    1486:	22 e5       	ldi	r18, 0x52	; 82
    1488:	38 eb       	ldi	r19, 0xB8	; 184
    148a:	4e e9       	ldi	r20, 0x9E	; 158
    148c:	5c e3       	ldi	r21, 0x3C	; 60
    148e:	13 c0       	rjmp	.+38     	; 0x14b6 <process_command+0x96c>
        dtostrf(battVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"rectifiedac") != NULL){
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	74 e0       	ldi	r23, 0x04	; 4
    1494:	82 e6       	ldi	r24, 0x62	; 98
    1496:	95 e0       	ldi	r25, 0x05	; 5
    1498:	0e 94 b5 13 	call	0x276a	; 0x276a <strstr>
    149c:	89 2b       	or	r24, r25
    149e:	b1 f0       	breq	.+44     	; 0x14cc <process_command+0x982>
    	// 1K / 1K + 4K7 = 1K / 5K7 = ~0.175438 
    	// 0.175 ^-1 = 5.7 
        // ~0.11 V/count
        double rectVolts = adc_raw[3] * 0.11;
    14a0:	60 91 c9 05 	lds	r22, 0x05C9
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    14ae:	2e ea       	ldi	r18, 0xAE	; 174
    14b0:	37 e4       	ldi	r19, 0x47	; 71
    14b2:	41 ee       	ldi	r20, 0xE1	; 225
    14b4:	5d e3       	ldi	r21, 0x3D	; 61
    14b6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
        dtostrf(rectVolts , 10, 2, printBuffer);
    14ba:	02 e8       	ldi	r16, 0x82	; 130
    14bc:	14 e0       	ldi	r17, 0x04	; 4
    14be:	22 e0       	ldi	r18, 0x02	; 2
    14c0:	4a e0       	ldi	r20, 0x0A	; 10
    14c2:	0e 94 36 13 	call	0x266c	; 0x266c <dtostrf>
        uart_puts(printBuffer);
    14c6:	c8 01       	movw	r24, r16
    14c8:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
    }
    uart_puts( RETURN_NEWLINE );
    14cc:	89 e2       	ldi	r24, 0x29	; 41
    14ce:	91 e0       	ldi	r25, 0x01	; 1
}
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
        // ~0.11 V/count
        double rectVolts = adc_raw[3] * 0.11;
        dtostrf(rectVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    uart_puts( RETURN_NEWLINE );
    14dc:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <uart_puts>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Hours", hours);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 23, 0 ) )
            		hours = splitString(myUartString);
    14e0:	82 e6       	ldi	r24, 0x62	; 98
    14e2:	95 e0       	ldi	r25, 0x05	; 5
    14e4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    14e8:	60 93 16 01 	sts	0x0116, r22
    14ec:	ef cf       	rjmp	.-34     	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Minutes", minutes);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 59, 0 ) )
            		minutes = splitString(myUartString);
    14ee:	82 e6       	ldi	r24, 0x62	; 98
    14f0:	95 e0       	ldi	r25, 0x05	; 5
    14f2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    14f6:	60 93 15 01 	sts	0x0115, r22
    14fa:	e8 cf       	rjmp	.-48     	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Seconds", seconds);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 59, 0 ) )
            		seconds = splitString(myUartString);
    14fc:	82 e6       	ldi	r24, 0x62	; 98
    14fe:	95 e0       	ldi	r25, 0x05	; 5
    1500:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1504:	60 93 10 01 	sts	0x0110, r22
    1508:	e1 cf       	rjmp	.-62     	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("MIL Time", miltime);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		miltime = splitString(myUartString);
    150a:	82 e6       	ldi	r24, 0x62	; 98
    150c:	95 e0       	ldi	r25, 0x05	; 5
    150e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1512:	60 93 0f 01 	sts	0x010F, r22
    1516:	da cf       	rjmp	.-76     	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Year", year);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2525, 0 ) )
            		year = splitString(myUartString);
    1518:	82 e6       	ldi	r24, 0x62	; 98
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1520:	70 93 12 01 	sts	0x0112, r23
    1524:	60 93 11 01 	sts	0x0111, r22
    1528:	d1 cf       	rjmp	.-94     	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Month", month);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 12, 0 ) )
            		month = splitString(myUartString);
    152a:	82 e6       	ldi	r24, 0x62	; 98
    152c:	95 e0       	ldi	r25, 0x05	; 5
    152e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1532:	60 93 13 01 	sts	0x0113, r22
    1536:	ca cf       	rjmp	.-108    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Day", day);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 31, 0 ) )
            		day = splitString(myUartString);
    1538:	82 e6       	ldi	r24, 0x62	; 98
    153a:	95 e0       	ldi	r25, 0x05	; 5
    153c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1540:	60 93 14 01 	sts	0x0114, r22
    1544:	c3 cf       	rjmp	.-122    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Celsius", celsius);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		celsius = splitString(myUartString);
    1546:	82 e6       	ldi	r24, 0x62	; 98
    1548:	95 e0       	ldi	r25, 0x05	; 5
    154a:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    154e:	60 93 0e 01 	sts	0x010E, r22
    1552:	bc cf       	rjmp	.-136    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Do Echo", doecho);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		doecho = splitString(myUartString);
    1554:	82 e6       	ldi	r24, 0x62	; 98
    1556:	95 e0       	ldi	r25, 0x05	; 5
    1558:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    155c:	60 93 0d 01 	sts	0x010D, r22
    1560:	b5 cf       	rjmp	.-150    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("AC Clock", acclock);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		acclock = splitString(myUartString);
    1562:	82 e6       	ldi	r24, 0x62	; 98
    1564:	95 e0       	ldi	r25, 0x05	; 5
    1566:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    156a:	60 93 0c 01 	sts	0x010C, r22
    156e:	ae cf       	rjmp	.-164    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("xtalisfast", xtalisfast);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		xtalisfast = splitString(myUartString);
    1570:	82 e6       	ldi	r24, 0x62	; 98
    1572:	95 e0       	ldi	r25, 0x05	; 5
    1574:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1578:	60 93 0b 01 	sts	0x010B, r22
    157c:	a7 cf       	rjmp	.-178    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Therm", showtherm);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showtherm = splitString(myUartString);
    157e:	82 e6       	ldi	r24, 0x62	; 98
    1580:	95 e0       	ldi	r25, 0x05	; 5
    1582:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1586:	60 93 29 04 	sts	0x0429, r22
    158a:	a0 cf       	rjmp	.-192    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Freq", showfreq);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showfreq = splitString(myUartString);
    158c:	82 e6       	ldi	r24, 0x62	; 98
    158e:	95 e0       	ldi	r25, 0x05	; 5
    1590:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1594:	60 93 28 04 	sts	0x0428, r22
    1598:	99 cf       	rjmp	.-206    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Date", showdate);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showdate = splitString(myUartString);
    159a:	82 e6       	ldi	r24, 0x62	; 98
    159c:	95 e0       	ldi	r25, 0x05	; 5
    159e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    15a2:	60 93 27 04 	sts	0x0427, r22
    15a6:	92 cf       	rjmp	.-220    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Toggle LED", toggleled);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		toggleled = splitString(myUartString);
    15a8:	82 e6       	ldi	r24, 0x62	; 98
    15aa:	95 e0       	ldi	r25, 0x05	; 5
    15ac:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    15b0:	60 93 0a 01 	sts	0x010A, r22
    15b4:	8b cf       	rjmp	.-234    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Nixie Sleep Start Time", nixiesleepstart);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2358, 0 ) )
            		nixiesleepstart = splitString(myUartString);
    15b6:	82 e6       	ldi	r24, 0x62	; 98
    15b8:	95 e0       	ldi	r25, 0x05	; 5
    15ba:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    15be:	60 93 23 04 	sts	0x0423, r22
    15c2:	70 93 24 04 	sts	0x0424, r23
    15c6:	80 93 25 04 	sts	0x0425, r24
    15ca:	90 93 26 04 	sts	0x0426, r25
    15ce:	7e cf       	rjmp	.-260    	; 0x14cc <process_command+0x982>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Nixie Sleep End Time", nixiesleepend);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2359, nixiesleepstart + 1 ) )
            		nixiesleepend = splitString(myUartString);
    15d0:	82 e6       	ldi	r24, 0x62	; 98
    15d2:	95 e0       	ldi	r25, 0x05	; 5
    15d4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    15d8:	60 93 1f 04 	sts	0x041F, r22
    15dc:	70 93 20 04 	sts	0x0420, r23
    15e0:	80 93 21 04 	sts	0x0421, r24
    15e4:	90 93 22 04 	sts	0x0422, r25
    15e8:	71 cf       	rjmp	.-286    	; 0x14cc <process_command+0x982>

000015ea <checkSerialIn>:




void checkSerialIn()
{
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    
    unsigned int aChar = uart_getc();
    15ee:	0e 94 0c 10 	call	0x2018	; 0x2018 <uart_getc>
    15f2:	ec 01       	movw	r28, r24
    
    if ( aChar & UART_NO_DATA )
    15f4:	90 fd       	sbrc	r25, 0
    15f6:	33 c0       	rjmp	.+102    	; 0x165e <checkSerialIn+0x74>

        /*
         * new data available from UART
         * check for Frame or Overrun error
         */
        if ( aChar & UART_FRAME_ERROR )
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <checkSerialIn+0x1a>
        {
            /* Framing Error detected, i.e no stop bit detected */
            uart_puts_P("UART Frame Error: ");
    15fc:	88 e6       	ldi	r24, 0x68	; 104
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 48 10 	call	0x2090	; 0x2090 <uart_puts_p>
        }
        if ( aChar & UART_OVERRUN_ERROR )
    1604:	d2 ff       	sbrs	r29, 2
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <checkSerialIn+0x26>
            /*
             * Overrun, a character already present in the UART UDR register was
             * not read by the interrupt handler before the next character arrived,
             * one or more received characters have been dropped
             */
            uart_puts_P("UART Overrun Error: ");
    1608:	8b e7       	ldi	r24, 0x7B	; 123
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 48 10 	call	0x2090	; 0x2090 <uart_puts_p>
        }
        if ( aChar & UART_BUFFER_OVERFLOW )
    1610:	d1 ff       	sbrs	r29, 1
    1612:	04 c0       	rjmp	.+8      	; 0x161c <checkSerialIn+0x32>
        {
            /*
             * We are not reading the receive buffer fast enough,
             * one or more received character have been dropped
             */
            uart_puts_P("Buffer overflow error: ");
    1614:	80 e9       	ldi	r24, 0x90	; 144
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 48 10 	call	0x2090	; 0x2090 <uart_puts_p>
        /*
         * send received character back
         */
        
    // Add aChar to the growing string.
    uartString[uartStringIndex] = aChar;
    161c:	80 91 32 04 	lds	r24, 0x0432
    1620:	dc 2f       	mov	r29, r28
    1622:	e8 2f       	mov	r30, r24
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	ea 51       	subi	r30, 0x1A	; 26
    1628:	fb 4f       	sbci	r31, 0xFB	; 251
    162a:	c0 83       	st	Z, r28
    
    // Keep going until we see a CHAR_RETURN.
    if (uartString[uartStringIndex] == CHAR_RETURN) {
    162c:	cd 30       	cpi	r28, 0x0D	; 13
    162e:	59 f4       	brne	.+22     	; 0x1646 <checkSerialIn+0x5c>
        // Reset to 0, ready to go again
        uartStringIndex = 0;
    1630:	10 92 32 04 	sts	0x0432, r1
        uart_puts(RETURN_NEWLINE);
    1634:	89 e2       	ldi	r24, 0x29	; 41
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>
        
        copy_command();
    163c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <copy_command>
        process_command();
    1640:	0e 94 a5 05 	call	0xb4a	; 0xb4a <process_command>
    1644:	03 c0       	rjmp	.+6      	; 0x164c <checkSerialIn+0x62>
        }
    else {
        uartStringIndex++;
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	80 93 32 04 	sts	0x0432, r24
    }
    
    if( doecho ){
    164c:	80 91 0d 01 	lds	r24, 0x010D
    1650:	88 23       	and	r24, r24
    1652:	29 f0       	breq	.+10     	; 0x165e <checkSerialIn+0x74>
    	uart_putc( (unsigned char)aChar ); //echo
    1654:	8d 2f       	mov	r24, r29
    }
        
    }
}
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    else {
        uartStringIndex++;
    }
    
    if( doecho ){
    	uart_putc( (unsigned char)aChar ); //echo
    165a:	0c 94 27 10 	jmp	0x204e	; 0x204e <uart_putc>
    }
        
    }
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <acPowerOk>:



uint8_t acPowerOk( void )
{
	if( adc_raw[0] < 51 ){	// If PWR_OK < ~2 V
    1664:	90 91 c6 05 	lds	r25, 0x05C6
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	93 33       	cpi	r25, 0x33	; 51
    166c:	08 f4       	brcc	.+2      	; 0x1670 <acPowerOk+0xc>
    166e:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}else{
		return 1;
	}

}
    1670:	08 95       	ret

00001672 <__vector_11>:
// This interrupt is called at 1kHz
// Here we are keeping track of milliseconds and adjusting them slightly to get 1 clock second
// to equal 1 real world second very closely.
// Set via serial comms,  mscal = F_CPU / (F_CPU * PPM_ERROR), then set fast or slow.
ISR( TIMER1_COMPA_vect )
{
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	2f 93       	push	r18
    167e:	3f 93       	push	r19
    1680:	4f 93       	push	r20
    1682:	5f 93       	push	r21
    1684:	6f 93       	push	r22
    1686:	7f 93       	push	r23
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	af 93       	push	r26
    168e:	bf 93       	push	r27
    1690:	ef 93       	push	r30
    1692:	ff 93       	push	r31
    static uint16_t milliSeconds = 0;		// mS value for timekeeping 1000mS/1S
    static uint32_t clockCalCounter = 0;	// counting up the milliseconds to mscal
    const uint16_t MS_IN_SEC = 1000;		// 1000mS/1S
    static uint16_t acFreqFiltCtr = 0;		// this is incremented until it == AC_FRQ_FILT_SEC
    milliSeconds++;
    1694:	20 91 35 04 	lds	r18, 0x0435
    1698:	30 91 36 04 	lds	r19, 0x0436
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	30 93 36 04 	sts	0x0436, r19
    16a4:	20 93 35 04 	sts	0x0435, r18
    clockCalCounter++;
    16a8:	80 91 37 04 	lds	r24, 0x0437
    16ac:	90 91 38 04 	lds	r25, 0x0438
    16b0:	a0 91 39 04 	lds	r26, 0x0439
    16b4:	b0 91 3a 04 	lds	r27, 0x043A
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	a1 1d       	adc	r26, r1
    16bc:	b1 1d       	adc	r27, r1
    16be:	80 93 37 04 	sts	0x0437, r24
    16c2:	90 93 38 04 	sts	0x0438, r25
    16c6:	a0 93 39 04 	sts	0x0439, r26
    16ca:	b0 93 3a 04 	sts	0x043A, r27
    
    
    if( milliSeconds >= MS_IN_SEC )
    16ce:	28 3e       	cpi	r18, 0xE8	; 232
    16d0:	33 40       	sbci	r19, 0x03	; 3
    16d2:	00 f1       	brcs	.+64     	; 0x1714 <__vector_11+0xa2>
    {
    	if( acclock == 0 || acPowerOk() == 0 ){	// If we are meant to use the internal xtal, not power line frequency for timekeeping.
    16d4:	80 91 0c 01 	lds	r24, 0x010C
    16d8:	81 11       	cpse	r24, r1
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <__vector_11+0x76>
    											// Or, if we loose AC power, and we are in AC clock mode we should step in and keep time here.
        	seconds++;          // increment seconds
    16dc:	80 91 10 01 	lds	r24, 0x0110
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	80 93 10 01 	sts	0x0110, r24
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <__vector_11+0x7e>
    clockCalCounter++;
    
    
    if( milliSeconds >= MS_IN_SEC )
    {
    	if( acclock == 0 || acPowerOk() == 0 ){	// If we are meant to use the internal xtal, not power line frequency for timekeeping.
    16e8:	0e 94 32 0b 	call	0x1664	; 0x1664 <acPowerOk>
    16ec:	88 23       	and	r24, r24
    16ee:	b1 f3       	breq	.-20     	; 0x16dc <__vector_11+0x6a>
    											// Or, if we loose AC power, and we are in AC clock mode we should step in and keep time here.
        	seconds++;          // increment seconds
        }
        
        	milliSeconds = 0;   // reset milliseconds
    16f0:	10 92 36 04 	sts	0x0436, r1
    16f4:	10 92 35 04 	sts	0x0435, r1
        
        	if( toggleled )		// Clearly toggling the LED is only available when using the internal xtal.
    16f8:	80 91 0a 01 	lds	r24, 0x010A
    16fc:	81 11       	cpse	r24, r1
        		toggle_led();	// Toggle the LED if allowed.
    16fe:	0e 94 27 02 	call	0x44e	; 0x44e <toggle_led>
        	acFreqFiltCtr++;	// Increment the frequency filter counter.	
    1702:	80 91 3b 04 	lds	r24, 0x043B
    1706:	90 91 3c 04 	lds	r25, 0x043C
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	90 93 3c 04 	sts	0x043C, r25
    1710:	80 93 3b 04 	sts	0x043B, r24
    }
    
    // For measuring the power line frequency.
	if( acFreqFiltCtr >= AC_FRQ_FILT_SEC )
    1714:	80 91 3b 04 	lds	r24, 0x043B
    1718:	90 91 3c 04 	lds	r25, 0x043C
    171c:	cc 97       	sbiw	r24, 0x3c	; 60
    171e:	98 f0       	brcs	.+38     	; 0x1746 <__vector_11+0xd4>
	{
		acZeroCrossSnapshot = acZeroCrossCounter;	// Grab the current number of zero crossings since the last.
    1720:	80 91 18 04 	lds	r24, 0x0418
    1724:	90 91 19 04 	lds	r25, 0x0419
    1728:	90 93 17 04 	sts	0x0417, r25
    172c:	80 93 16 04 	sts	0x0416, r24
		acZeroCrossCounter = 0;				// Reset the number of zero crossings.
    1730:	10 92 19 04 	sts	0x0419, r1
    1734:	10 92 18 04 	sts	0x0418, r1
		acFreqFlag = 1;						// Signal that a computation is ready to be made.
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	80 93 11 04 	sts	0x0411, r24
		acFreqFiltCtr = 0;					// Reset the measurement interval counter.
    173e:	10 92 3c 04 	sts	0x043C, r1
    1742:	10 92 3b 04 	sts	0x043B, r1

    

    // Only adjust the time if mscal is not 0, this way we can disable the
    // adjustment during the calibration procedure.
    if( mscal != 0 )
    1746:	80 91 2c 04 	lds	r24, 0x042C
    174a:	90 91 2d 04 	lds	r25, 0x042D
    174e:	a0 91 2e 04 	lds	r26, 0x042E
    1752:	b0 91 2f 04 	lds	r27, 0x042F
    1756:	89 2b       	or	r24, r25
    1758:	8a 2b       	or	r24, r26
    175a:	8b 2b       	or	r24, r27
    175c:	09 f4       	brne	.+2      	; 0x1760 <__vector_11+0xee>
    175e:	4a c0       	rjmp	.+148    	; 0x17f4 <__vector_11+0x182>
    {
        if( xtalisfast == 1 )
    1760:	20 91 0b 01 	lds	r18, 0x010B
    1764:	80 91 37 04 	lds	r24, 0x0437
    1768:	90 91 38 04 	lds	r25, 0x0438
    176c:	a0 91 39 04 	lds	r26, 0x0439
    1770:	b0 91 3a 04 	lds	r27, 0x043A
        {
            if( ( clockCalCounter >= mscal ) && ( milliSeconds > 1 ))
    1774:	40 91 2c 04 	lds	r20, 0x042C
    1778:	50 91 2d 04 	lds	r21, 0x042D
    177c:	60 91 2e 04 	lds	r22, 0x042E
    1780:	70 91 2f 04 	lds	r23, 0x042F

    // Only adjust the time if mscal is not 0, this way we can disable the
    // adjustment during the calibration procedure.
    if( mscal != 0 )
    {
        if( xtalisfast == 1 )
    1784:	21 30       	cpi	r18, 0x01	; 1
    1786:	79 f4       	brne	.+30     	; 0x17a6 <__vector_11+0x134>
        {
            if( ( clockCalCounter >= mscal ) && ( milliSeconds > 1 ))
    1788:	84 17       	cp	r24, r20
    178a:	95 07       	cpc	r25, r21
    178c:	a6 07       	cpc	r26, r22
    178e:	b7 07       	cpc	r27, r23
    1790:	88 f1       	brcs	.+98     	; 0x17f4 <__vector_11+0x182>
    1792:	20 91 35 04 	lds	r18, 0x0435
    1796:	30 91 36 04 	lds	r19, 0x0436
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	50 f1       	brcs	.+84     	; 0x17f4 <__vector_11+0x182>
            {
                milliSeconds--;
    17a0:	21 50       	subi	r18, 0x01	; 1
    17a2:	31 09       	sbc	r19, r1
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <__vector_11+0x152>
        {
            // milliseconds must be less than 999 to avoid missing an adjustment.
            // eg if milliseconds were to be 999 and we increment it here to 1000
            // the next ISR call will make it 1001 and reset to zero just as if it
            // would for 1000 and the adjustment would be effectively canceled out.
            if( ( clockCalCounter >= mscal ) && ( milliSeconds < MS_IN_SEC - 1 ) )
    17a6:	84 17       	cp	r24, r20
    17a8:	95 07       	cpc	r25, r21
    17aa:	a6 07       	cpc	r26, r22
    17ac:	b7 07       	cpc	r27, r23
    17ae:	10 f1       	brcs	.+68     	; 0x17f4 <__vector_11+0x182>
    17b0:	20 91 35 04 	lds	r18, 0x0435
    17b4:	30 91 36 04 	lds	r19, 0x0436
    17b8:	27 3e       	cpi	r18, 0xE7	; 231
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	34 07       	cpc	r19, r20
    17be:	d0 f4       	brcc	.+52     	; 0x17f4 <__vector_11+0x182>
            {
                milliSeconds++;
    17c0:	2f 5f       	subi	r18, 0xFF	; 255
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	30 93 36 04 	sts	0x0436, r19
    17c8:	20 93 35 04 	sts	0x0435, r18
         
                // it may be that clock_cal_counter > than mscal in which case
                // I want to count the tick towards the next adjustment
                // should always be 1 or 0
                clockCalCounter = clockCalCounter - mscal;
    17cc:	40 91 2c 04 	lds	r20, 0x042C
    17d0:	50 91 2d 04 	lds	r21, 0x042D
    17d4:	60 91 2e 04 	lds	r22, 0x042E
    17d8:	70 91 2f 04 	lds	r23, 0x042F
    17dc:	84 1b       	sub	r24, r20
    17de:	95 0b       	sbc	r25, r21
    17e0:	a6 0b       	sbc	r26, r22
    17e2:	b7 0b       	sbc	r27, r23
    17e4:	80 93 37 04 	sts	0x0437, r24
    17e8:	90 93 38 04 	sts	0x0438, r25
    17ec:	a0 93 39 04 	sts	0x0439, r26
    17f0:	b0 93 3a 04 	sts	0x043A, r27
            }
        }
    }
    
    updateBoostConverter();	// Updated here for determinism.
    17f4:	0e 94 34 04 	call	0x868	; 0x868 <updateBoostConverter>
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <turnOnOffBoostConverter>:

// Very important to use this function to turn ON or OFF the boost converter.  Read below to find out why.
// Send 1 to turn ON, send 0 ( or anything else ) to turn OFF
void turnOnOffBoostConverter( uint8_t state )
{
	if( state ){
    181a:	88 23       	and	r24, r24
    181c:	21 f0       	breq	.+8      	; 0x1826 <turnOnOffBoostConverter+0xc>
		TCCR0A |= ( 1 << COM0A1 );	// Connect the output pin to the PWM controller.
    181e:	84 b5       	in	r24, 0x24	; 36
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	84 bd       	out	0x24, r24	; 36
    1824:	08 95       	ret
	}
	else{
		TCCR0A &= ~( 1 << COM0A1 );	// Disconnect the output pin from the PWM controller.
    1826:	84 b5       	in	r24, 0x24	; 36
    1828:	8f 77       	andi	r24, 0x7F	; 127
    182a:	84 bd       	out	0x24, r24	; 36
		PORTD &= ~( 1 << F_BOOST );	// Set the output pin low, otherwise you will have a direct short 
    182c:	5e 98       	cbi	0x0b, 6	; 11
    182e:	08 95       	ret

00001830 <updateNixieOutputState>:




void updateNixieOutputState( void )
{
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
	uint16_t aTimeToCompare = 0;
	
	// Check to see if we have lost AC power.
	
	
	if( acPowerOk() == 0 )			// If we have lost AC power.
    1834:	0e 94 32 0b 	call	0x1664	; 0x1664 <acPowerOk>
    1838:	81 11       	cpse	r24, r1
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <updateNixieOutputState+0x16>
	{
		//
		turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
    183c:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	// Otherwise, the voltage is good, and the nixie sleep window is either not now or is inactive.
	turnOnOffBoostConverter( 1 );	// Turn on the boost converter.
	
}
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
	
	
	if( acPowerOk() == 0 )			// If we have lost AC power.
	{
		//
		turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
    1842:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <turnOnOffBoostConverter>
		return;						// Leave.
	}
	

		// Check to see if the nixies will go to sleep at night.
		if( nixiesleepstart != 0 )
    1846:	40 91 23 04 	lds	r20, 0x0423
    184a:	50 91 24 04 	lds	r21, 0x0424
    184e:	60 91 25 04 	lds	r22, 0x0425
    1852:	70 91 26 04 	lds	r23, 0x0426
    1856:	41 15       	cp	r20, r1
    1858:	51 05       	cpc	r21, r1
    185a:	61 05       	cpc	r22, r1
    185c:	71 05       	cpc	r23, r1
    185e:	59 f1       	breq	.+86     	; 0x18b6 <updateNixieOutputState+0x86>
		{
			// We aren't really comparing time here, just some integers.
			// This is because 10 AM is stored as 10000 in the sleep time vars.
			// This is OK, as it works out mathematically the same.
			
			aTimeToCompare = ( hours * 100 ) + minutes;
    1860:	20 91 16 01 	lds	r18, 0x0116
    1864:	80 91 15 01 	lds	r24, 0x0115
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	34 e6       	ldi	r19, 0x64	; 100
    186c:	23 9f       	mul	r18, r19
    186e:	80 0d       	add	r24, r0
    1870:	91 1d       	adc	r25, r1
    1872:	11 24       	eor	r1, r1
			// If the turn back ON time is the next day, it could be a smaller number than the turn OFF time.
			// If the turn back ON time is the same day, it could be a larger  number than the turn OFF time.
			// This matters due to the logic of checking if you are "inside" or "outside" the time window.
			
			// For turn ON/OFF times that are on the same day, the turn OFF time is smaller than the turn ON time.
			if( nixiesleepend >= nixiesleepstart ){
    1874:	00 91 1f 04 	lds	r16, 0x041F
    1878:	10 91 20 04 	lds	r17, 0x0420
    187c:	20 91 21 04 	lds	r18, 0x0421
    1880:	30 91 22 04 	lds	r19, 0x0422
    1884:	aa 27       	eor	r26, r26
    1886:	97 fd       	sbrc	r25, 7
    1888:	a0 95       	com	r26
    188a:	ba 2f       	mov	r27, r26
    188c:	04 17       	cp	r16, r20
    188e:	15 07       	cpc	r17, r21
    1890:	26 07       	cpc	r18, r22
    1892:	37 07       	cpc	r19, r23
    1894:	30 f0       	brcs	.+12     	; 0x18a2 <updateNixieOutputState+0x72>
				// Check to see if the time is in the sleep window.
				if( aTimeToCompare >= nixiesleepstart && aTimeToCompare < nixiesleepend )
    1896:	84 17       	cp	r24, r20
    1898:	95 07       	cpc	r25, r21
    189a:	a6 07       	cpc	r26, r22
    189c:	b7 07       	cpc	r27, r23
    189e:	58 f0       	brcs	.+22     	; 0x18b6 <updateNixieOutputState+0x86>
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <updateNixieOutputState+0x7c>
					turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
					return;
				}
			}else{	// For turn ON/OFF times that are on different days, the turn OFF time is larger than the turn ON time.
				// Check to see if the time is in the sleep window.
				if( aTimeToCompare >= nixiesleepstart || aTimeToCompare < nixiesleepend ) 
    18a2:	84 17       	cp	r24, r20
    18a4:	95 07       	cpc	r25, r21
    18a6:	a6 07       	cpc	r26, r22
    18a8:	b7 07       	cpc	r27, r23
    18aa:	40 f6       	brcc	.-112    	; 0x183c <updateNixieOutputState+0xc>
    18ac:	80 17       	cp	r24, r16
    18ae:	91 07       	cpc	r25, r17
    18b0:	a2 07       	cpc	r26, r18
    18b2:	b3 07       	cpc	r27, r19
    18b4:	18 f2       	brcs	.-122    	; 0x183c <updateNixieOutputState+0xc>
// Very important to use this function to turn ON or OFF the boost converter.  Read below to find out why.
// Send 1 to turn ON, send 0 ( or anything else ) to turn OFF
void turnOnOffBoostConverter( uint8_t state )
{
	if( state ){
		TCCR0A |= ( 1 << COM0A1 );	// Connect the output pin to the PWM controller.
    18b6:	84 b5       	in	r24, 0x24	; 36
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	84 bd       	out	0x24, r24	; 36
		}
		
	// Otherwise, the voltage is good, and the nixie sleep window is either not now or is inactive.
	turnOnOffBoostConverter( 1 );	// Turn on the boost converter.
	
}
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <updateAcFrequency>:



void updateAcFrequency( void )
{
	if( acFreqFlag )	// acFreqFlag is set in ISR( TIMER1_COMPA_vect ) and cleared here.
    18c2:	80 91 11 04 	lds	r24, 0x0411
    18c6:	88 23       	and	r24, r24
    18c8:	c1 f1       	breq	.+112    	; 0x193a <updateAcFrequency+0x78>
		// If acFreqFlag == 1, then acZeroCrossSnapshot contains the total number of AC waveform 
		// "zero crossings" in AC_FRQ_FILT_SEC seconds.  Here we just need to compute the average and
		// stuff the result into acFrequency.
		// Then, in out main app: The contents of acFrequency is the frequency of the AC line input.
		
		acFrequency = ( acZeroCrossSnapshot / ( AC_FRQ_FILT_SEC * 60.0 ) ) * 60.0;
    18ca:	60 91 16 04 	lds	r22, 0x0416
    18ce:	70 91 17 04 	lds	r23, 0x0417
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 c7 11 	call	0x238e	; 0x238e <__floatunsisf>
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	41 e6       	ldi	r20, 0x61	; 97
    18e0:	55 e4       	ldi	r21, 0x45	; 69
    18e2:	0e 94 33 11 	call	0x2266	; 0x2266 <__divsf3>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e7       	ldi	r20, 0x70	; 112
    18ec:	52 e4       	ldi	r21, 0x42	; 66
    18ee:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    18f2:	ab 01       	movw	r20, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	40 93 12 04 	sts	0x0412, r20
    18fa:	50 93 13 04 	sts	0x0413, r21
    18fe:	60 93 14 04 	sts	0x0414, r22
    1902:	70 93 15 04 	sts	0x0415, r23
		
		// Since a pin change interrupt counts rising and falling edges, there are twice as many events.
		acFrequency /= 2.0;
    1906:	60 91 12 04 	lds	r22, 0x0412
    190a:	70 91 13 04 	lds	r23, 0x0413
    190e:	80 91 14 04 	lds	r24, 0x0414
    1912:	90 91 15 04 	lds	r25, 0x0415
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1922:	ab 01       	movw	r20, r22
    1924:	bc 01       	movw	r22, r24
    1926:	40 93 12 04 	sts	0x0412, r20
    192a:	50 93 13 04 	sts	0x0413, r21
    192e:	60 93 14 04 	sts	0x0414, r22
    1932:	70 93 15 04 	sts	0x0415, r23
		
		acFreqFlag = 0;	// Reset the counter.
    1936:	10 92 11 04 	sts	0x0411, r1
    193a:	08 95       	ret

0000193c <shiftRegisterPulse>:


void shiftRegisterPulse( void )
{

	PORTD |= ( 1 << SRCLK );		// set the serial clock line high.
    193c:	5c 9a       	sbi	0x0b, 4	; 11
	//_delay_us( 1 );							// No delay
    PORTD &= ~( 1 << SRCLK );	// Set the serial Clock line low.
    193e:	5c 98       	cbi	0x0b, 4	; 11
    1940:	08 95       	ret

00001942 <shiftRegisterSetOutput>:


void shiftRegisterSetOutput( void )
{

	PORTD |= ( 1 << RCLK );		// set the store output line high.
    1942:	5d 9a       	sbi	0x0b, 5	; 11
	//_delay_us(1);							// No delay, might need a nop or 2.
    PORTD &= ~( 1 << RCLK );	// Set the store output line low.
    1944:	5d 98       	cbi	0x0b, 5	; 11
    1946:	08 95       	ret

00001948 <shiftByteOut>:




void shiftByteOut( uint8_t byteToShift )
{
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
	PORTD &= ~( 1 << RCLK );		// Hold low while transmitting.
    1950:	5d 98       	cbi	0x0b, 5	; 11
    1952:	c7 e0       	ldi	r28, 0x07	; 7
    1954:	d0 e0       	ldi	r29, 0x00	; 0
	
	for( uint8_t i = 0; i < 8; i++ ) 
	{
		// If the MSB is high.
		if ( byteToShift & _BV( 7 - i ) ){
    1956:	08 2f       	mov	r16, r24
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	c8 01       	movw	r24, r16
    195c:	0c 2e       	mov	r0, r28
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <shiftByteOut+0x1c>
    1960:	95 95       	asr	r25
    1962:	87 95       	ror	r24
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <shiftByteOut+0x18>
    1968:	80 ff       	sbrs	r24, 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <shiftByteOut+0x28>
		
            PORTD |= ( 1 << SER );	// set the output high
    196c:	5b 9a       	sbi	0x0b, 3	; 11
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <shiftByteOut+0x2a>
        
        } else {
        
            PORTD &= ~( 1 << SER );	// Set the output low.
    1970:	5b 98       	cbi	0x0b, 3	; 11
        
        }
        
        shiftRegisterPulse();
    1972:	0e 94 9e 0c 	call	0x193c	; 0x193c <shiftRegisterPulse>
    1976:	21 97       	sbiw	r28, 0x01	; 1
    1978:	80 f7       	brcc	.-32     	; 0x195a <shiftByteOut+0x12>
    }
    
    PORTD |= ( 1 << RCLK );	
    197a:	5d 9a       	sbi	0x0b, 5	; 11

}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <sendIntegerToNixie>:
  Decimal			N/A				0b00001000	// & this with the digit above to turn the decimal ON.

//~~~~~~~~~~~~~~~~~~~~~~*********** Nixie Digits to BCD to Byte ***********~~~~~~~~~~~~~~~~~~~~~~~~
*/

switch ( intToSend ){
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	81 f1       	breq	.+96     	; 0x19ea <sendIntegerToNixie+0x64>
    198a:	48 f4       	brcc	.+18     	; 0x199e <sendIntegerToNixie+0x18>
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	d9 f0       	breq	.+54     	; 0x19c6 <sendIntegerToNixie+0x40>
    1990:	a0 f0       	brcs	.+40     	; 0x19ba <sendIntegerToNixie+0x34>
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	f1 f0       	breq	.+60     	; 0x19d2 <sendIntegerToNixie+0x4c>
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	09 f0       	breq	.+2      	; 0x199c <sendIntegerToNixie+0x16>
    199a:	4c c0       	rjmp	.+152    	; 0x1a34 <sendIntegerToNixie+0xae>
    199c:	20 c0       	rjmp	.+64     	; 0x19de <sendIntegerToNixie+0x58>
    199e:	87 30       	cpi	r24, 0x07	; 7
    19a0:	b1 f1       	breq	.+108    	; 0x1a0e <sendIntegerToNixie+0x88>
    19a2:	30 f4       	brcc	.+12     	; 0x19b0 <sendIntegerToNixie+0x2a>
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	39 f1       	breq	.+78     	; 0x19f6 <sendIntegerToNixie+0x70>
    19a8:	86 30       	cpi	r24, 0x06	; 6
    19aa:	09 f0       	breq	.+2      	; 0x19ae <sendIntegerToNixie+0x28>
    19ac:	43 c0       	rjmp	.+134    	; 0x1a34 <sendIntegerToNixie+0xae>
    19ae:	29 c0       	rjmp	.+82     	; 0x1a02 <sendIntegerToNixie+0x7c>
    19b0:	88 30       	cpi	r24, 0x08	; 8
    19b2:	99 f1       	breq	.+102    	; 0x1a1a <sendIntegerToNixie+0x94>
    19b4:	89 30       	cpi	r24, 0x09	; 9
    19b6:	f1 f5       	brne	.+124    	; 0x1a34 <sendIntegerToNixie+0xae>
    19b8:	36 c0       	rjmp	.+108    	; 0x1a26 <sendIntegerToNixie+0xa0>
	
	case 0:
		if( doDecimal ){
    19ba:	66 23       	and	r22, r22
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <sendIntegerToNixie+0x3c>
			shiftByteOut( 0b00000000 | 0b00010000 );
    19be:	80 e1       	ldi	r24, 0x10	; 16
    19c0:	37 c0       	rjmp	.+110    	; 0x1a30 <sendIntegerToNixie+0xaa>
		}else{
			shiftByteOut( 0b00000000 );
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	35 c0       	rjmp	.+106    	; 0x1a30 <sendIntegerToNixie+0xaa>
		}
	break;
	
	
	case 1:
	if( doDecimal ){
    19c6:	66 23       	and	r22, r22
    19c8:	11 f0       	breq	.+4      	; 0x19ce <sendIntegerToNixie+0x48>
		shiftByteOut( 0b00000001 | 0b00010000 );
    19ca:	81 e1       	ldi	r24, 0x11	; 17
    19cc:	31 c0       	rjmp	.+98     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000001 );
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	2f c0       	rjmp	.+94     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	

	case 2:
	if( doDecimal ){
    19d2:	66 23       	and	r22, r22
    19d4:	11 f0       	breq	.+4      	; 0x19da <sendIntegerToNixie+0x54>
		shiftByteOut( 0b00000010 | 0b00010000 );
    19d6:	82 e1       	ldi	r24, 0x12	; 18
    19d8:	2b c0       	rjmp	.+86     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000010 );
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	29 c0       	rjmp	.+82     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 3:
	if( doDecimal ){
    19de:	66 23       	and	r22, r22
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <sendIntegerToNixie+0x60>
		shiftByteOut( 0b00000011 | 0b00010000 );
    19e2:	83 e1       	ldi	r24, 0x13	; 19
    19e4:	25 c0       	rjmp	.+74     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000011 );
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	23 c0       	rjmp	.+70     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 4:
	if( doDecimal ){
    19ea:	66 23       	and	r22, r22
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <sendIntegerToNixie+0x6c>
		shiftByteOut( 0b00000100 | 0b00010000 );
    19ee:	84 e1       	ldi	r24, 0x14	; 20
    19f0:	1f c0       	rjmp	.+62     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000100 );
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	1d c0       	rjmp	.+58     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 5:
	if( doDecimal ){
    19f6:	66 23       	and	r22, r22
    19f8:	11 f0       	breq	.+4      	; 0x19fe <sendIntegerToNixie+0x78>
		shiftByteOut( 0b00000101 | 0b00010000 );
    19fa:	85 e1       	ldi	r24, 0x15	; 21
    19fc:	19 c0       	rjmp	.+50     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000101 );
    19fe:	85 e0       	ldi	r24, 0x05	; 5
    1a00:	17 c0       	rjmp	.+46     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 6:
	if( doDecimal ){
    1a02:	66 23       	and	r22, r22
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <sendIntegerToNixie+0x84>
		shiftByteOut( 0b00000110 | 0b00010000 );
    1a06:	86 e1       	ldi	r24, 0x16	; 22
    1a08:	13 c0       	rjmp	.+38     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000110 );
    1a0a:	86 e0       	ldi	r24, 0x06	; 6
    1a0c:	11 c0       	rjmp	.+34     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 7:
	if( doDecimal ){
    1a0e:	66 23       	and	r22, r22
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <sendIntegerToNixie+0x90>
		shiftByteOut( 0b00000111 | 0b00010000 );
    1a12:	87 e1       	ldi	r24, 0x17	; 23
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000111 );
    1a16:	87 e0       	ldi	r24, 0x07	; 7
    1a18:	0b c0       	rjmp	.+22     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 8:
	if( doDecimal ){
    1a1a:	66 23       	and	r22, r22
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <sendIntegerToNixie+0x9c>
		shiftByteOut( 0b00001000 | 0b00010000 );
    1a1e:	88 e1       	ldi	r24, 0x18	; 24
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00001000 );
    1a22:	88 e0       	ldi	r24, 0x08	; 8
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 9:
	if( doDecimal ){
    1a26:	66 23       	and	r22, r22
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <sendIntegerToNixie+0xa8>
		shiftByteOut( 0b00001001 | 0b00010000 );
    1a2a:	89 e1       	ldi	r24, 0x19	; 25
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00001001 );
    1a2e:	89 e0       	ldi	r24, 0x09	; 9
    1a30:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <shiftByteOut>
    1a34:	08 95       	ret

00001a36 <antiCathodePoisonPattern>:




void antiCathodePoisonPattern( uint16_t delay )
{		
    1a36:	3f 92       	push	r3
    1a38:	4f 92       	push	r4
    1a3a:	5f 92       	push	r5
    1a3c:	6f 92       	push	r6
    1a3e:	7f 92       	push	r7
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1a58:	10 e0       	ldi	r17, 0x00	; 0
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
			_delay_ms( delay );
    1a5a:	6c 01       	movw	r12, r24
    1a5c:	e1 2c       	mov	r14, r1
    1a5e:	f1 2c       	mov	r15, r1
    1a60:	c9 e9       	ldi	r28, 0x99	; 153
    1a62:	d1 e0       	ldi	r29, 0x01	; 1
    1a64:	7b c0       	rjmp	.+246    	; 0x1b5c <antiCathodePoisonPattern+0x126>
void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	81 2f       	mov	r24, r17
    1a6a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	a8 1a       	sub	r10, r24
    1a72:	b1 08       	sbc	r11, r1

void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
			for( int j = 0; j < 6; j++ ){
    1a74:	c1 f7       	brne	.-16     	; 0x1a66 <antiCathodePoisonPattern+0x30>
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
    1a76:	0e 94 a1 0c 	call	0x1942	; 0x1942 <shiftRegisterSetOutput>
			_delay_ms( delay );
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	0e 94 c7 11 	call	0x238e	; 0x238e <__floatunsisf>
    1a82:	4b 01       	movw	r8, r22
    1a84:	5c 01       	movw	r10, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	55 e4       	ldi	r21, 0x45	; 69
    1a8e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1a92:	76 2e       	mov	r7, r22
    1a94:	67 2e       	mov	r6, r23
    1a96:	58 2e       	mov	r5, r24
    1a98:	49 2e       	mov	r4, r25
	if (__tmp < 1.0)
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	d3 01       	movw	r26, r6
    1aa4:	f2 01       	movw	r30, r4
    1aa6:	6b 2f       	mov	r22, r27
    1aa8:	7a 2f       	mov	r23, r26
    1aaa:	8f 2f       	mov	r24, r31
    1aac:	9e 2f       	mov	r25, r30
    1aae:	0e 94 2f 11 	call	0x225e	; 0x225e <__cmpsf2>
    1ab2:	87 fd       	sbrc	r24, 7
    1ab4:	2b c0       	rjmp	.+86     	; 0x1b0c <antiCathodePoisonPattern+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	d3 01       	movw	r26, r6
    1ac0:	f2 01       	movw	r30, r4
    1ac2:	6b 2f       	mov	r22, r27
    1ac4:	7a 2f       	mov	r23, r26
    1ac6:	8f 2f       	mov	r24, r31
    1ac8:	9e 2f       	mov	r25, r30
    1aca:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__gesf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	a4 f4       	brge	.+40     	; 0x1afa <antiCathodePoisonPattern+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1ae2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <antiCathodePoisonPattern+0xbc>
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <antiCathodePoisonPattern+0xb4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	61 50       	subi	r22, 0x01	; 1
    1af0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	61 15       	cp	r22, r1
    1af4:	71 05       	cpc	r23, r1
    1af6:	c1 f7       	brne	.-16     	; 0x1ae8 <antiCathodePoisonPattern+0xb2>
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <antiCathodePoisonPattern+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	a3 01       	movw	r20, r6
    1afc:	92 01       	movw	r18, r4
    1afe:	65 2f       	mov	r22, r21
    1b00:	74 2f       	mov	r23, r20
    1b02:	83 2f       	mov	r24, r19
    1b04:	92 2f       	mov	r25, r18
    1b06:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <antiCathodePoisonPattern+0xda>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	cb 01       	movw	r24, r22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <antiCathodePoisonPattern+0xdc>
    1b16:	1f 5f       	subi	r17, 0xFF	; 255


void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
    1b18:	1a 30       	cpi	r17, 0x0A	; 10
    1b1a:	01 f5       	brne	.+64     	; 0x1b5c <antiCathodePoisonPattern+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	a3 01       	movw	r20, r6
    1b1e:	92 01       	movw	r18, r4
    1b20:	65 2f       	mov	r22, r21
    1b22:	76 2d       	mov	r23, r6
    1b24:	83 2f       	mov	r24, r19
    1b26:	94 2d       	mov	r25, r4
    1b28:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1b2c:	8b 01       	movw	r16, r22
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	d3 01       	movw	r26, r6
    1b38:	f2 01       	movw	r30, r4
    1b3a:	6b 2f       	mov	r22, r27
    1b3c:	76 2d       	mov	r23, r6
    1b3e:	8f 2f       	mov	r24, r31
    1b40:	94 2d       	mov	r25, r4
    1b42:	0e 94 2f 11 	call	0x225e	; 0x225e <__cmpsf2>
    1b46:	87 ff       	sbrs	r24, 7
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <antiCathodePoisonPattern+0x11a>
    1b4a:	c1 e0       	ldi	r28, 0x01	; 1
    1b4c:	d0 e0       	ldi	r29, 0x00	; 0
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <antiCathodePoisonPattern+0x11c>
    1b50:	e8 01       	movw	r28, r16
    1b52:	38 e0       	ldi	r19, 0x08	; 8
    1b54:	33 2e       	mov	r3, r19
    1b56:	09 e9       	ldi	r16, 0x99	; 153
    1b58:	11 e0       	ldi	r17, 0x01	; 1
    1b5a:	43 c0       	rjmp	.+134    	; 0x1be2 <antiCathodePoisonPattern+0x1ac>




void antiCathodePoisonPattern( uint16_t delay )
{		
    1b5c:	26 e0       	ldi	r18, 0x06	; 6
    1b5e:	a2 2e       	mov	r10, r18
    1b60:	b1 2c       	mov	r11, r1
    1b62:	81 cf       	rjmp	.-254    	; 0x1a66 <antiCathodePoisonPattern+0x30>
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	83 2d       	mov	r24, r3
    1b68:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	e8 1a       	sub	r14, r24
    1b70:	f1 08       	sbc	r15, r1
			_delay_ms( delay );
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
			for( int j = 0; j < 6; j++ ){
    1b72:	c1 f7       	brne	.-16     	; 0x1b64 <antiCathodePoisonPattern+0x12e>
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
    1b74:	0e 94 a1 0c 	call	0x1942	; 0x1942 <shiftRegisterSetOutput>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	d3 01       	movw	r26, r6
    1b82:	f2 01       	movw	r30, r4
    1b84:	6b 2f       	mov	r22, r27
    1b86:	76 2d       	mov	r23, r6
    1b88:	8f 2f       	mov	r24, r31
    1b8a:	94 2d       	mov	r25, r4
    1b8c:	0e 94 2f 11 	call	0x225e	; 0x225e <__cmpsf2>
    1b90:	87 fd       	sbrc	r24, 7
    1b92:	22 c0       	rjmp	.+68     	; 0x1bd8 <antiCathodePoisonPattern+0x1a2>
		__ticks = 1;
	else if (__tmp > 65535)
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	d3 01       	movw	r26, r6
    1b9e:	f2 01       	movw	r30, r4
    1ba0:	6b 2f       	mov	r22, r27
    1ba2:	76 2d       	mov	r23, r6
    1ba4:	8f 2f       	mov	r24, r31
    1ba6:	94 2d       	mov	r25, r4
    1ba8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__gesf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	a4 f4       	brge	.+40     	; 0x1bd8 <antiCathodePoisonPattern+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	c5 01       	movw	r24, r10
    1bba:	b4 01       	movw	r22, r8
    1bbc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1bc0:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <antiCathodePoisonPattern+0x19a>
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <antiCathodePoisonPattern+0x192>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	61 50       	subi	r22, 0x01	; 1
    1bce:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	61 15       	cp	r22, r1
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <antiCathodePoisonPattern+0x190>
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <antiCathodePoisonPattern+0x1a8>
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <antiCathodePoisonPattern+0x1a4>
    1bde:	3a 94       	dec	r3
			shiftRegisterSetOutput();
			_delay_ms( delay );
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
    1be0:	21 f0       	breq	.+8      	; 0x1bea <antiCathodePoisonPattern+0x1b4>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1be2:	96 e0       	ldi	r25, 0x06	; 6
    1be4:	e9 2e       	mov	r14, r25
    1be6:	f1 2c       	mov	r15, r1
    1be8:	bd cf       	rjmp	.-134    	; 0x1b64 <antiCathodePoisonPattern+0x12e>
			}
			
			shiftRegisterSetOutput();
			_delay_ms( delay );
		}
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	bf 90       	pop	r11
    1bfc:	af 90       	pop	r10
    1bfe:	9f 90       	pop	r9
    1c00:	8f 90       	pop	r8
    1c02:	7f 90       	pop	r7
    1c04:	6f 90       	pop	r6
    1c06:	5f 90       	pop	r5
    1c08:	4f 90       	pop	r4
    1c0a:	3f 90       	pop	r3
    1c0c:	08 95       	ret

00001c0e <checkCathodePoison>:


void checkCathodePoison( void )
{
		// Anti-poison the cathodes every 30 minutes.
        if( minutes == 30 || minutes == 0){
    1c0e:	80 91 15 01 	lds	r24, 0x0115
    1c12:	8e 31       	cpi	r24, 0x1E	; 30
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <checkCathodePoison+0xc>
    1c16:	81 11       	cpse	r24, r1
    1c18:	3a c0       	rjmp	.+116    	; 0x1c8e <checkCathodePoison+0x80>
        	if( cathodePoisonFlag == 1 ){
    1c1a:	80 91 10 04 	lds	r24, 0x0410
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	b1 f5       	brne	.+108    	; 0x1c8e <checkCathodePoison+0x80>
        		antiCathodePoisonPattern( 250 );
    1c22:	8a ef       	ldi	r24, 0xFA	; 250
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 225 );
    1c2a:	81 ee       	ldi	r24, 0xE1	; 225
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 200 );
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 175 );
    1c3a:	8f ea       	ldi	r24, 0xAF	; 175
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 150 );
    1c42:	86 e9       	ldi	r24, 0x96	; 150
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 125 );
    1c4a:	8d e7       	ldi	r24, 0x7D	; 125
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 100 );
    1c52:	84 e6       	ldi	r24, 0x64	; 100
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 75 );
    1c5a:	8b e4       	ldi	r24, 0x4B	; 75
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 50 );
    1c62:	82 e3       	ldi	r24, 0x32	; 50
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 25 );
    1c6a:	89 e1       	ldi	r24, 0x19	; 25
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 10 );
    1c72:	8a e0       	ldi	r24, 0x0A	; 10
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 10 );
    1c7a:	8a e0       	ldi	r24, 0x0A	; 10
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 5 );
    1c82:	85 e0       	ldi	r24, 0x05	; 5
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <antiCathodePoisonPattern>
        		cathodePoisonFlag = 0;				// Reset the counter.
    1c8a:	10 92 10 04 	sts	0x0410, r1
    1c8e:	08 95       	ret

00001c90 <nixiePrintTemperature>:




void nixiePrintTemperature( void )
{
    1c90:	cf 92       	push	r12
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
	
	uint8_t isNegative = 0;		// 0 for positive temperatures, 1 for negative
	
	// Determine if the temperature is negative.
	// If so, we will set the leftmost nixie to "1".
	if( averageCelsiusTemperature >= 0 ){
    1c9e:	c0 90 02 01 	lds	r12, 0x0102
    1ca2:	d0 90 03 01 	lds	r13, 0x0103
    1ca6:	e0 90 04 01 	lds	r14, 0x0104
    1caa:	f0 90 05 01 	lds	r15, 0x0105
    1cae:	d1 e0       	ldi	r29, 0x01	; 1
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__gesf2>
    1cbe:	87 fd       	sbrc	r24, 7
    1cc0:	d0 e0       	ldi	r29, 0x00	; 0
    1cc2:	c1 e0       	ldi	r28, 0x01	; 1
    1cc4:	cd 27       	eor	r28, r29
	
	// Get the current temperature reading.
	double absValTemperature = averageCelsiusTemperature;
	
	// And if negative, convert to absolute value of the temperature reading.
	if( averageCelsiusTemperature < 0 )
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	a9 01       	movw	r20, r18
    1ccc:	c7 01       	movw	r24, r14
    1cce:	b6 01       	movw	r22, r12
    1cd0:	0e 94 2f 11 	call	0x225e	; 0x225e <__cmpsf2>
    1cd4:	87 ff       	sbrs	r24, 7
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <nixiePrintTemperature+0x50>
		absValTemperature *= -1; 
    1cd8:	f7 fa       	bst	r15, 7
    1cda:	f0 94       	com	r15
    1cdc:	f7 f8       	bld	r15, 7
    1cde:	f0 94       	com	r15
	
		
	// Convert to Fahrenheit if necessary. 
	if( celsius == 0 )	
    1ce0:	80 91 0e 01 	lds	r24, 0x010E
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	12 c0       	rjmp	.+36     	; 0x1d0c <nixiePrintTemperature+0x7c>
    {
    	absValTemperature = ( absValTemperature * 1.8 ) + 32;
    1ce8:	26 e6       	ldi	r18, 0x66	; 102
    1cea:	36 e6       	ldi	r19, 0x66	; 102
    1cec:	46 ee       	ldi	r20, 0xE6	; 230
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	b6 01       	movw	r22, r12
    1cf4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	52 e4       	ldi	r21, 0x42	; 66
    1d00:	0e 94 cb 10 	call	0x2196	; 0x2196 <__addsf3>
    1d04:	c6 2e       	mov	r12, r22
    1d06:	d7 2e       	mov	r13, r23
    1d08:	e8 2e       	mov	r14, r24
    1d0a:	f9 2e       	mov	r15, r25
    }
   
    
    // The temperature reading to the left of the decimal point. 
	uint8_t intPartTemperature = absValTemperature;	
    1d0c:	c7 01       	movw	r24, r14
    1d0e:	b6 01       	movw	r22, r12
    1d10:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1d14:	d6 2f       	mov	r29, r22
		
		
	// Temperature reading to the right of the decimal point.						
	uint8_t decimalPartTemperature = ( absValTemperature - intPartTemperature ) * 100;
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatsisf>
    1d20:	9b 01       	movw	r18, r22
    1d22:	ac 01       	movw	r20, r24
    1d24:	c7 01       	movw	r24, r14
    1d26:	b6 01       	movw	r22, r12
    1d28:	0e 94 ca 10 	call	0x2194	; 0x2194 <__subsf3>
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	48 ec       	ldi	r20, 0xC8	; 200
    1d32:	52 e4       	ldi	r21, 0x42	; 66
    1d34:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1d38:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1d3c:	86 2f       	mov	r24, r22
	uint8_t ones = 0;		// For outputting the digits to the nixies in order.
	uint8_t tens = 0;
	uint8_t hundreds = 0;
				
	// starting from the rightmost, decimal portion of the temperature.
	ones = decimalPartTemperature % 10;	// Grab the specific digits.
    1d3e:	1a e0       	ldi	r17, 0x0A	; 10
    1d40:	61 2f       	mov	r22, r17
    1d42:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1d46:	f8 2e       	mov	r15, r24
    1d48:	89 2f       	mov	r24, r25
	tens = decimalPartTemperature / 10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );		// Display the decimal point.
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	8f 2d       	mov	r24, r15
    1d54:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    1d58:	8d 2f       	mov	r24, r29
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1d60:	d8 2f       	mov	r29, r24
    1d62:	89 2f       	mov	r24, r25
    tens = intPartTemperature % 10;
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    tens = intPartTemperature % 10;
    1d6a:	8d 2f       	mov	r24, r29
    1d6c:	61 2f       	mov	r22, r17
    1d6e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1d72:	d8 2f       	mov	r29, r24
    1d74:	89 2f       	mov	r24, r25
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    tens = intPartTemperature % 10;
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
    1d7c:	8d 2f       	mov	r24, r29
    1d7e:	61 2f       	mov	r22, r17
    1d80:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1d84:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
	sendIntegerToNixie( hundreds, 0 );
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	sendIntegerToNixie( isNegative, 0 );	// Is the temperature negative?
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	8c 2f       	mov	r24, r28

}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
	sendIntegerToNixie( hundreds, 0 );
	
	sendIntegerToNixie( isNegative, 0 );	// Is the temperature negative?
    1d9e:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <sendIntegerToNixie>

00001da2 <nixiePrintTime>:




void nixiePrintTime( uint8_t doToggleDecimal )
{
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
	int myDecimal = 1;
	
	if( doToggleDecimal ){			// Toggle the nixie Decimal point.
    1da8:	88 23       	and	r24, r24
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <nixiePrintTime+0x16>
		if( seconds % 2 == 0 ){
    1dac:	80 91 10 01 	lds	r24, 0x0110
    1db0:	80 95       	com	r24
			myDecimal = 1;
		}
		else{
			myDecimal = 0;
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	c8 2f       	mov	r28, r24
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <nixiePrintTime+0x1a>
			}
		}else{
			myDecimal = 1;	// Else, they are steady ON.	
    1db8:	c1 e0       	ldi	r28, 0x01	; 1
    1dba:	d0 e0       	ldi	r29, 0x00	; 0
	// It can happen that nixiePrintTime() is called before updateDateTime() has had a change to roll over the seconds.
	// In which case seconds here can be >= 60.  This does not effect the determinism or accuracy of the clock.  
	// However, it may be disturbing to some people to see 60 seconds displayed on a clock when it should be 0::59.
	// We will adjust the 10's of seconds below, the one's of seconds will take care of themselves.
	 
	uint8_t tens = seconds;
    1dbc:	20 91 10 01 	lds	r18, 0x0110
	uint8_t ones = tens;
				
	tens /= 10;		// Get the "ten's" of seconds.
    1dc0:	82 2f       	mov	r24, r18
    1dc2:	6a e0       	ldi	r22, 0x0A	; 10
    1dc4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1dc8:	18 2f       	mov	r17, r24
	if( tens > 5 )
    1dca:	86 30       	cpi	r24, 0x06	; 6
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <nixiePrintTime+0x2e>
		tens = 0;	// Restrict the display to 0::59 seconds. ( Read above that this does not affect accuracy of timekeeping. )
    1dce:	10 e0       	ldi	r17, 0x00	; 0
	ones %= 10;		// Get the "one's" of seconds
    1dd0:	da e0       	ldi	r29, 0x0A	; 10
    1dd2:	82 2f       	mov	r24, r18
    1dd4:	6d 2f       	mov	r22, r29
    1dd6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1dda:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, myDecimal );
    1de2:	6c 2f       	mov	r22, r28
    1de4:	81 2f       	mov	r24, r17
    1de6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	
	// Minutes
	tens = minutes;
    1dea:	80 91 15 01 	lds	r24, 0x0115
	ones = tens;
	
	tens /= 10;		// Get the "ten's" of minutes.
	ones %= 10;		// Get the "one's" of minutes
    1dee:	6d 2f       	mov	r22, r29
    1df0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1df4:	d8 2f       	mov	r29, r24
    1df6:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, myDecimal );
    1dfe:	6c 2f       	mov	r22, r28
    1e00:	8d 2f       	mov	r24, r29
    1e02:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	
	// Hours
	uint8_t myHours = hours;
    1e06:	80 91 16 01 	lds	r24, 0x0116
	
	if( miltime == 0 && hours > 12 )
    1e0a:	90 91 0f 01 	lds	r25, 0x010F
    1e0e:	91 11       	cpse	r25, r1
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <nixiePrintTime+0x76>
    1e12:	8d 30       	cpi	r24, 0x0D	; 13
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <nixiePrintTime+0x76>
		myHours -= 12;
    1e16:	8c 50       	subi	r24, 0x0C	; 12
		
	tens = myHours;
	ones = tens;
	
	tens /= 10;		// Get the "ten's" of hours.
	ones %= 10;		// Get the "one's" of hours.
    1e18:	6a e0       	ldi	r22, 0x0A	; 10
    1e1a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1e1e:	c8 2f       	mov	r28, r24
    1e20:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 0 );
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	8c 2f       	mov	r24, r28

}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
	
	tens /= 10;		// Get the "ten's" of hours.
	ones %= 10;		// Get the "one's" of hours.
	
	sendIntegerToNixie( ones, 0 );
	sendIntegerToNixie( tens, 0 );
    1e32:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <sendIntegerToNixie>

00001e36 <nixiePrintDate>:




void nixiePrintDate( void )
{
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
	// Printing the date in YY.MM.DD format to the nixies
	
	// Print the day.
	uint8_t ones = day;
    1e3e:	80 91 14 01 	lds	r24, 0x0114
	uint8_t tens = ones;
				
	tens /= 10;		// Get the "ten's" of days.
	ones %= 10;		// Get the "one's" of days.
    1e42:	ca e0       	ldi	r28, 0x0A	; 10
    1e44:	6c 2f       	mov	r22, r28
    1e46:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1e4a:	d8 2f       	mov	r29, r24
    1e4c:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	8d 2f       	mov	r24, r29
    1e58:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	
	
	// Print the month.
	 ones = month;
    1e5c:	80 91 13 01 	lds	r24, 0x0113
	 tens = ones;
				
	tens /= 10;		// Get the "ten's" of months.
	ones %= 10;		// Get the "one's" of months.
    1e60:	6c 2f       	mov	r22, r28
    1e62:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmodqi4>
    1e66:	c8 2f       	mov	r28, r24
    1e68:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	8c 2f       	mov	r24, r28
    1e74:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>

	
	// Print the Year.
	uint16_t myYear = year;
    1e78:	80 91 11 01 	lds	r24, 0x0111
    1e7c:	90 91 12 01 	lds	r25, 0x0112
	
	ones = myYear % 10;   
    1e80:	ca e0       	ldi	r28, 0x0A	; 10
    1e82:	d0 e0       	ldi	r29, 0x00	; 0
    1e84:	be 01       	movw	r22, r28
    1e86:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
    1e8a:	8b 01       	movw	r16, r22
    myYear /= 10;
    tens = myYear % 10;
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
	// Print the Year.
	uint16_t myYear = year;
	
	ones = myYear % 10;   
    myYear /= 10;
    tens = myYear % 10;
    1e92:	c8 01       	movw	r24, r16
    1e94:	be 01       	movw	r22, r28
    1e96:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
	
}
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
	ones = myYear % 10;   
    myYear /= 10;
    tens = myYear % 10;
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    1ea4:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <sendIntegerToNixie>

00001ea8 <nixiePrintAcFrequency>:




void nixiePrintAcFrequency( void )
{
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
	uint32_t myFrequency = acFrequency * 1000;	// Shift everything over 3 decimal places.
    1ebc:	60 91 12 04 	lds	r22, 0x0412
    1ec0:	70 91 13 04 	lds	r23, 0x0413
    1ec4:	80 91 14 04 	lds	r24, 0x0414
    1ec8:	90 91 15 04 	lds	r25, 0x0415
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a e7       	ldi	r20, 0x7A	; 122
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1ed8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fixunssfsi>
    1edc:	b6 2e       	mov	r11, r22
    1ede:	a7 2e       	mov	r10, r23
    1ee0:	18 2f       	mov	r17, r24
    1ee2:	09 2f       	mov	r16, r25
	uint8_t intToSend = 0;						// The extracted digit to send to the nixie.
	
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
    1ee4:	c0 e0       	ldi	r28, 0x00	; 0
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
			myDecimal = 1;
		}else{
			myDecimal = 0;
		}
		
		intToSend = myFrequency % 10;				// Extract the rightmost digit.
    1ee8:	4a e0       	ldi	r20, 0x0A	; 10
    1eea:	c4 2e       	mov	r12, r20
    1eec:	d1 2c       	mov	r13, r1
    1eee:	e1 2c       	mov	r14, r1
    1ef0:	f1 2c       	mov	r15, r1
    1ef2:	6b 2d       	mov	r22, r11
    1ef4:	7a 2d       	mov	r23, r10
    1ef6:	81 2f       	mov	r24, r17
    1ef8:	90 2f       	mov	r25, r16
    1efa:	a7 01       	movw	r20, r14
    1efc:	96 01       	movw	r18, r12
    1efe:	0e 94 14 13 	call	0x2628	; 0x2628 <__udivmodsi4>
    1f02:	86 2f       	mov	r24, r22
		myFrequency /= 10;							// Shift right.
    1f04:	b2 2e       	mov	r11, r18
    1f06:	a3 2e       	mov	r10, r19
    1f08:	14 2f       	mov	r17, r20
    1f0a:	05 2f       	mov	r16, r21
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
	{
		uint8_t myDecimal = 0;
		
		if( i == 2 ){		// put a decimal point in the right spot.
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	c2 30       	cpi	r28, 0x02	; 2
    1f10:	d1 05       	cpc	r29, r1
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <nixiePrintAcFrequency+0x6e>
    1f14:	60 e0       	ldi	r22, 0x00	; 0
			myDecimal = 0;
		}
		
		intToSend = myFrequency % 10;				// Extract the rightmost digit.
		myFrequency /= 10;							// Shift right.
		sendIntegerToNixie( intToSend, myDecimal );	// And print it to the nixie tubes.
    1f16:	0e 94 c3 0c 	call	0x1986	; 0x1986 <sendIntegerToNixie>
{
	uint32_t myFrequency = acFrequency * 1000;	// Shift everything over 3 decimal places.
	uint8_t intToSend = 0;						// The extracted digit to send to the nixie.
	
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
    1f1a:	21 96       	adiw	r28, 0x01	; 1
    1f1c:	c5 30       	cpi	r28, 0x05	; 5
    1f1e:	d1 05       	cpc	r29, r1
    1f20:	41 f7       	brne	.-48     	; 0x1ef2 <nixiePrintAcFrequency+0x4a>
	
	case 0:
		if( doDecimal ){
			shiftByteOut( 0b00000000 | 0b00010000 );
		}else{
			shiftByteOut( 0b00000000 );
    1f22:	80 e0       	ldi	r24, 0x00	; 0
		sendIntegerToNixie( intToSend, myDecimal );	// And print it to the nixie tubes.
	}
	
	sendIntegerToNixie( 0, 0 );		//  Send an extra "0" to shift everything "right" one.

}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
	
	case 0:
		if( doDecimal ){
			shiftByteOut( 0b00000000 | 0b00010000 );
		}else{
			shiftByteOut( 0b00000000 );
    1f38:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <shiftByteOut>

00001f3c <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	8f 93       	push	r24
    1f4a:	9f 93       	push	r25
    1f4c:	ef 93       	push	r30
    1f4e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1f50:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    1f54:	90 91 c6 00 	lds	r25, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    1f58:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1f5a:	e0 91 3f 04 	lds	r30, 0x043F
    1f5e:	ef 5f       	subi	r30, 0xFF	; 255
    1f60:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1f62:	20 91 3e 04 	lds	r18, 0x043E
    1f66:	e2 17       	cp	r30, r18
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1f6a:	e0 93 3f 04 	sts	0x043F, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	ee 5b       	subi	r30, 0xBE	; 190
    1f72:	fb 4f       	sbci	r31, 0xFB	; 251
    1f74:	90 83       	st	Z, r25
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1f78:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    1f7a:	80 93 3d 04 	sts	0x043D, r24
}
    1f7e:	ff 91       	pop	r31
    1f80:	ef 91       	pop	r30
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1fa4:	90 91 41 04 	lds	r25, 0x0441
    1fa8:	80 91 40 04 	lds	r24, 0x0440
    1fac:	98 17       	cp	r25, r24
    1fae:	69 f0       	breq	.+26     	; 0x1fca <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1fb0:	e0 91 40 04 	lds	r30, 0x0440
    1fb4:	ef 5f       	subi	r30, 0xFF	; 255
    1fb6:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1fb8:	e0 93 40 04 	sts	0x0440, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	ee 59       	subi	r30, 0x9E	; 158
    1fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 93 c6 00 	sts	0x00C6, r24
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1fca:	80 91 c1 00 	lds	r24, 0x00C1
    1fce:	8f 7d       	andi	r24, 0xDF	; 223
    1fd0:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	0f 90       	pop	r0
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	0f 90       	pop	r0
    1fe2:	1f 90       	pop	r1
    1fe4:	18 95       	reti

00001fe6 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1fe6:	10 92 41 04 	sts	0x0441, r1
    UART_TxTail = 0;
    1fea:	10 92 40 04 	sts	0x0440, r1
    UART_RxHead = 0;
    1fee:	10 92 3f 04 	sts	0x043F, r1
    UART_RxTail = 0;
    1ff2:	10 92 3e 04 	sts	0x043E, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1ff6:	97 ff       	sbrs	r25, 7
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    1ffa:	22 e0       	ldi	r18, 0x02	; 2
    1ffc:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    2000:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    2002:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    2006:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    200a:	88 e9       	ldi	r24, 0x98	; 152
    200c:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    2010:	86 e0       	ldi	r24, 0x06	; 6
    2012:	80 93 c2 00 	sts	0x00C2, r24
    2016:	08 95       	ret

00002018 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    2018:	90 91 3f 04 	lds	r25, 0x043F
    201c:	80 91 3e 04 	lds	r24, 0x043E
    2020:	98 17       	cp	r25, r24
    2022:	89 f0       	breq	.+34     	; 0x2046 <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2024:	e0 91 3e 04 	lds	r30, 0x043E
    2028:	ef 5f       	subi	r30, 0xFF	; 255
    202a:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    202c:	e0 93 3e 04 	sts	0x043E, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	ee 5b       	subi	r30, 0xBE	; 190
    2034:	fb 4f       	sbci	r31, 0xFB	; 251
    2036:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
    2038:	90 91 3d 04 	lds	r25, 0x043D
    203c:	39 2f       	mov	r19, r25
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	28 0f       	add	r18, r24
    2042:	31 1d       	adc	r19, r1
    2044:	02 c0       	rjmp	.+4      	; 0x204a <uart_getc+0x32>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    204a:	c9 01       	movw	r24, r18
    204c:	08 95       	ret

0000204e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    204e:	90 91 41 04 	lds	r25, 0x0441
    2052:	9f 5f       	subi	r25, 0xFF	; 255
    2054:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    2056:	20 91 40 04 	lds	r18, 0x0440
    205a:	92 17       	cp	r25, r18
    205c:	e1 f3       	breq	.-8      	; 0x2056 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    205e:	e9 2f       	mov	r30, r25
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	ee 59       	subi	r30, 0x9E	; 158
    2064:	fb 4f       	sbci	r31, 0xFB	; 251
    2066:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    2068:	90 93 41 04 	sts	0x0441, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    206c:	80 91 c1 00 	lds	r24, 0x00C1
    2070:	80 62       	ori	r24, 0x20	; 32
    2072:	80 93 c1 00 	sts	0x00C1, r24
    2076:	08 95       	ret

00002078 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	ec 01       	movw	r28, r24
    while (*s) 
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <uart_puts+0xc>
      uart_putc(*s++);
    2080:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    2084:	89 91       	ld	r24, Y+
    2086:	81 11       	cpse	r24, r1
    2088:	fb cf       	rjmp	.-10     	; 0x2080 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	08 95       	ret

00002090 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2096:	02 c0       	rjmp	.+4      	; 0x209c <uart_puts_p+0xc>
      uart_putc(c);
    2098:	0e 94 27 10 	call	0x204e	; 0x204e <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    209c:	fe 01       	movw	r30, r28
    209e:	21 96       	adiw	r28, 0x01	; 1
    20a0:	84 91       	lpm	r24, Z
    20a2:	81 11       	cpse	r24, r1
    20a4:	f9 cf       	rjmp	.-14     	; 0x2098 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <main>:

//~~~~~~~~~~~~~~~~~~~~~~~~~******************** MAIN ********************~~~~~~~~~~~~~~~~~~~~~~~~~~

int main(void)
{
    cli();
    20ac:	f8 94       	cli
    ioInit();
    20ae:	0e 94 9a 01 	call	0x334	; 0x334 <ioInit>
    adcInit();
    20b2:	0e 94 be 01 	call	0x37c	; 0x37c <adcInit>
    boostConverterInit();
    20b6:	0e 94 ca 01 	call	0x394	; 0x394 <boostConverterInit>
    rtcInit();
    20ba:	0e 94 ae 01 	call	0x35c	; 0x35c <rtcInit>
    uartInit();
    20be:	0e 94 f6 02 	call	0x5ec	; 0x5ec <uartInit>
    extInterruptInit();
    20c2:	0e 94 a8 01 	call	0x350	; 0x350 <extInterruptInit>
    readEepromToVars();  
    20c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <readEepromToVars>
    sei();
    20ca:	78 94       	sei
    
    uartWelcome();
    20cc:	0e 94 be 02 	call	0x57c	; 0x57c <uartWelcome>
    20d0:	c9 e9       	ldi	r28, 0x99	; 153
    20d2:	d1 e0       	ldi	r29, 0x01	; 1


    while( 1 )
    {
    	
    	updateAcFrequency();			// Every AC_FRQ_FILT_SEC seconds, compute the average.
    20d4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <updateAcFrequency>
    	updateTemperatureFilter( 20 );	// FIR averaging filter for the DS18b20.
    20d8:	84 e1       	ldi	r24, 0x14	; 20
    20da:	0e 94 43 04 	call	0x886	; 0x886 <updateTemperatureFilter>
        updateNixieOutputState();		// Turns ON or OFF the nixie tubes based on input power and sleep window.
    20de:	0e 94 18 0c 	call	0x1830	; 0x1830 <updateNixieOutputState>
      	checkSerialIn();				// Is there new serial data available?
    20e2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <checkSerialIn>
		updateDateTime();				// Keep track of the current date and time.
    20e6:	0e 94 85 03 	call	0x70a	; 0x70a <updateDateTime>
      
        // If the time has changed, update the display.
        if( seconds != prevSeconds)
    20ea:	90 91 10 01 	lds	r25, 0x0110
    20ee:	80 91 2b 04 	lds	r24, 0x042B
    20f2:	98 17       	cp	r25, r24
    20f4:	39 f0       	breq	.+14     	; 0x2104 <main+0x58>
        {
            nixiePrintTime( 1 );	// Display the current time on the nixie tubes and toggle the decimal.   
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <nixiePrintTime>
            prevSeconds = seconds;
    20fc:	80 91 10 01 	lds	r24, 0x0110
    2100:	80 93 2b 04 	sts	0x042B, r24
            //uart_puts(RETURN_NEWLINE);

        }


        if( minutes != prevMinutes)
    2104:	90 91 15 01 	lds	r25, 0x0115
    2108:	80 91 2a 04 	lds	r24, 0x042A
    210c:	98 17       	cp	r25, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <main+0x66>
    2110:	3e c0       	rjmp	.+124    	; 0x218e <main+0xe2>
        {
        	cathodePoisonFlag = 1;		// Set every minute.  Cleared in checkCathodePoison(). 
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 10 04 	sts	0x0410, r24
            
            serialPrintDateTime();
    2118:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <serialPrintDateTime>
            serialPrintTemperature();
    211c:	0e 94 a7 04 	call	0x94e	; 0x94e <serialPrintTemperature>
            serialPrintAcFrequency();
    2120:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <serialPrintAcFrequency>
            uart_puts(RETURN_NEWLINE);
    2124:	89 e2       	ldi	r24, 0x29	; 41
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	0e 94 3c 10 	call	0x2078	; 0x2078 <uart_puts>

            
            // On the nixie.
            if( showdate ){
    212c:	80 91 27 04 	lds	r24, 0x0427
    2130:	81 11       	cpse	r24, r1
    2132:	05 c0       	rjmp	.+10     	; 0x213e <main+0x92>
            	nixiePrintDate();
            	_delay_ms( 5000 );
            }
            
            // On the nixie.
           	if( showtherm ){
    2134:	80 91 29 04 	lds	r24, 0x0429
    2138:	88 23       	and	r24, r24
    213a:	59 f0       	breq	.+22     	; 0x2152 <main+0xa6>
    213c:	0f c0       	rjmp	.+30     	; 0x215c <main+0xb0>
            uart_puts(RETURN_NEWLINE);

            
            // On the nixie.
            if( showdate ){
            	nixiePrintDate();
    213e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <nixiePrintDate>
    2142:	80 e5       	ldi	r24, 0x50	; 80
    2144:	93 ec       	ldi	r25, 0xC3	; 195
    2146:	fe 01       	movw	r30, r28
    2148:	31 97       	sbiw	r30, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <main+0x9c>
    214c:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	d9 f7       	brne	.-10     	; 0x2146 <main+0x9a>
    2150:	f1 cf       	rjmp	.-30     	; 0x2134 <main+0x88>
           		nixiePrintTemperature();
           		_delay_ms( 5000 );
           	}
           	
           	// On the nixie.
           	if( showfreq ){
    2152:	80 91 28 04 	lds	r24, 0x0428
    2156:	88 23       	and	r24, r24
    2158:	59 f0       	breq	.+22     	; 0x2170 <main+0xc4>
    215a:	0f c0       	rjmp	.+30     	; 0x217a <main+0xce>
            	_delay_ms( 5000 );
            }
            
            // On the nixie.
           	if( showtherm ){
           		nixiePrintTemperature();
    215c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <nixiePrintTemperature>
    2160:	80 e5       	ldi	r24, 0x50	; 80
    2162:	93 ec       	ldi	r25, 0xC3	; 195
    2164:	fe 01       	movw	r30, r28
    2166:	31 97       	sbiw	r30, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <main+0xba>
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	d9 f7       	brne	.-10     	; 0x2164 <main+0xb8>
    216e:	f1 cf       	rjmp	.-30     	; 0x2152 <main+0xa6>
           	if( showfreq ){
           		nixiePrintAcFrequency();
           		_delay_ms( 5000 );
           	}
           
            prevMinutes = minutes;   
    2170:	80 91 15 01 	lds	r24, 0x0115
    2174:	80 93 2a 04 	sts	0x042A, r24
    2178:	0a c0       	rjmp	.+20     	; 0x218e <main+0xe2>
           		_delay_ms( 5000 );
           	}
           	
           	// On the nixie.
           	if( showfreq ){
           		nixiePrintAcFrequency();
    217a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <nixiePrintAcFrequency>
    217e:	80 e5       	ldi	r24, 0x50	; 80
    2180:	93 ec       	ldi	r25, 0xC3	; 195
    2182:	fe 01       	movw	r30, r28
    2184:	31 97       	sbiw	r30, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <main+0xd8>
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	d9 f7       	brne	.-10     	; 0x2182 <main+0xd6>
    218c:	f1 cf       	rjmp	.-30     	; 0x2170 <main+0xc4>
           	}
           
            prevMinutes = minutes;   
        }
        
        checkCathodePoison();			// do the antipoison routine if ready.
    218e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <checkCathodePoison>
        
    }
    2192:	a0 cf       	rjmp	.-192    	; 0x20d4 <main+0x28>

00002194 <__subsf3>:
    2194:	50 58       	subi	r21, 0x80	; 128

00002196 <__addsf3>:
    2196:	bb 27       	eor	r27, r27
    2198:	aa 27       	eor	r26, r26
    219a:	0e d0       	rcall	.+28     	; 0x21b8 <__addsf3x>
    219c:	70 c1       	rjmp	.+736    	; 0x247e <__fp_round>
    219e:	61 d1       	rcall	.+706    	; 0x2462 <__fp_pscA>
    21a0:	30 f0       	brcs	.+12     	; 0x21ae <__addsf3+0x18>
    21a2:	66 d1       	rcall	.+716    	; 0x2470 <__fp_pscB>
    21a4:	20 f0       	brcs	.+8      	; 0x21ae <__addsf3+0x18>
    21a6:	31 f4       	brne	.+12     	; 0x21b4 <__addsf3+0x1e>
    21a8:	9f 3f       	cpi	r25, 0xFF	; 255
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <__addsf3+0x1a>
    21ac:	1e f4       	brtc	.+6      	; 0x21b4 <__addsf3+0x1e>
    21ae:	56 c1       	rjmp	.+684    	; 0x245c <__fp_nan>
    21b0:	0e f4       	brtc	.+2      	; 0x21b4 <__addsf3+0x1e>
    21b2:	e0 95       	com	r30
    21b4:	e7 fb       	bst	r30, 7
    21b6:	4c c1       	rjmp	.+664    	; 0x2450 <__fp_inf>

000021b8 <__addsf3x>:
    21b8:	e9 2f       	mov	r30, r25
    21ba:	72 d1       	rcall	.+740    	; 0x24a0 <__fp_split3>
    21bc:	80 f3       	brcs	.-32     	; 0x219e <__addsf3+0x8>
    21be:	ba 17       	cp	r27, r26
    21c0:	62 07       	cpc	r22, r18
    21c2:	73 07       	cpc	r23, r19
    21c4:	84 07       	cpc	r24, r20
    21c6:	95 07       	cpc	r25, r21
    21c8:	18 f0       	brcs	.+6      	; 0x21d0 <__addsf3x+0x18>
    21ca:	71 f4       	brne	.+28     	; 0x21e8 <__addsf3x+0x30>
    21cc:	9e f5       	brtc	.+102    	; 0x2234 <__addsf3x+0x7c>
    21ce:	8a c1       	rjmp	.+788    	; 0x24e4 <__fp_zero>
    21d0:	0e f4       	brtc	.+2      	; 0x21d4 <__addsf3x+0x1c>
    21d2:	e0 95       	com	r30
    21d4:	0b 2e       	mov	r0, r27
    21d6:	ba 2f       	mov	r27, r26
    21d8:	a0 2d       	mov	r26, r0
    21da:	0b 01       	movw	r0, r22
    21dc:	b9 01       	movw	r22, r18
    21de:	90 01       	movw	r18, r0
    21e0:	0c 01       	movw	r0, r24
    21e2:	ca 01       	movw	r24, r20
    21e4:	a0 01       	movw	r20, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	ff 27       	eor	r31, r31
    21ea:	59 1b       	sub	r21, r25
    21ec:	99 f0       	breq	.+38     	; 0x2214 <__addsf3x+0x5c>
    21ee:	59 3f       	cpi	r21, 0xF9	; 249
    21f0:	50 f4       	brcc	.+20     	; 0x2206 <__addsf3x+0x4e>
    21f2:	50 3e       	cpi	r21, 0xE0	; 224
    21f4:	68 f1       	brcs	.+90     	; 0x2250 <__addsf3x+0x98>
    21f6:	1a 16       	cp	r1, r26
    21f8:	f0 40       	sbci	r31, 0x00	; 0
    21fa:	a2 2f       	mov	r26, r18
    21fc:	23 2f       	mov	r18, r19
    21fe:	34 2f       	mov	r19, r20
    2200:	44 27       	eor	r20, r20
    2202:	58 5f       	subi	r21, 0xF8	; 248
    2204:	f3 cf       	rjmp	.-26     	; 0x21ec <__addsf3x+0x34>
    2206:	46 95       	lsr	r20
    2208:	37 95       	ror	r19
    220a:	27 95       	ror	r18
    220c:	a7 95       	ror	r26
    220e:	f0 40       	sbci	r31, 0x00	; 0
    2210:	53 95       	inc	r21
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__addsf3x+0x4e>
    2214:	7e f4       	brtc	.+30     	; 0x2234 <__addsf3x+0x7c>
    2216:	1f 16       	cp	r1, r31
    2218:	ba 0b       	sbc	r27, r26
    221a:	62 0b       	sbc	r22, r18
    221c:	73 0b       	sbc	r23, r19
    221e:	84 0b       	sbc	r24, r20
    2220:	ba f0       	brmi	.+46     	; 0x2250 <__addsf3x+0x98>
    2222:	91 50       	subi	r25, 0x01	; 1
    2224:	a1 f0       	breq	.+40     	; 0x224e <__addsf3x+0x96>
    2226:	ff 0f       	add	r31, r31
    2228:	bb 1f       	adc	r27, r27
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	c2 f7       	brpl	.-16     	; 0x2222 <__addsf3x+0x6a>
    2232:	0e c0       	rjmp	.+28     	; 0x2250 <__addsf3x+0x98>
    2234:	ba 0f       	add	r27, r26
    2236:	62 1f       	adc	r22, r18
    2238:	73 1f       	adc	r23, r19
    223a:	84 1f       	adc	r24, r20
    223c:	48 f4       	brcc	.+18     	; 0x2250 <__addsf3x+0x98>
    223e:	87 95       	ror	r24
    2240:	77 95       	ror	r23
    2242:	67 95       	ror	r22
    2244:	b7 95       	ror	r27
    2246:	f7 95       	ror	r31
    2248:	9e 3f       	cpi	r25, 0xFE	; 254
    224a:	08 f0       	brcs	.+2      	; 0x224e <__addsf3x+0x96>
    224c:	b3 cf       	rjmp	.-154    	; 0x21b4 <__addsf3+0x1e>
    224e:	93 95       	inc	r25
    2250:	88 0f       	add	r24, r24
    2252:	08 f0       	brcs	.+2      	; 0x2256 <__addsf3x+0x9e>
    2254:	99 27       	eor	r25, r25
    2256:	ee 0f       	add	r30, r30
    2258:	97 95       	ror	r25
    225a:	87 95       	ror	r24
    225c:	08 95       	ret

0000225e <__cmpsf2>:
    225e:	d4 d0       	rcall	.+424    	; 0x2408 <__fp_cmp>
    2260:	08 f4       	brcc	.+2      	; 0x2264 <__cmpsf2+0x6>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	08 95       	ret

00002266 <__divsf3>:
    2266:	0c d0       	rcall	.+24     	; 0x2280 <__divsf3x>
    2268:	0a c1       	rjmp	.+532    	; 0x247e <__fp_round>
    226a:	02 d1       	rcall	.+516    	; 0x2470 <__fp_pscB>
    226c:	40 f0       	brcs	.+16     	; 0x227e <__divsf3+0x18>
    226e:	f9 d0       	rcall	.+498    	; 0x2462 <__fp_pscA>
    2270:	30 f0       	brcs	.+12     	; 0x227e <__divsf3+0x18>
    2272:	21 f4       	brne	.+8      	; 0x227c <__divsf3+0x16>
    2274:	5f 3f       	cpi	r21, 0xFF	; 255
    2276:	19 f0       	breq	.+6      	; 0x227e <__divsf3+0x18>
    2278:	eb c0       	rjmp	.+470    	; 0x2450 <__fp_inf>
    227a:	51 11       	cpse	r21, r1
    227c:	34 c1       	rjmp	.+616    	; 0x24e6 <__fp_szero>
    227e:	ee c0       	rjmp	.+476    	; 0x245c <__fp_nan>

00002280 <__divsf3x>:
    2280:	0f d1       	rcall	.+542    	; 0x24a0 <__fp_split3>
    2282:	98 f3       	brcs	.-26     	; 0x226a <__divsf3+0x4>

00002284 <__divsf3_pse>:
    2284:	99 23       	and	r25, r25
    2286:	c9 f3       	breq	.-14     	; 0x227a <__divsf3+0x14>
    2288:	55 23       	and	r21, r21
    228a:	b1 f3       	breq	.-20     	; 0x2278 <__divsf3+0x12>
    228c:	95 1b       	sub	r25, r21
    228e:	55 0b       	sbc	r21, r21
    2290:	bb 27       	eor	r27, r27
    2292:	aa 27       	eor	r26, r26
    2294:	62 17       	cp	r22, r18
    2296:	73 07       	cpc	r23, r19
    2298:	84 07       	cpc	r24, r20
    229a:	38 f0       	brcs	.+14     	; 0x22aa <__divsf3_pse+0x26>
    229c:	9f 5f       	subi	r25, 0xFF	; 255
    229e:	5f 4f       	sbci	r21, 0xFF	; 255
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	44 1f       	adc	r20, r20
    22a6:	aa 1f       	adc	r26, r26
    22a8:	a9 f3       	breq	.-22     	; 0x2294 <__divsf3_pse+0x10>
    22aa:	33 d0       	rcall	.+102    	; 0x2312 <__divsf3_pse+0x8e>
    22ac:	0e 2e       	mov	r0, r30
    22ae:	3a f0       	brmi	.+14     	; 0x22be <__divsf3_pse+0x3a>
    22b0:	e0 e8       	ldi	r30, 0x80	; 128
    22b2:	30 d0       	rcall	.+96     	; 0x2314 <__divsf3_pse+0x90>
    22b4:	91 50       	subi	r25, 0x01	; 1
    22b6:	50 40       	sbci	r21, 0x00	; 0
    22b8:	e6 95       	lsr	r30
    22ba:	00 1c       	adc	r0, r0
    22bc:	ca f7       	brpl	.-14     	; 0x22b0 <__divsf3_pse+0x2c>
    22be:	29 d0       	rcall	.+82     	; 0x2312 <__divsf3_pse+0x8e>
    22c0:	fe 2f       	mov	r31, r30
    22c2:	27 d0       	rcall	.+78     	; 0x2312 <__divsf3_pse+0x8e>
    22c4:	66 0f       	add	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	88 1f       	adc	r24, r24
    22ca:	bb 1f       	adc	r27, r27
    22cc:	26 17       	cp	r18, r22
    22ce:	37 07       	cpc	r19, r23
    22d0:	48 07       	cpc	r20, r24
    22d2:	ab 07       	cpc	r26, r27
    22d4:	b0 e8       	ldi	r27, 0x80	; 128
    22d6:	09 f0       	breq	.+2      	; 0x22da <__divsf3_pse+0x56>
    22d8:	bb 0b       	sbc	r27, r27
    22da:	80 2d       	mov	r24, r0
    22dc:	bf 01       	movw	r22, r30
    22de:	ff 27       	eor	r31, r31
    22e0:	93 58       	subi	r25, 0x83	; 131
    22e2:	5f 4f       	sbci	r21, 0xFF	; 255
    22e4:	2a f0       	brmi	.+10     	; 0x22f0 <__divsf3_pse+0x6c>
    22e6:	9e 3f       	cpi	r25, 0xFE	; 254
    22e8:	51 05       	cpc	r21, r1
    22ea:	68 f0       	brcs	.+26     	; 0x2306 <__divsf3_pse+0x82>
    22ec:	b1 c0       	rjmp	.+354    	; 0x2450 <__fp_inf>
    22ee:	fb c0       	rjmp	.+502    	; 0x24e6 <__fp_szero>
    22f0:	5f 3f       	cpi	r21, 0xFF	; 255
    22f2:	ec f3       	brlt	.-6      	; 0x22ee <__divsf3_pse+0x6a>
    22f4:	98 3e       	cpi	r25, 0xE8	; 232
    22f6:	dc f3       	brlt	.-10     	; 0x22ee <__divsf3_pse+0x6a>
    22f8:	86 95       	lsr	r24
    22fa:	77 95       	ror	r23
    22fc:	67 95       	ror	r22
    22fe:	b7 95       	ror	r27
    2300:	f7 95       	ror	r31
    2302:	9f 5f       	subi	r25, 0xFF	; 255
    2304:	c9 f7       	brne	.-14     	; 0x22f8 <__divsf3_pse+0x74>
    2306:	88 0f       	add	r24, r24
    2308:	91 1d       	adc	r25, r1
    230a:	96 95       	lsr	r25
    230c:	87 95       	ror	r24
    230e:	97 f9       	bld	r25, 7
    2310:	08 95       	ret
    2312:	e1 e0       	ldi	r30, 0x01	; 1
    2314:	66 0f       	add	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	88 1f       	adc	r24, r24
    231a:	bb 1f       	adc	r27, r27
    231c:	62 17       	cp	r22, r18
    231e:	73 07       	cpc	r23, r19
    2320:	84 07       	cpc	r24, r20
    2322:	ba 07       	cpc	r27, r26
    2324:	20 f0       	brcs	.+8      	; 0x232e <__divsf3_pse+0xaa>
    2326:	62 1b       	sub	r22, r18
    2328:	73 0b       	sbc	r23, r19
    232a:	84 0b       	sbc	r24, r20
    232c:	ba 0b       	sbc	r27, r26
    232e:	ee 1f       	adc	r30, r30
    2330:	88 f7       	brcc	.-30     	; 0x2314 <__divsf3_pse+0x90>
    2332:	e0 95       	com	r30
    2334:	08 95       	ret

00002336 <__fixunssfsi>:
    2336:	bc d0       	rcall	.+376    	; 0x24b0 <__fp_splitA>
    2338:	88 f0       	brcs	.+34     	; 0x235c <__fixunssfsi+0x26>
    233a:	9f 57       	subi	r25, 0x7F	; 127
    233c:	90 f0       	brcs	.+36     	; 0x2362 <__fixunssfsi+0x2c>
    233e:	b9 2f       	mov	r27, r25
    2340:	99 27       	eor	r25, r25
    2342:	b7 51       	subi	r27, 0x17	; 23
    2344:	a0 f0       	brcs	.+40     	; 0x236e <__fixunssfsi+0x38>
    2346:	d1 f0       	breq	.+52     	; 0x237c <__fixunssfsi+0x46>
    2348:	66 0f       	add	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	88 1f       	adc	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	1a f0       	brmi	.+6      	; 0x2358 <__fixunssfsi+0x22>
    2352:	ba 95       	dec	r27
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__fixunssfsi+0x12>
    2356:	12 c0       	rjmp	.+36     	; 0x237c <__fixunssfsi+0x46>
    2358:	b1 30       	cpi	r27, 0x01	; 1
    235a:	81 f0       	breq	.+32     	; 0x237c <__fixunssfsi+0x46>
    235c:	c3 d0       	rcall	.+390    	; 0x24e4 <__fp_zero>
    235e:	b1 e0       	ldi	r27, 0x01	; 1
    2360:	08 95       	ret
    2362:	c0 c0       	rjmp	.+384    	; 0x24e4 <__fp_zero>
    2364:	67 2f       	mov	r22, r23
    2366:	78 2f       	mov	r23, r24
    2368:	88 27       	eor	r24, r24
    236a:	b8 5f       	subi	r27, 0xF8	; 248
    236c:	39 f0       	breq	.+14     	; 0x237c <__fixunssfsi+0x46>
    236e:	b9 3f       	cpi	r27, 0xF9	; 249
    2370:	cc f3       	brlt	.-14     	; 0x2364 <__fixunssfsi+0x2e>
    2372:	86 95       	lsr	r24
    2374:	77 95       	ror	r23
    2376:	67 95       	ror	r22
    2378:	b3 95       	inc	r27
    237a:	d9 f7       	brne	.-10     	; 0x2372 <__fixunssfsi+0x3c>
    237c:	3e f4       	brtc	.+14     	; 0x238c <__fixunssfsi+0x56>
    237e:	90 95       	com	r25
    2380:	80 95       	com	r24
    2382:	70 95       	com	r23
    2384:	61 95       	neg	r22
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	08 95       	ret

0000238e <__floatunsisf>:
    238e:	e8 94       	clt
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <__floatsisf+0x12>

00002392 <__floatsisf>:
    2392:	97 fb       	bst	r25, 7
    2394:	3e f4       	brtc	.+14     	; 0x23a4 <__floatsisf+0x12>
    2396:	90 95       	com	r25
    2398:	80 95       	com	r24
    239a:	70 95       	com	r23
    239c:	61 95       	neg	r22
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	8f 4f       	sbci	r24, 0xFF	; 255
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	99 23       	and	r25, r25
    23a6:	a9 f0       	breq	.+42     	; 0x23d2 <__floatsisf+0x40>
    23a8:	f9 2f       	mov	r31, r25
    23aa:	96 e9       	ldi	r25, 0x96	; 150
    23ac:	bb 27       	eor	r27, r27
    23ae:	93 95       	inc	r25
    23b0:	f6 95       	lsr	r31
    23b2:	87 95       	ror	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b7 95       	ror	r27
    23ba:	f1 11       	cpse	r31, r1
    23bc:	f8 cf       	rjmp	.-16     	; 0x23ae <__floatsisf+0x1c>
    23be:	fa f4       	brpl	.+62     	; 0x23fe <__floatsisf+0x6c>
    23c0:	bb 0f       	add	r27, r27
    23c2:	11 f4       	brne	.+4      	; 0x23c8 <__floatsisf+0x36>
    23c4:	60 ff       	sbrs	r22, 0
    23c6:	1b c0       	rjmp	.+54     	; 0x23fe <__floatsisf+0x6c>
    23c8:	6f 5f       	subi	r22, 0xFF	; 255
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	8f 4f       	sbci	r24, 0xFF	; 255
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	16 c0       	rjmp	.+44     	; 0x23fe <__floatsisf+0x6c>
    23d2:	88 23       	and	r24, r24
    23d4:	11 f0       	breq	.+4      	; 0x23da <__floatsisf+0x48>
    23d6:	96 e9       	ldi	r25, 0x96	; 150
    23d8:	11 c0       	rjmp	.+34     	; 0x23fc <__floatsisf+0x6a>
    23da:	77 23       	and	r23, r23
    23dc:	21 f0       	breq	.+8      	; 0x23e6 <__floatsisf+0x54>
    23de:	9e e8       	ldi	r25, 0x8E	; 142
    23e0:	87 2f       	mov	r24, r23
    23e2:	76 2f       	mov	r23, r22
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <__floatsisf+0x5e>
    23e6:	66 23       	and	r22, r22
    23e8:	71 f0       	breq	.+28     	; 0x2406 <__floatsisf+0x74>
    23ea:	96 e8       	ldi	r25, 0x86	; 134
    23ec:	86 2f       	mov	r24, r22
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	2a f0       	brmi	.+10     	; 0x23fe <__floatsisf+0x6c>
    23f4:	9a 95       	dec	r25
    23f6:	66 0f       	add	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	da f7       	brpl	.-10     	; 0x23f4 <__floatsisf+0x62>
    23fe:	88 0f       	add	r24, r24
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	97 f9       	bld	r25, 7
    2406:	08 95       	ret

00002408 <__fp_cmp>:
    2408:	99 0f       	add	r25, r25
    240a:	00 08       	sbc	r0, r0
    240c:	55 0f       	add	r21, r21
    240e:	aa 0b       	sbc	r26, r26
    2410:	e0 e8       	ldi	r30, 0x80	; 128
    2412:	fe ef       	ldi	r31, 0xFE	; 254
    2414:	16 16       	cp	r1, r22
    2416:	17 06       	cpc	r1, r23
    2418:	e8 07       	cpc	r30, r24
    241a:	f9 07       	cpc	r31, r25
    241c:	c0 f0       	brcs	.+48     	; 0x244e <__fp_cmp+0x46>
    241e:	12 16       	cp	r1, r18
    2420:	13 06       	cpc	r1, r19
    2422:	e4 07       	cpc	r30, r20
    2424:	f5 07       	cpc	r31, r21
    2426:	98 f0       	brcs	.+38     	; 0x244e <__fp_cmp+0x46>
    2428:	62 1b       	sub	r22, r18
    242a:	73 0b       	sbc	r23, r19
    242c:	84 0b       	sbc	r24, r20
    242e:	95 0b       	sbc	r25, r21
    2430:	39 f4       	brne	.+14     	; 0x2440 <__fp_cmp+0x38>
    2432:	0a 26       	eor	r0, r26
    2434:	61 f0       	breq	.+24     	; 0x244e <__fp_cmp+0x46>
    2436:	23 2b       	or	r18, r19
    2438:	24 2b       	or	r18, r20
    243a:	25 2b       	or	r18, r21
    243c:	21 f4       	brne	.+8      	; 0x2446 <__fp_cmp+0x3e>
    243e:	08 95       	ret
    2440:	0a 26       	eor	r0, r26
    2442:	09 f4       	brne	.+2      	; 0x2446 <__fp_cmp+0x3e>
    2444:	a1 40       	sbci	r26, 0x01	; 1
    2446:	a6 95       	lsr	r26
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	81 1d       	adc	r24, r1
    244c:	81 1d       	adc	r24, r1
    244e:	08 95       	ret

00002450 <__fp_inf>:
    2450:	97 f9       	bld	r25, 7
    2452:	9f 67       	ori	r25, 0x7F	; 127
    2454:	80 e8       	ldi	r24, 0x80	; 128
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	08 95       	ret

0000245c <__fp_nan>:
    245c:	9f ef       	ldi	r25, 0xFF	; 255
    245e:	80 ec       	ldi	r24, 0xC0	; 192
    2460:	08 95       	ret

00002462 <__fp_pscA>:
    2462:	00 24       	eor	r0, r0
    2464:	0a 94       	dec	r0
    2466:	16 16       	cp	r1, r22
    2468:	17 06       	cpc	r1, r23
    246a:	18 06       	cpc	r1, r24
    246c:	09 06       	cpc	r0, r25
    246e:	08 95       	ret

00002470 <__fp_pscB>:
    2470:	00 24       	eor	r0, r0
    2472:	0a 94       	dec	r0
    2474:	12 16       	cp	r1, r18
    2476:	13 06       	cpc	r1, r19
    2478:	14 06       	cpc	r1, r20
    247a:	05 06       	cpc	r0, r21
    247c:	08 95       	ret

0000247e <__fp_round>:
    247e:	09 2e       	mov	r0, r25
    2480:	03 94       	inc	r0
    2482:	00 0c       	add	r0, r0
    2484:	11 f4       	brne	.+4      	; 0x248a <__fp_round+0xc>
    2486:	88 23       	and	r24, r24
    2488:	52 f0       	brmi	.+20     	; 0x249e <__fp_round+0x20>
    248a:	bb 0f       	add	r27, r27
    248c:	40 f4       	brcc	.+16     	; 0x249e <__fp_round+0x20>
    248e:	bf 2b       	or	r27, r31
    2490:	11 f4       	brne	.+4      	; 0x2496 <__fp_round+0x18>
    2492:	60 ff       	sbrs	r22, 0
    2494:	04 c0       	rjmp	.+8      	; 0x249e <__fp_round+0x20>
    2496:	6f 5f       	subi	r22, 0xFF	; 255
    2498:	7f 4f       	sbci	r23, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	9f 4f       	sbci	r25, 0xFF	; 255
    249e:	08 95       	ret

000024a0 <__fp_split3>:
    24a0:	57 fd       	sbrc	r21, 7
    24a2:	90 58       	subi	r25, 0x80	; 128
    24a4:	44 0f       	add	r20, r20
    24a6:	55 1f       	adc	r21, r21
    24a8:	59 f0       	breq	.+22     	; 0x24c0 <__fp_splitA+0x10>
    24aa:	5f 3f       	cpi	r21, 0xFF	; 255
    24ac:	71 f0       	breq	.+28     	; 0x24ca <__fp_splitA+0x1a>
    24ae:	47 95       	ror	r20

000024b0 <__fp_splitA>:
    24b0:	88 0f       	add	r24, r24
    24b2:	97 fb       	bst	r25, 7
    24b4:	99 1f       	adc	r25, r25
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <__fp_splitA+0x20>
    24b8:	9f 3f       	cpi	r25, 0xFF	; 255
    24ba:	79 f0       	breq	.+30     	; 0x24da <__fp_splitA+0x2a>
    24bc:	87 95       	ror	r24
    24be:	08 95       	ret
    24c0:	12 16       	cp	r1, r18
    24c2:	13 06       	cpc	r1, r19
    24c4:	14 06       	cpc	r1, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	f2 cf       	rjmp	.-28     	; 0x24ae <__fp_split3+0xe>
    24ca:	46 95       	lsr	r20
    24cc:	f1 df       	rcall	.-30     	; 0x24b0 <__fp_splitA>
    24ce:	08 c0       	rjmp	.+16     	; 0x24e0 <__fp_splitA+0x30>
    24d0:	16 16       	cp	r1, r22
    24d2:	17 06       	cpc	r1, r23
    24d4:	18 06       	cpc	r1, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	f1 cf       	rjmp	.-30     	; 0x24bc <__fp_splitA+0xc>
    24da:	86 95       	lsr	r24
    24dc:	71 05       	cpc	r23, r1
    24de:	61 05       	cpc	r22, r1
    24e0:	08 94       	sec
    24e2:	08 95       	ret

000024e4 <__fp_zero>:
    24e4:	e8 94       	clt

000024e6 <__fp_szero>:
    24e6:	bb 27       	eor	r27, r27
    24e8:	66 27       	eor	r22, r22
    24ea:	77 27       	eor	r23, r23
    24ec:	cb 01       	movw	r24, r22
    24ee:	97 f9       	bld	r25, 7
    24f0:	08 95       	ret

000024f2 <__gesf2>:
    24f2:	8a df       	rcall	.-236    	; 0x2408 <__fp_cmp>
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <__gesf2+0x6>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	08 95       	ret

000024fa <__mulsf3>:
    24fa:	0b d0       	rcall	.+22     	; 0x2512 <__mulsf3x>
    24fc:	c0 cf       	rjmp	.-128    	; 0x247e <__fp_round>
    24fe:	b1 df       	rcall	.-158    	; 0x2462 <__fp_pscA>
    2500:	28 f0       	brcs	.+10     	; 0x250c <__mulsf3+0x12>
    2502:	b6 df       	rcall	.-148    	; 0x2470 <__fp_pscB>
    2504:	18 f0       	brcs	.+6      	; 0x250c <__mulsf3+0x12>
    2506:	95 23       	and	r25, r21
    2508:	09 f0       	breq	.+2      	; 0x250c <__mulsf3+0x12>
    250a:	a2 cf       	rjmp	.-188    	; 0x2450 <__fp_inf>
    250c:	a7 cf       	rjmp	.-178    	; 0x245c <__fp_nan>
    250e:	11 24       	eor	r1, r1
    2510:	ea cf       	rjmp	.-44     	; 0x24e6 <__fp_szero>

00002512 <__mulsf3x>:
    2512:	c6 df       	rcall	.-116    	; 0x24a0 <__fp_split3>
    2514:	a0 f3       	brcs	.-24     	; 0x24fe <__mulsf3+0x4>

00002516 <__mulsf3_pse>:
    2516:	95 9f       	mul	r25, r21
    2518:	d1 f3       	breq	.-12     	; 0x250e <__mulsf3+0x14>
    251a:	95 0f       	add	r25, r21
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	55 1f       	adc	r21, r21
    2520:	62 9f       	mul	r22, r18
    2522:	f0 01       	movw	r30, r0
    2524:	72 9f       	mul	r23, r18
    2526:	bb 27       	eor	r27, r27
    2528:	f0 0d       	add	r31, r0
    252a:	b1 1d       	adc	r27, r1
    252c:	63 9f       	mul	r22, r19
    252e:	aa 27       	eor	r26, r26
    2530:	f0 0d       	add	r31, r0
    2532:	b1 1d       	adc	r27, r1
    2534:	aa 1f       	adc	r26, r26
    2536:	64 9f       	mul	r22, r20
    2538:	66 27       	eor	r22, r22
    253a:	b0 0d       	add	r27, r0
    253c:	a1 1d       	adc	r26, r1
    253e:	66 1f       	adc	r22, r22
    2540:	82 9f       	mul	r24, r18
    2542:	22 27       	eor	r18, r18
    2544:	b0 0d       	add	r27, r0
    2546:	a1 1d       	adc	r26, r1
    2548:	62 1f       	adc	r22, r18
    254a:	73 9f       	mul	r23, r19
    254c:	b0 0d       	add	r27, r0
    254e:	a1 1d       	adc	r26, r1
    2550:	62 1f       	adc	r22, r18
    2552:	83 9f       	mul	r24, r19
    2554:	a0 0d       	add	r26, r0
    2556:	61 1d       	adc	r22, r1
    2558:	22 1f       	adc	r18, r18
    255a:	74 9f       	mul	r23, r20
    255c:	33 27       	eor	r19, r19
    255e:	a0 0d       	add	r26, r0
    2560:	61 1d       	adc	r22, r1
    2562:	23 1f       	adc	r18, r19
    2564:	84 9f       	mul	r24, r20
    2566:	60 0d       	add	r22, r0
    2568:	21 1d       	adc	r18, r1
    256a:	82 2f       	mov	r24, r18
    256c:	76 2f       	mov	r23, r22
    256e:	6a 2f       	mov	r22, r26
    2570:	11 24       	eor	r1, r1
    2572:	9f 57       	subi	r25, 0x7F	; 127
    2574:	50 40       	sbci	r21, 0x00	; 0
    2576:	8a f0       	brmi	.+34     	; 0x259a <__mulsf3_pse+0x84>
    2578:	e1 f0       	breq	.+56     	; 0x25b2 <__mulsf3_pse+0x9c>
    257a:	88 23       	and	r24, r24
    257c:	4a f0       	brmi	.+18     	; 0x2590 <__mulsf3_pse+0x7a>
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	bb 1f       	adc	r27, r27
    2584:	66 1f       	adc	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	91 50       	subi	r25, 0x01	; 1
    258c:	50 40       	sbci	r21, 0x00	; 0
    258e:	a9 f7       	brne	.-22     	; 0x257a <__mulsf3_pse+0x64>
    2590:	9e 3f       	cpi	r25, 0xFE	; 254
    2592:	51 05       	cpc	r21, r1
    2594:	70 f0       	brcs	.+28     	; 0x25b2 <__mulsf3_pse+0x9c>
    2596:	5c cf       	rjmp	.-328    	; 0x2450 <__fp_inf>
    2598:	a6 cf       	rjmp	.-180    	; 0x24e6 <__fp_szero>
    259a:	5f 3f       	cpi	r21, 0xFF	; 255
    259c:	ec f3       	brlt	.-6      	; 0x2598 <__mulsf3_pse+0x82>
    259e:	98 3e       	cpi	r25, 0xE8	; 232
    25a0:	dc f3       	brlt	.-10     	; 0x2598 <__mulsf3_pse+0x82>
    25a2:	86 95       	lsr	r24
    25a4:	77 95       	ror	r23
    25a6:	67 95       	ror	r22
    25a8:	b7 95       	ror	r27
    25aa:	f7 95       	ror	r31
    25ac:	e7 95       	ror	r30
    25ae:	9f 5f       	subi	r25, 0xFF	; 255
    25b0:	c1 f7       	brne	.-16     	; 0x25a2 <__mulsf3_pse+0x8c>
    25b2:	fe 2b       	or	r31, r30
    25b4:	88 0f       	add	r24, r24
    25b6:	91 1d       	adc	r25, r1
    25b8:	96 95       	lsr	r25
    25ba:	87 95       	ror	r24
    25bc:	97 f9       	bld	r25, 7
    25be:	08 95       	ret

000025c0 <__udivmodqi4>:
    25c0:	99 1b       	sub	r25, r25
    25c2:	79 e0       	ldi	r23, 0x09	; 9
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <__udivmodqi4_ep>

000025c6 <__udivmodqi4_loop>:
    25c6:	99 1f       	adc	r25, r25
    25c8:	96 17       	cp	r25, r22
    25ca:	08 f0       	brcs	.+2      	; 0x25ce <__udivmodqi4_ep>
    25cc:	96 1b       	sub	r25, r22

000025ce <__udivmodqi4_ep>:
    25ce:	88 1f       	adc	r24, r24
    25d0:	7a 95       	dec	r23
    25d2:	c9 f7       	brne	.-14     	; 0x25c6 <__udivmodqi4_loop>
    25d4:	80 95       	com	r24
    25d6:	08 95       	ret

000025d8 <__udivmodhi4>:
    25d8:	aa 1b       	sub	r26, r26
    25da:	bb 1b       	sub	r27, r27
    25dc:	51 e1       	ldi	r21, 0x11	; 17
    25de:	07 c0       	rjmp	.+14     	; 0x25ee <__udivmodhi4_ep>

000025e0 <__udivmodhi4_loop>:
    25e0:	aa 1f       	adc	r26, r26
    25e2:	bb 1f       	adc	r27, r27
    25e4:	a6 17       	cp	r26, r22
    25e6:	b7 07       	cpc	r27, r23
    25e8:	10 f0       	brcs	.+4      	; 0x25ee <__udivmodhi4_ep>
    25ea:	a6 1b       	sub	r26, r22
    25ec:	b7 0b       	sbc	r27, r23

000025ee <__udivmodhi4_ep>:
    25ee:	88 1f       	adc	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	5a 95       	dec	r21
    25f4:	a9 f7       	brne	.-22     	; 0x25e0 <__udivmodhi4_loop>
    25f6:	80 95       	com	r24
    25f8:	90 95       	com	r25
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	08 95       	ret

00002600 <__divmodhi4>:
    2600:	97 fb       	bst	r25, 7
    2602:	07 2e       	mov	r0, r23
    2604:	16 f4       	brtc	.+4      	; 0x260a <__divmodhi4+0xa>
    2606:	00 94       	com	r0
    2608:	07 d0       	rcall	.+14     	; 0x2618 <__divmodhi4_neg1>
    260a:	77 fd       	sbrc	r23, 7
    260c:	09 d0       	rcall	.+18     	; 0x2620 <__divmodhi4_neg2>
    260e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
    2612:	07 fc       	sbrc	r0, 7
    2614:	05 d0       	rcall	.+10     	; 0x2620 <__divmodhi4_neg2>
    2616:	3e f4       	brtc	.+14     	; 0x2626 <__divmodhi4_exit>

00002618 <__divmodhi4_neg1>:
    2618:	90 95       	com	r25
    261a:	81 95       	neg	r24
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	08 95       	ret

00002620 <__divmodhi4_neg2>:
    2620:	70 95       	com	r23
    2622:	61 95       	neg	r22
    2624:	7f 4f       	sbci	r23, 0xFF	; 255

00002626 <__divmodhi4_exit>:
    2626:	08 95       	ret

00002628 <__udivmodsi4>:
    2628:	a1 e2       	ldi	r26, 0x21	; 33
    262a:	1a 2e       	mov	r1, r26
    262c:	aa 1b       	sub	r26, r26
    262e:	bb 1b       	sub	r27, r27
    2630:	fd 01       	movw	r30, r26
    2632:	0d c0       	rjmp	.+26     	; 0x264e <__udivmodsi4_ep>

00002634 <__udivmodsi4_loop>:
    2634:	aa 1f       	adc	r26, r26
    2636:	bb 1f       	adc	r27, r27
    2638:	ee 1f       	adc	r30, r30
    263a:	ff 1f       	adc	r31, r31
    263c:	a2 17       	cp	r26, r18
    263e:	b3 07       	cpc	r27, r19
    2640:	e4 07       	cpc	r30, r20
    2642:	f5 07       	cpc	r31, r21
    2644:	20 f0       	brcs	.+8      	; 0x264e <__udivmodsi4_ep>
    2646:	a2 1b       	sub	r26, r18
    2648:	b3 0b       	sbc	r27, r19
    264a:	e4 0b       	sbc	r30, r20
    264c:	f5 0b       	sbc	r31, r21

0000264e <__udivmodsi4_ep>:
    264e:	66 1f       	adc	r22, r22
    2650:	77 1f       	adc	r23, r23
    2652:	88 1f       	adc	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	1a 94       	dec	r1
    2658:	69 f7       	brne	.-38     	; 0x2634 <__udivmodsi4_loop>
    265a:	60 95       	com	r22
    265c:	70 95       	com	r23
    265e:	80 95       	com	r24
    2660:	90 95       	com	r25
    2662:	9b 01       	movw	r18, r22
    2664:	ac 01       	movw	r20, r24
    2666:	bd 01       	movw	r22, r26
    2668:	cf 01       	movw	r24, r30
    266a:	08 95       	ret

0000266c <dtostrf>:
    266c:	ef 92       	push	r14
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	c0 2f       	mov	r28, r16
    2676:	47 ff       	sbrs	r20, 7
    2678:	02 c0       	rjmp	.+4      	; 0x267e <dtostrf+0x12>
    267a:	34 e1       	ldi	r19, 0x14	; 20
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <dtostrf+0x14>
    267e:	34 e0       	ldi	r19, 0x04	; 4
    2680:	e4 2f       	mov	r30, r20
    2682:	ff 27       	eor	r31, r31
    2684:	e7 fd       	sbrc	r30, 7
    2686:	f0 95       	com	r31
    2688:	f7 ff       	sbrs	r31, 7
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <dtostrf+0x26>
    268c:	f1 95       	neg	r31
    268e:	e1 95       	neg	r30
    2690:	f1 09       	sbc	r31, r1
    2692:	e3 2e       	mov	r14, r19
    2694:	02 2f       	mov	r16, r18
    2696:	2e 2f       	mov	r18, r30
    2698:	4c 2f       	mov	r20, r28
    269a:	51 2f       	mov	r21, r17
    269c:	0e 94 56 14 	call	0x28ac	; 0x28ac <dtoa_prf>
    26a0:	8c 2f       	mov	r24, r28
    26a2:	91 2f       	mov	r25, r17
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	ef 90       	pop	r14
    26ac:	08 95       	ret

000026ae <atol>:
    26ae:	1f 93       	push	r17
    26b0:	fc 01       	movw	r30, r24
    26b2:	99 27       	eor	r25, r25
    26b4:	88 27       	eor	r24, r24
    26b6:	bc 01       	movw	r22, r24
    26b8:	e8 94       	clt
    26ba:	11 91       	ld	r17, Z+
    26bc:	10 32       	cpi	r17, 0x20	; 32
    26be:	e9 f3       	breq	.-6      	; 0x26ba <atol+0xc>
    26c0:	19 30       	cpi	r17, 0x09	; 9
    26c2:	10 f0       	brcs	.+4      	; 0x26c8 <atol+0x1a>
    26c4:	1e 30       	cpi	r17, 0x0E	; 14
    26c6:	c8 f3       	brcs	.-14     	; 0x26ba <atol+0xc>
    26c8:	1b 32       	cpi	r17, 0x2B	; 43
    26ca:	51 f0       	breq	.+20     	; 0x26e0 <atol+0x32>
    26cc:	1d 32       	cpi	r17, 0x2D	; 45
    26ce:	49 f4       	brne	.+18     	; 0x26e2 <atol+0x34>
    26d0:	68 94       	set
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <atol+0x32>
    26d4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__mulsi_const_10>
    26d8:	61 0f       	add	r22, r17
    26da:	71 1d       	adc	r23, r1
    26dc:	81 1d       	adc	r24, r1
    26de:	91 1d       	adc	r25, r1
    26e0:	11 91       	ld	r17, Z+
    26e2:	10 53       	subi	r17, 0x30	; 48
    26e4:	1a 30       	cpi	r17, 0x0A	; 10
    26e6:	b0 f3       	brcs	.-20     	; 0x26d4 <atol+0x26>
    26e8:	3e f4       	brtc	.+14     	; 0x26f8 <atol+0x4a>
    26ea:	90 95       	com	r25
    26ec:	80 95       	com	r24
    26ee:	70 95       	com	r23
    26f0:	61 95       	neg	r22
    26f2:	7f 4f       	sbci	r23, 0xFF	; 255
    26f4:	8f 4f       	sbci	r24, 0xFF	; 255
    26f6:	9f 4f       	sbci	r25, 0xFF	; 255
    26f8:	1f 91       	pop	r17
    26fa:	08 95       	ret

000026fc <strcasestr>:
    26fc:	fb 01       	movw	r30, r22
    26fe:	51 91       	ld	r21, Z+
    2700:	55 23       	and	r21, r21
    2702:	b1 f0       	breq	.+44     	; 0x2730 <strcasestr+0x34>
    2704:	bf 01       	movw	r22, r30
    2706:	dc 01       	movw	r26, r24
    2708:	05 2e       	mov	r0, r21
    270a:	4d 91       	ld	r20, X+
    270c:	44 23       	and	r20, r20
    270e:	69 f0       	breq	.+26     	; 0x272a <strcasestr+0x2e>
    2710:	10 d0       	rcall	.+32     	; 0x2732 <strcasestr+0x36>
    2712:	d9 f7       	brne	.-10     	; 0x270a <strcasestr+0xe>
    2714:	cd 01       	movw	r24, r26
    2716:	01 90       	ld	r0, Z+
    2718:	00 20       	and	r0, r0
    271a:	49 f0       	breq	.+18     	; 0x272e <strcasestr+0x32>
    271c:	4d 91       	ld	r20, X+
    271e:	41 11       	cpse	r20, r1
    2720:	08 d0       	rcall	.+16     	; 0x2732 <strcasestr+0x36>
    2722:	c9 f3       	breq	.-14     	; 0x2716 <strcasestr+0x1a>
    2724:	fb 01       	movw	r30, r22
    2726:	41 11       	cpse	r20, r1
    2728:	ee cf       	rjmp	.-36     	; 0x2706 <strcasestr+0xa>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	08 95       	ret
    2732:	40 25       	eor	r20, r0
    2734:	39 f0       	breq	.+14     	; 0x2744 <strcasestr+0x48>
    2736:	40 32       	cpi	r20, 0x20	; 32
    2738:	29 f4       	brne	.+10     	; 0x2744 <strcasestr+0x48>
    273a:	40 29       	or	r20, r0
    273c:	4b 57       	subi	r20, 0x7B	; 123
    273e:	46 5e       	subi	r20, 0xE6	; 230
    2740:	08 f0       	brcs	.+2      	; 0x2744 <strcasestr+0x48>
    2742:	18 94       	sez
    2744:	08 95       	ret

00002746 <strchr>:
    2746:	fc 01       	movw	r30, r24
    2748:	81 91       	ld	r24, Z+
    274a:	86 17       	cp	r24, r22
    274c:	21 f0       	breq	.+8      	; 0x2756 <strchr+0x10>
    274e:	88 23       	and	r24, r24
    2750:	d9 f7       	brne	.-10     	; 0x2748 <strchr+0x2>
    2752:	99 27       	eor	r25, r25
    2754:	08 95       	ret
    2756:	31 97       	sbiw	r30, 0x01	; 1
    2758:	cf 01       	movw	r24, r30
    275a:	08 95       	ret

0000275c <strcpy>:
    275c:	fb 01       	movw	r30, r22
    275e:	dc 01       	movw	r26, r24
    2760:	01 90       	ld	r0, Z+
    2762:	0d 92       	st	X+, r0
    2764:	00 20       	and	r0, r0
    2766:	e1 f7       	brne	.-8      	; 0x2760 <strcpy+0x4>
    2768:	08 95       	ret

0000276a <strstr>:
    276a:	fb 01       	movw	r30, r22
    276c:	51 91       	ld	r21, Z+
    276e:	55 23       	and	r21, r21
    2770:	a9 f0       	breq	.+42     	; 0x279c <strstr+0x32>
    2772:	bf 01       	movw	r22, r30
    2774:	dc 01       	movw	r26, r24
    2776:	4d 91       	ld	r20, X+
    2778:	45 17       	cp	r20, r21
    277a:	41 11       	cpse	r20, r1
    277c:	e1 f7       	brne	.-8      	; 0x2776 <strstr+0xc>
    277e:	59 f4       	brne	.+22     	; 0x2796 <strstr+0x2c>
    2780:	cd 01       	movw	r24, r26
    2782:	01 90       	ld	r0, Z+
    2784:	00 20       	and	r0, r0
    2786:	49 f0       	breq	.+18     	; 0x279a <strstr+0x30>
    2788:	4d 91       	ld	r20, X+
    278a:	40 15       	cp	r20, r0
    278c:	41 11       	cpse	r20, r1
    278e:	c9 f3       	breq	.-14     	; 0x2782 <strstr+0x18>
    2790:	fb 01       	movw	r30, r22
    2792:	41 11       	cpse	r20, r1
    2794:	ef cf       	rjmp	.-34     	; 0x2774 <strstr+0xa>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	08 95       	ret

0000279e <itoa>:
    279e:	fb 01       	movw	r30, r22
    27a0:	9f 01       	movw	r18, r30
    27a2:	e8 94       	clt
    27a4:	42 30       	cpi	r20, 0x02	; 2
    27a6:	c4 f0       	brlt	.+48     	; 0x27d8 <itoa+0x3a>
    27a8:	45 32       	cpi	r20, 0x25	; 37
    27aa:	b4 f4       	brge	.+44     	; 0x27d8 <itoa+0x3a>
    27ac:	4a 30       	cpi	r20, 0x0A	; 10
    27ae:	29 f4       	brne	.+10     	; 0x27ba <itoa+0x1c>
    27b0:	97 fb       	bst	r25, 7
    27b2:	1e f4       	brtc	.+6      	; 0x27ba <itoa+0x1c>
    27b4:	90 95       	com	r25
    27b6:	81 95       	neg	r24
    27b8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ba:	64 2f       	mov	r22, r20
    27bc:	77 27       	eor	r23, r23
    27be:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodhi4>
    27c2:	80 5d       	subi	r24, 0xD0	; 208
    27c4:	8a 33       	cpi	r24, 0x3A	; 58
    27c6:	0c f0       	brlt	.+2      	; 0x27ca <itoa+0x2c>
    27c8:	89 5d       	subi	r24, 0xD9	; 217
    27ca:	81 93       	st	Z+, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	a1 f7       	brne	.-24     	; 0x27ba <itoa+0x1c>
    27d2:	16 f4       	brtc	.+4      	; 0x27d8 <itoa+0x3a>
    27d4:	5d e2       	ldi	r21, 0x2D	; 45
    27d6:	51 93       	st	Z+, r21
    27d8:	10 82       	st	Z, r1
    27da:	c9 01       	movw	r24, r18
    27dc:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <strrev>

000027e0 <__mulsi_const_10>:
    27e0:	59 2f       	mov	r21, r25
    27e2:	48 2f       	mov	r20, r24
    27e4:	37 2f       	mov	r19, r23
    27e6:	26 2f       	mov	r18, r22
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	88 1f       	adc	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	66 0f       	add	r22, r22
    27f2:	77 1f       	adc	r23, r23
    27f4:	88 1f       	adc	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	62 0f       	add	r22, r18
    27fa:	73 1f       	adc	r23, r19
    27fc:	84 1f       	adc	r24, r20
    27fe:	95 1f       	adc	r25, r21
    2800:	66 0f       	add	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	08 95       	ret

0000280a <ultoa>:
    280a:	fa 01       	movw	r30, r20
    280c:	cf 93       	push	r28
    280e:	ff 93       	push	r31
    2810:	ef 93       	push	r30
    2812:	22 30       	cpi	r18, 0x02	; 2
    2814:	cc f0       	brlt	.+50     	; 0x2848 <ultoa+0x3e>
    2816:	25 32       	cpi	r18, 0x25	; 37
    2818:	bc f4       	brge	.+46     	; 0x2848 <ultoa+0x3e>
    281a:	c2 2f       	mov	r28, r18
    281c:	2c 2f       	mov	r18, r28
    281e:	33 27       	eor	r19, r19
    2820:	44 27       	eor	r20, r20
    2822:	55 27       	eor	r21, r21
    2824:	ff 93       	push	r31
    2826:	ef 93       	push	r30
    2828:	0e 94 14 13 	call	0x2628	; 0x2628 <__udivmodsi4>
    282c:	ef 91       	pop	r30
    282e:	ff 91       	pop	r31
    2830:	60 5d       	subi	r22, 0xD0	; 208
    2832:	6a 33       	cpi	r22, 0x3A	; 58
    2834:	0c f0       	brlt	.+2      	; 0x2838 <ultoa+0x2e>
    2836:	69 5d       	subi	r22, 0xD9	; 217
    2838:	61 93       	st	Z+, r22
    283a:	b9 01       	movw	r22, r18
    283c:	ca 01       	movw	r24, r20
    283e:	60 50       	subi	r22, 0x00	; 0
    2840:	70 40       	sbci	r23, 0x00	; 0
    2842:	80 40       	sbci	r24, 0x00	; 0
    2844:	90 40       	sbci	r25, 0x00	; 0
    2846:	51 f7       	brne	.-44     	; 0x281c <ultoa+0x12>
    2848:	10 82       	st	Z, r1
    284a:	8f 91       	pop	r24
    284c:	9f 91       	pop	r25
    284e:	cf 91       	pop	r28
    2850:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <strrev>

00002854 <__eerd_byte_m328p>:
    2854:	f9 99       	sbic	0x1f, 1	; 31
    2856:	fe cf       	rjmp	.-4      	; 0x2854 <__eerd_byte_m328p>
    2858:	92 bd       	out	0x22, r25	; 34
    285a:	81 bd       	out	0x21, r24	; 33
    285c:	f8 9a       	sbi	0x1f, 0	; 31
    285e:	99 27       	eor	r25, r25
    2860:	80 b5       	in	r24, 0x20	; 32
    2862:	08 95       	ret

00002864 <__eerd_dword_m328p>:
    2864:	a6 e1       	ldi	r26, 0x16	; 22
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	44 e0       	ldi	r20, 0x04	; 4
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__eerd_blraw_m328p>

00002870 <__eeupd_byte_m328p>:
    2870:	26 2f       	mov	r18, r22

00002872 <__eeupd_r18_m328p>:
    2872:	f9 99       	sbic	0x1f, 1	; 31
    2874:	fe cf       	rjmp	.-4      	; 0x2872 <__eeupd_r18_m328p>
    2876:	92 bd       	out	0x22, r25	; 34
    2878:	81 bd       	out	0x21, r24	; 33
    287a:	f8 9a       	sbi	0x1f, 0	; 31
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	00 b4       	in	r0, 0x20	; 32
    2880:	02 16       	cp	r0, r18
    2882:	39 f0       	breq	.+14     	; 0x2892 <__eeupd_r18_m328p+0x20>
    2884:	1f ba       	out	0x1f, r1	; 31
    2886:	20 bd       	out	0x20, r18	; 32
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	fa 9a       	sbi	0x1f, 2	; 31
    288e:	f9 9a       	sbi	0x1f, 1	; 31
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	08 95       	ret

00002894 <__eeupd_dword_m328p>:
    2894:	03 96       	adiw	r24, 0x03	; 3
    2896:	27 2f       	mov	r18, r23
    2898:	0e 94 39 14 	call	0x2872	; 0x2872 <__eeupd_r18_m328p>
    289c:	0e 94 38 14 	call	0x2870	; 0x2870 <__eeupd_byte_m328p>
    28a0:	25 2f       	mov	r18, r21
    28a2:	0e 94 39 14 	call	0x2872	; 0x2872 <__eeupd_r18_m328p>
    28a6:	24 2f       	mov	r18, r20
    28a8:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__eeupd_r18_m328p>

000028ac <dtoa_prf>:
    28ac:	6f 92       	push	r6
    28ae:	7f 92       	push	r7
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	29 97       	sbiw	r28, 0x09	; 9
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	6a 01       	movw	r12, r20
    28d8:	b2 2e       	mov	r11, r18
    28da:	10 2f       	mov	r17, r16
    28dc:	0c 33       	cpi	r16, 0x3C	; 60
    28de:	18 f4       	brcc	.+6      	; 0x28e6 <dtoa_prf+0x3a>
    28e0:	f0 2e       	mov	r15, r16
    28e2:	f3 94       	inc	r15
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <dtoa_prf+0x3e>
    28e6:	5c e3       	ldi	r21, 0x3C	; 60
    28e8:	f5 2e       	mov	r15, r21
    28ea:	0f 2d       	mov	r16, r15
    28ec:	27 e0       	ldi	r18, 0x07	; 7
    28ee:	ae 01       	movw	r20, r28
    28f0:	4f 5f       	subi	r20, 0xFF	; 255
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255
    28f4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__ftoa_engine>
    28f8:	79 81       	ldd	r23, Y+1	; 0x01
    28fa:	27 2f       	mov	r18, r23
    28fc:	29 70       	andi	r18, 0x09	; 9
    28fe:	21 30       	cpi	r18, 0x01	; 1
    2900:	31 f0       	breq	.+12     	; 0x290e <dtoa_prf+0x62>
    2902:	e1 fc       	sbrc	r14, 1
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <dtoa_prf+0x66>
    2906:	e0 fe       	sbrs	r14, 0
    2908:	06 c0       	rjmp	.+12     	; 0x2916 <dtoa_prf+0x6a>
    290a:	60 e2       	ldi	r22, 0x20	; 32
    290c:	05 c0       	rjmp	.+10     	; 0x2918 <dtoa_prf+0x6c>
    290e:	6d e2       	ldi	r22, 0x2D	; 45
    2910:	03 c0       	rjmp	.+6      	; 0x2918 <dtoa_prf+0x6c>
    2912:	6b e2       	ldi	r22, 0x2B	; 43
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <dtoa_prf+0x6c>
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	73 ff       	sbrs	r23, 3
    291a:	3d c0       	rjmp	.+122    	; 0x2996 <dtoa_prf+0xea>
    291c:	66 23       	and	r22, r22
    291e:	11 f0       	breq	.+4      	; 0x2924 <dtoa_prf+0x78>
    2920:	84 e0       	ldi	r24, 0x04	; 4
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <dtoa_prf+0x7a>
    2924:	83 e0       	ldi	r24, 0x03	; 3
    2926:	8b 15       	cp	r24, r11
    2928:	10 f4       	brcc	.+4      	; 0x292e <dtoa_prf+0x82>
    292a:	b8 1a       	sub	r11, r24
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <dtoa_prf+0x84>
    292e:	b1 2c       	mov	r11, r1
    2930:	e4 fc       	sbrc	r14, 4
    2932:	0b c0       	rjmp	.+22     	; 0x294a <dtoa_prf+0x9e>
    2934:	8b 2d       	mov	r24, r11
    2936:	f6 01       	movw	r30, r12
    2938:	90 e2       	ldi	r25, 0x20	; 32
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <dtoa_prf+0x94>
    293c:	91 93       	st	Z+, r25
    293e:	81 50       	subi	r24, 0x01	; 1
    2940:	81 11       	cpse	r24, r1
    2942:	fc cf       	rjmp	.-8      	; 0x293c <dtoa_prf+0x90>
    2944:	cb 0c       	add	r12, r11
    2946:	d1 1c       	adc	r13, r1
    2948:	b1 2c       	mov	r11, r1
    294a:	66 23       	and	r22, r22
    294c:	19 f0       	breq	.+6      	; 0x2954 <dtoa_prf+0xa8>
    294e:	d6 01       	movw	r26, r12
    2950:	6d 93       	st	X+, r22
    2952:	6d 01       	movw	r12, r26
    2954:	e2 fe       	sbrs	r14, 2
    2956:	0a c0       	rjmp	.+20     	; 0x296c <dtoa_prf+0xc0>
    2958:	8e e4       	ldi	r24, 0x4E	; 78
    295a:	f6 01       	movw	r30, r12
    295c:	80 83       	st	Z, r24
    295e:	91 e4       	ldi	r25, 0x41	; 65
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	82 83       	std	Z+2, r24	; 0x02
    2964:	f3 e0       	ldi	r31, 0x03	; 3
    2966:	cf 0e       	add	r12, r31
    2968:	d1 1c       	adc	r13, r1
    296a:	0c c0       	rjmp	.+24     	; 0x2984 <dtoa_prf+0xd8>
    296c:	8e e6       	ldi	r24, 0x6E	; 110
    296e:	d6 01       	movw	r26, r12
    2970:	8c 93       	st	X, r24
    2972:	91 e6       	ldi	r25, 0x61	; 97
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	9c 93       	st	X, r25
    2978:	11 97       	sbiw	r26, 0x01	; 1
    297a:	12 96       	adiw	r26, 0x02	; 2
    297c:	8c 93       	st	X, r24
    297e:	b3 e0       	ldi	r27, 0x03	; 3
    2980:	cb 0e       	add	r12, r27
    2982:	d1 1c       	adc	r13, r1
    2984:	8b 2d       	mov	r24, r11
    2986:	f6 01       	movw	r30, r12
    2988:	90 e2       	ldi	r25, 0x20	; 32
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <dtoa_prf+0xe4>
    298c:	91 93       	st	Z+, r25
    298e:	81 50       	subi	r24, 0x01	; 1
    2990:	81 11       	cpse	r24, r1
    2992:	fc cf       	rjmp	.-8      	; 0x298c <dtoa_prf+0xe0>
    2994:	40 c0       	rjmp	.+128    	; 0x2a16 <dtoa_prf+0x16a>
    2996:	72 ff       	sbrs	r23, 2
    2998:	45 c0       	rjmp	.+138    	; 0x2a24 <dtoa_prf+0x178>
    299a:	66 23       	and	r22, r22
    299c:	11 f0       	breq	.+4      	; 0x29a2 <dtoa_prf+0xf6>
    299e:	84 e0       	ldi	r24, 0x04	; 4
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <dtoa_prf+0xf8>
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	8b 15       	cp	r24, r11
    29a6:	10 f4       	brcc	.+4      	; 0x29ac <dtoa_prf+0x100>
    29a8:	b8 1a       	sub	r11, r24
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <dtoa_prf+0x102>
    29ac:	b1 2c       	mov	r11, r1
    29ae:	e4 fc       	sbrc	r14, 4
    29b0:	0b c0       	rjmp	.+22     	; 0x29c8 <dtoa_prf+0x11c>
    29b2:	8b 2d       	mov	r24, r11
    29b4:	f6 01       	movw	r30, r12
    29b6:	90 e2       	ldi	r25, 0x20	; 32
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <dtoa_prf+0x112>
    29ba:	91 93       	st	Z+, r25
    29bc:	81 50       	subi	r24, 0x01	; 1
    29be:	81 11       	cpse	r24, r1
    29c0:	fc cf       	rjmp	.-8      	; 0x29ba <dtoa_prf+0x10e>
    29c2:	cb 0c       	add	r12, r11
    29c4:	d1 1c       	adc	r13, r1
    29c6:	b1 2c       	mov	r11, r1
    29c8:	66 23       	and	r22, r22
    29ca:	19 f0       	breq	.+6      	; 0x29d2 <dtoa_prf+0x126>
    29cc:	f6 01       	movw	r30, r12
    29ce:	61 93       	st	Z+, r22
    29d0:	6f 01       	movw	r12, r30
    29d2:	e2 fe       	sbrs	r14, 2
    29d4:	0e c0       	rjmp	.+28     	; 0x29f2 <dtoa_prf+0x146>
    29d6:	89 e4       	ldi	r24, 0x49	; 73
    29d8:	d6 01       	movw	r26, r12
    29da:	8c 93       	st	X, r24
    29dc:	8e e4       	ldi	r24, 0x4E	; 78
    29de:	11 96       	adiw	r26, 0x01	; 1
    29e0:	8c 93       	st	X, r24
    29e2:	11 97       	sbiw	r26, 0x01	; 1
    29e4:	86 e4       	ldi	r24, 0x46	; 70
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	8c 93       	st	X, r24
    29ea:	b3 e0       	ldi	r27, 0x03	; 3
    29ec:	cb 0e       	add	r12, r27
    29ee:	d1 1c       	adc	r13, r1
    29f0:	0a c0       	rjmp	.+20     	; 0x2a06 <dtoa_prf+0x15a>
    29f2:	89 e6       	ldi	r24, 0x69	; 105
    29f4:	f6 01       	movw	r30, r12
    29f6:	80 83       	st	Z, r24
    29f8:	8e e6       	ldi	r24, 0x6E	; 110
    29fa:	81 83       	std	Z+1, r24	; 0x01
    29fc:	86 e6       	ldi	r24, 0x66	; 102
    29fe:	82 83       	std	Z+2, r24	; 0x02
    2a00:	f3 e0       	ldi	r31, 0x03	; 3
    2a02:	cf 0e       	add	r12, r31
    2a04:	d1 1c       	adc	r13, r1
    2a06:	8b 2d       	mov	r24, r11
    2a08:	f6 01       	movw	r30, r12
    2a0a:	90 e2       	ldi	r25, 0x20	; 32
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <dtoa_prf+0x166>
    2a0e:	91 93       	st	Z+, r25
    2a10:	81 50       	subi	r24, 0x01	; 1
    2a12:	81 11       	cpse	r24, r1
    2a14:	fc cf       	rjmp	.-8      	; 0x2a0e <dtoa_prf+0x162>
    2a16:	f6 01       	movw	r30, r12
    2a18:	eb 0d       	add	r30, r11
    2a1a:	f1 1d       	adc	r31, r1
    2a1c:	10 82       	st	Z, r1
    2a1e:	2e ef       	ldi	r18, 0xFE	; 254
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	ac c0       	rjmp	.+344    	; 0x2b7c <dtoa_prf+0x2d0>
    2a24:	a1 e0       	ldi	r26, 0x01	; 1
    2a26:	61 11       	cpse	r22, r1
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <dtoa_prf+0x180>
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	4a 2f       	mov	r20, r26
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	18 16       	cp	r1, r24
    2a32:	19 06       	cpc	r1, r25
    2a34:	24 f4       	brge	.+8      	; 0x2a3e <dtoa_prf+0x192>
    2a36:	9c 01       	movw	r18, r24
    2a38:	2f 5f       	subi	r18, 0xFF	; 255
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <dtoa_prf+0x196>
    2a3e:	21 e0       	ldi	r18, 0x01	; 1
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	24 0f       	add	r18, r20
    2a44:	35 1f       	adc	r19, r21
    2a46:	11 23       	and	r17, r17
    2a48:	29 f0       	breq	.+10     	; 0x2a54 <dtoa_prf+0x1a8>
    2a4a:	41 2f       	mov	r20, r17
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	4f 5f       	subi	r20, 0xFF	; 255
    2a50:	5f 4f       	sbci	r21, 0xFF	; 255
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <dtoa_prf+0x1ac>
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	42 0f       	add	r20, r18
    2a5a:	53 1f       	adc	r21, r19
    2a5c:	2b 2d       	mov	r18, r11
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	42 17       	cp	r20, r18
    2a62:	53 07       	cpc	r21, r19
    2a64:	14 f4       	brge	.+4      	; 0x2a6a <dtoa_prf+0x1be>
    2a66:	b4 1a       	sub	r11, r20
    2a68:	01 c0       	rjmp	.+2      	; 0x2a6c <dtoa_prf+0x1c0>
    2a6a:	b1 2c       	mov	r11, r1
    2a6c:	3e 2d       	mov	r19, r14
    2a6e:	30 71       	andi	r19, 0x10	; 16
    2a70:	e4 fc       	sbrc	r14, 4
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <dtoa_prf+0x1e2>
    2a74:	e3 fc       	sbrc	r14, 3
    2a76:	0b c0       	rjmp	.+22     	; 0x2a8e <dtoa_prf+0x1e2>
    2a78:	2b 2d       	mov	r18, r11
    2a7a:	f6 01       	movw	r30, r12
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <dtoa_prf+0x1d8>
    2a80:	41 93       	st	Z+, r20
    2a82:	21 50       	subi	r18, 0x01	; 1
    2a84:	21 11       	cpse	r18, r1
    2a86:	fc cf       	rjmp	.-8      	; 0x2a80 <dtoa_prf+0x1d4>
    2a88:	cb 0c       	add	r12, r11
    2a8a:	d1 1c       	adc	r13, r1
    2a8c:	b1 2c       	mov	r11, r1
    2a8e:	aa 23       	and	r26, r26
    2a90:	19 f0       	breq	.+6      	; 0x2a98 <dtoa_prf+0x1ec>
    2a92:	d6 01       	movw	r26, r12
    2a94:	6d 93       	st	X+, r22
    2a96:	6d 01       	movw	r12, r26
    2a98:	31 11       	cpse	r19, r1
    2a9a:	0b c0       	rjmp	.+22     	; 0x2ab2 <dtoa_prf+0x206>
    2a9c:	2b 2d       	mov	r18, r11
    2a9e:	f6 01       	movw	r30, r12
    2aa0:	30 e3       	ldi	r19, 0x30	; 48
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <dtoa_prf+0x1fc>
    2aa4:	31 93       	st	Z+, r19
    2aa6:	21 50       	subi	r18, 0x01	; 1
    2aa8:	21 11       	cpse	r18, r1
    2aaa:	fc cf       	rjmp	.-8      	; 0x2aa4 <dtoa_prf+0x1f8>
    2aac:	cb 0c       	add	r12, r11
    2aae:	d1 1c       	adc	r13, r1
    2ab0:	b1 2c       	mov	r11, r1
    2ab2:	f8 0e       	add	r15, r24
    2ab4:	0a 81       	ldd	r16, Y+2	; 0x02
    2ab6:	40 e1       	ldi	r20, 0x10	; 16
    2ab8:	a4 2e       	mov	r10, r20
    2aba:	a7 22       	and	r10, r23
    2abc:	74 ff       	sbrs	r23, 4
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <dtoa_prf+0x21a>
    2ac0:	01 33       	cpi	r16, 0x31	; 49
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <dtoa_prf+0x21a>
    2ac4:	fa 94       	dec	r15
    2ac6:	1f 14       	cp	r1, r15
    2ac8:	2c f4       	brge	.+10     	; 0x2ad4 <dtoa_prf+0x228>
    2aca:	2f 2d       	mov	r18, r15
    2acc:	29 30       	cpi	r18, 0x09	; 9
    2ace:	18 f0       	brcs	.+6      	; 0x2ad6 <dtoa_prf+0x22a>
    2ad0:	28 e0       	ldi	r18, 0x08	; 8
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <dtoa_prf+0x22a>
    2ad4:	21 e0       	ldi	r18, 0x01	; 1
    2ad6:	ac 01       	movw	r20, r24
    2ad8:	97 ff       	sbrs	r25, 7
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <dtoa_prf+0x234>
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	3e e2       	ldi	r19, 0x2E	; 46
    2ae6:	93 2e       	mov	r9, r19
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 1b       	sub	r30, r18
    2aec:	f1 09       	sbc	r31, r1
    2aee:	9f 01       	movw	r18, r30
    2af0:	dc 01       	movw	r26, r24
    2af2:	a4 1b       	sub	r26, r20
    2af4:	b5 0b       	sbc	r27, r21
    2af6:	fe 01       	movw	r30, r28
    2af8:	31 96       	adiw	r30, 0x01	; 1
    2afa:	ea 0f       	add	r30, r26
    2afc:	fb 1f       	adc	r31, r27
    2afe:	a1 2f       	mov	r26, r17
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	66 24       	eor	r6, r6
    2b04:	77 24       	eor	r7, r7
    2b06:	6a 1a       	sub	r6, r26
    2b08:	7b 0a       	sbc	r7, r27
    2b0a:	4f 3f       	cpi	r20, 0xFF	; 255
    2b0c:	1f ef       	ldi	r17, 0xFF	; 255
    2b0e:	51 07       	cpc	r21, r17
    2b10:	19 f4       	brne	.+6      	; 0x2b18 <dtoa_prf+0x26c>
    2b12:	d6 01       	movw	r26, r12
    2b14:	9d 92       	st	X+, r9
    2b16:	6d 01       	movw	r12, r26
    2b18:	84 17       	cp	r24, r20
    2b1a:	95 07       	cpc	r25, r21
    2b1c:	54 f0       	brlt	.+20     	; 0x2b32 <dtoa_prf+0x286>
    2b1e:	24 17       	cp	r18, r20
    2b20:	35 07       	cpc	r19, r21
    2b22:	3c f4       	brge	.+14     	; 0x2b32 <dtoa_prf+0x286>
    2b24:	7f 01       	movw	r14, r30
    2b26:	e6 0e       	add	r14, r22
    2b28:	f7 1e       	adc	r15, r23
    2b2a:	d7 01       	movw	r26, r14
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	1c 91       	ld	r17, X
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <dtoa_prf+0x288>
    2b32:	10 e3       	ldi	r17, 0x30	; 48
    2b34:	41 50       	subi	r20, 0x01	; 1
    2b36:	51 09       	sbc	r21, r1
    2b38:	6f 5f       	subi	r22, 0xFF	; 255
    2b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3c:	46 15       	cp	r20, r6
    2b3e:	57 05       	cpc	r21, r7
    2b40:	24 f0       	brlt	.+8      	; 0x2b4a <dtoa_prf+0x29e>
    2b42:	d6 01       	movw	r26, r12
    2b44:	1d 93       	st	X+, r17
    2b46:	6d 01       	movw	r12, r26
    2b48:	e0 cf       	rjmp	.-64     	; 0x2b0a <dtoa_prf+0x25e>
    2b4a:	48 17       	cp	r20, r24
    2b4c:	59 07       	cpc	r21, r25
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <dtoa_prf+0x2b2>
    2b50:	06 33       	cpi	r16, 0x36	; 54
    2b52:	20 f4       	brcc	.+8      	; 0x2b5c <dtoa_prf+0x2b0>
    2b54:	05 33       	cpi	r16, 0x35	; 53
    2b56:	19 f4       	brne	.+6      	; 0x2b5e <dtoa_prf+0x2b2>
    2b58:	a1 10       	cpse	r10, r1
    2b5a:	01 c0       	rjmp	.+2      	; 0x2b5e <dtoa_prf+0x2b2>
    2b5c:	11 e3       	ldi	r17, 0x31	; 49
    2b5e:	f6 01       	movw	r30, r12
    2b60:	11 93       	st	Z+, r17
    2b62:	8b 2d       	mov	r24, r11
    2b64:	df 01       	movw	r26, r30
    2b66:	90 e2       	ldi	r25, 0x20	; 32
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <dtoa_prf+0x2c2>
    2b6a:	9d 93       	st	X+, r25
    2b6c:	81 50       	subi	r24, 0x01	; 1
    2b6e:	81 11       	cpse	r24, r1
    2b70:	fc cf       	rjmp	.-8      	; 0x2b6a <dtoa_prf+0x2be>
    2b72:	eb 0d       	add	r30, r11
    2b74:	f1 1d       	adc	r31, r1
    2b76:	10 82       	st	Z, r1
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	c9 01       	movw	r24, r18
    2b7e:	29 96       	adiw	r28, 0x09	; 9
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
    2b9a:	bf 90       	pop	r11
    2b9c:	af 90       	pop	r10
    2b9e:	9f 90       	pop	r9
    2ba0:	7f 90       	pop	r7
    2ba2:	6f 90       	pop	r6
    2ba4:	08 95       	ret

00002ba6 <__ftoa_engine>:
    2ba6:	28 30       	cpi	r18, 0x08	; 8
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <__ftoa_engine+0x6>
    2baa:	27 e0       	ldi	r18, 0x07	; 7
    2bac:	33 27       	eor	r19, r19
    2bae:	da 01       	movw	r26, r20
    2bb0:	99 0f       	add	r25, r25
    2bb2:	31 1d       	adc	r19, r1
    2bb4:	87 fd       	sbrc	r24, 7
    2bb6:	91 60       	ori	r25, 0x01	; 1
    2bb8:	00 96       	adiw	r24, 0x00	; 0
    2bba:	61 05       	cpc	r22, r1
    2bbc:	71 05       	cpc	r23, r1
    2bbe:	39 f4       	brne	.+14     	; 0x2bce <__ftoa_engine+0x28>
    2bc0:	32 60       	ori	r19, 0x02	; 2
    2bc2:	2e 5f       	subi	r18, 0xFE	; 254
    2bc4:	3d 93       	st	X+, r19
    2bc6:	30 e3       	ldi	r19, 0x30	; 48
    2bc8:	2a 95       	dec	r18
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <__ftoa_engine+0x1e>
    2bcc:	08 95       	ret
    2bce:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd0:	30 f0       	brcs	.+12     	; 0x2bde <__ftoa_engine+0x38>
    2bd2:	80 38       	cpi	r24, 0x80	; 128
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <__ftoa_engine+0x36>
    2bda:	3c 5f       	subi	r19, 0xFC	; 252
    2bdc:	3c 5f       	subi	r19, 0xFC	; 252
    2bde:	3d 93       	st	X+, r19
    2be0:	91 30       	cpi	r25, 0x01	; 1
    2be2:	08 f0       	brcs	.+2      	; 0x2be6 <__ftoa_engine+0x40>
    2be4:	80 68       	ori	r24, 0x80	; 128
    2be6:	91 1d       	adc	r25, r1
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	1f 93       	push	r17
    2bee:	0f 93       	push	r16
    2bf0:	ff 92       	push	r15
    2bf2:	ef 92       	push	r14
    2bf4:	19 2f       	mov	r17, r25
    2bf6:	98 7f       	andi	r25, 0xF8	; 248
    2bf8:	96 95       	lsr	r25
    2bfa:	e9 2f       	mov	r30, r25
    2bfc:	96 95       	lsr	r25
    2bfe:	96 95       	lsr	r25
    2c00:	e9 0f       	add	r30, r25
    2c02:	ff 27       	eor	r31, r31
    2c04:	ee 5f       	subi	r30, 0xFE	; 254
    2c06:	fe 4f       	sbci	r31, 0xFE	; 254
    2c08:	99 27       	eor	r25, r25
    2c0a:	33 27       	eor	r19, r19
    2c0c:	ee 24       	eor	r14, r14
    2c0e:	ff 24       	eor	r15, r15
    2c10:	a7 01       	movw	r20, r14
    2c12:	e7 01       	movw	r28, r14
    2c14:	05 90       	lpm	r0, Z+
    2c16:	08 94       	sec
    2c18:	07 94       	ror	r0
    2c1a:	28 f4       	brcc	.+10     	; 0x2c26 <__ftoa_engine+0x80>
    2c1c:	36 0f       	add	r19, r22
    2c1e:	e7 1e       	adc	r14, r23
    2c20:	f8 1e       	adc	r15, r24
    2c22:	49 1f       	adc	r20, r25
    2c24:	51 1d       	adc	r21, r1
    2c26:	66 0f       	add	r22, r22
    2c28:	77 1f       	adc	r23, r23
    2c2a:	88 1f       	adc	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	06 94       	lsr	r0
    2c30:	a1 f7       	brne	.-24     	; 0x2c1a <__ftoa_engine+0x74>
    2c32:	05 90       	lpm	r0, Z+
    2c34:	07 94       	ror	r0
    2c36:	28 f4       	brcc	.+10     	; 0x2c42 <__ftoa_engine+0x9c>
    2c38:	e7 0e       	add	r14, r23
    2c3a:	f8 1e       	adc	r15, r24
    2c3c:	49 1f       	adc	r20, r25
    2c3e:	56 1f       	adc	r21, r22
    2c40:	c1 1d       	adc	r28, r1
    2c42:	77 0f       	add	r23, r23
    2c44:	88 1f       	adc	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	66 1f       	adc	r22, r22
    2c4a:	06 94       	lsr	r0
    2c4c:	a1 f7       	brne	.-24     	; 0x2c36 <__ftoa_engine+0x90>
    2c4e:	05 90       	lpm	r0, Z+
    2c50:	07 94       	ror	r0
    2c52:	28 f4       	brcc	.+10     	; 0x2c5e <__ftoa_engine+0xb8>
    2c54:	f8 0e       	add	r15, r24
    2c56:	49 1f       	adc	r20, r25
    2c58:	56 1f       	adc	r21, r22
    2c5a:	c7 1f       	adc	r28, r23
    2c5c:	d1 1d       	adc	r29, r1
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	66 1f       	adc	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	06 94       	lsr	r0
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <__ftoa_engine+0xac>
    2c6a:	05 90       	lpm	r0, Z+
    2c6c:	07 94       	ror	r0
    2c6e:	20 f4       	brcc	.+8      	; 0x2c78 <__ftoa_engine+0xd2>
    2c70:	49 0f       	add	r20, r25
    2c72:	56 1f       	adc	r21, r22
    2c74:	c7 1f       	adc	r28, r23
    2c76:	d8 1f       	adc	r29, r24
    2c78:	99 0f       	add	r25, r25
    2c7a:	66 1f       	adc	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	88 1f       	adc	r24, r24
    2c80:	06 94       	lsr	r0
    2c82:	a9 f7       	brne	.-22     	; 0x2c6e <__ftoa_engine+0xc8>
    2c84:	84 91       	lpm	r24, Z
    2c86:	10 95       	com	r17
    2c88:	17 70       	andi	r17, 0x07	; 7
    2c8a:	41 f0       	breq	.+16     	; 0x2c9c <__ftoa_engine+0xf6>
    2c8c:	d6 95       	lsr	r29
    2c8e:	c7 95       	ror	r28
    2c90:	57 95       	ror	r21
    2c92:	47 95       	ror	r20
    2c94:	f7 94       	ror	r15
    2c96:	e7 94       	ror	r14
    2c98:	1a 95       	dec	r17
    2c9a:	c1 f7       	brne	.-16     	; 0x2c8c <__ftoa_engine+0xe6>
    2c9c:	e8 ea       	ldi	r30, 0xA8	; 168
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	68 94       	set
    2ca2:	15 90       	lpm	r1, Z+
    2ca4:	15 91       	lpm	r17, Z+
    2ca6:	35 91       	lpm	r19, Z+
    2ca8:	65 91       	lpm	r22, Z+
    2caa:	95 91       	lpm	r25, Z+
    2cac:	05 90       	lpm	r0, Z+
    2cae:	7f e2       	ldi	r23, 0x2F	; 47
    2cb0:	73 95       	inc	r23
    2cb2:	e1 18       	sub	r14, r1
    2cb4:	f1 0a       	sbc	r15, r17
    2cb6:	43 0b       	sbc	r20, r19
    2cb8:	56 0b       	sbc	r21, r22
    2cba:	c9 0b       	sbc	r28, r25
    2cbc:	d0 09       	sbc	r29, r0
    2cbe:	c0 f7       	brcc	.-16     	; 0x2cb0 <__ftoa_engine+0x10a>
    2cc0:	e1 0c       	add	r14, r1
    2cc2:	f1 1e       	adc	r15, r17
    2cc4:	43 1f       	adc	r20, r19
    2cc6:	56 1f       	adc	r21, r22
    2cc8:	c9 1f       	adc	r28, r25
    2cca:	d0 1d       	adc	r29, r0
    2ccc:	7e f4       	brtc	.+30     	; 0x2cec <__ftoa_engine+0x146>
    2cce:	70 33       	cpi	r23, 0x30	; 48
    2cd0:	11 f4       	brne	.+4      	; 0x2cd6 <__ftoa_engine+0x130>
    2cd2:	8a 95       	dec	r24
    2cd4:	e6 cf       	rjmp	.-52     	; 0x2ca2 <__ftoa_engine+0xfc>
    2cd6:	e8 94       	clt
    2cd8:	01 50       	subi	r16, 0x01	; 1
    2cda:	30 f0       	brcs	.+12     	; 0x2ce8 <__ftoa_engine+0x142>
    2cdc:	08 0f       	add	r16, r24
    2cde:	0a f4       	brpl	.+2      	; 0x2ce2 <__ftoa_engine+0x13c>
    2ce0:	00 27       	eor	r16, r16
    2ce2:	02 17       	cp	r16, r18
    2ce4:	08 f4       	brcc	.+2      	; 0x2ce8 <__ftoa_engine+0x142>
    2ce6:	20 2f       	mov	r18, r16
    2ce8:	23 95       	inc	r18
    2cea:	02 2f       	mov	r16, r18
    2cec:	7a 33       	cpi	r23, 0x3A	; 58
    2cee:	28 f0       	brcs	.+10     	; 0x2cfa <__ftoa_engine+0x154>
    2cf0:	79 e3       	ldi	r23, 0x39	; 57
    2cf2:	7d 93       	st	X+, r23
    2cf4:	2a 95       	dec	r18
    2cf6:	e9 f7       	brne	.-6      	; 0x2cf2 <__ftoa_engine+0x14c>
    2cf8:	10 c0       	rjmp	.+32     	; 0x2d1a <__ftoa_engine+0x174>
    2cfa:	7d 93       	st	X+, r23
    2cfc:	2a 95       	dec	r18
    2cfe:	89 f6       	brne	.-94     	; 0x2ca2 <__ftoa_engine+0xfc>
    2d00:	06 94       	lsr	r0
    2d02:	97 95       	ror	r25
    2d04:	67 95       	ror	r22
    2d06:	37 95       	ror	r19
    2d08:	17 95       	ror	r17
    2d0a:	17 94       	ror	r1
    2d0c:	e1 18       	sub	r14, r1
    2d0e:	f1 0a       	sbc	r15, r17
    2d10:	43 0b       	sbc	r20, r19
    2d12:	56 0b       	sbc	r21, r22
    2d14:	c9 0b       	sbc	r28, r25
    2d16:	d0 09       	sbc	r29, r0
    2d18:	98 f0       	brcs	.+38     	; 0x2d40 <__ftoa_engine+0x19a>
    2d1a:	23 95       	inc	r18
    2d1c:	7e 91       	ld	r23, -X
    2d1e:	73 95       	inc	r23
    2d20:	7a 33       	cpi	r23, 0x3A	; 58
    2d22:	08 f0       	brcs	.+2      	; 0x2d26 <__ftoa_engine+0x180>
    2d24:	70 e3       	ldi	r23, 0x30	; 48
    2d26:	7c 93       	st	X, r23
    2d28:	20 13       	cpse	r18, r16
    2d2a:	b8 f7       	brcc	.-18     	; 0x2d1a <__ftoa_engine+0x174>
    2d2c:	7e 91       	ld	r23, -X
    2d2e:	70 61       	ori	r23, 0x10	; 16
    2d30:	7d 93       	st	X+, r23
    2d32:	30 f0       	brcs	.+12     	; 0x2d40 <__ftoa_engine+0x19a>
    2d34:	83 95       	inc	r24
    2d36:	71 e3       	ldi	r23, 0x31	; 49
    2d38:	7d 93       	st	X+, r23
    2d3a:	70 e3       	ldi	r23, 0x30	; 48
    2d3c:	2a 95       	dec	r18
    2d3e:	e1 f7       	brne	.-8      	; 0x2d38 <__ftoa_engine+0x192>
    2d40:	11 24       	eor	r1, r1
    2d42:	ef 90       	pop	r14
    2d44:	ff 90       	pop	r15
    2d46:	0f 91       	pop	r16
    2d48:	1f 91       	pop	r17
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	99 27       	eor	r25, r25
    2d50:	87 fd       	sbrc	r24, 7
    2d52:	90 95       	com	r25
    2d54:	08 95       	ret

00002d56 <strrev>:
    2d56:	dc 01       	movw	r26, r24
    2d58:	fc 01       	movw	r30, r24
    2d5a:	67 2f       	mov	r22, r23
    2d5c:	71 91       	ld	r23, Z+
    2d5e:	77 23       	and	r23, r23
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <strrev+0x4>
    2d62:	32 97       	sbiw	r30, 0x02	; 2
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <strrev+0x18>
    2d66:	7c 91       	ld	r23, X
    2d68:	6d 93       	st	X+, r22
    2d6a:	70 83       	st	Z, r23
    2d6c:	62 91       	ld	r22, -Z
    2d6e:	ae 17       	cp	r26, r30
    2d70:	bf 07       	cpc	r27, r31
    2d72:	c8 f3       	brcs	.-14     	; 0x2d66 <strrev+0x10>
    2d74:	08 95       	ret

00002d76 <__eerd_block_m328p>:
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22

00002d7a <__eerd_blraw_m328p>:
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	f9 99       	sbic	0x1f, 1	; 31
    2d7e:	fe cf       	rjmp	.-4      	; 0x2d7c <__eerd_blraw_m328p+0x2>
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <__eerd_blraw_m328p+0x14>
    2d82:	f2 bd       	out	0x22, r31	; 34
    2d84:	e1 bd       	out	0x21, r30	; 33
    2d86:	f8 9a       	sbi	0x1f, 0	; 31
    2d88:	31 96       	adiw	r30, 0x01	; 1
    2d8a:	00 b4       	in	r0, 0x20	; 32
    2d8c:	0d 92       	st	X+, r0
    2d8e:	41 50       	subi	r20, 0x01	; 1
    2d90:	50 40       	sbci	r21, 0x00	; 0
    2d92:	b8 f7       	brcc	.-18     	; 0x2d82 <__eerd_blraw_m328p+0x8>
    2d94:	08 95       	ret

00002d96 <_exit>:
    2d96:	f8 94       	cli

00002d98 <__stop_program>:
    2d98:	ff cf       	rjmp	.-2      	; 0x2d98 <__stop_program>
