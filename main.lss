
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003e2  00800100  0000336a  0000341e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000336a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ba  008004e2  008004e2  00003800  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  00003800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000050a0  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000011cb  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00009a83  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000048  00000000  00000000  00009a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000051c5  00000000  00000000  00009adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000652  00000000  00000000  0000eca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000784  00000000  00000000  0000f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000708  00000000  00000000  0000fa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009a8  00000000  00000000  00010180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002434  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000158  00000000  00000000  00012f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
       c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_3>
      10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      14:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      1c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      20:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      24:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      2c:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_11>
      30:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      34:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      3c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      44:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      48:	0c 94 86 12 	jmp	0x250c	; 0x250c <__vector_18>
      4c:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_19>
      50:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_21>
      58:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      5c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      60:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>
      64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__bad_interrupt>

00000068 <__c.2230>:
      68:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      78:	3a 20 00                                            : .

0000007b <__c.2232>:
      7b:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      8b:	6f 72 3a 20 00                                      or: .

00000090 <__c.2234>:
      90:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
      a0:	65 72 72 6f 72 3a 20 00 00 40 7a 10 f3 5a 00 a0     error: ..@z..Z..
      b0:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c0:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d0:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e0:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f0:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     100:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     110:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     120:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     130:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     140:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     150:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     160:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     170:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     180:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     190:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a0:	3d 27                                               ='

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	d8 e0       	ldi	r29, 0x08	; 8
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	14 e0       	ldi	r17, 0x04	; 4
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	ea e6       	ldi	r30, 0x6A	; 106
     1b6:	f3 e3       	ldi	r31, 0x33	; 51
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a2 3e       	cpi	r26, 0xE2	; 226
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	16 e0       	ldi	r17, 0x06	; 6
     1c6:	a2 ee       	ldi	r26, 0xE2	; 226
     1c8:	b4 e0       	ldi	r27, 0x04	; 4
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	ac 39       	cpi	r26, 0x9C	; 156
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	0e 94 3e 13 	call	0x267c	; 0x267c <main>
     1d8:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <_exit>

000001dc <__bad_interrupt>:
     1dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e0 <ds18b20_reset>:
 */
uint8_t ds18b20_reset(void) {
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     1e0:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     1e2:	3d 9a       	sbi	0x07, 5	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e4:	8e ea       	ldi	r24, 0xAE	; 174
     1e6:	97 e0       	ldi	r25, 0x07	; 7
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <ds18b20_reset+0x8>
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     1ec:	3d 98       	cbi	0x07, 5	; 7
     1ee:	85 ef       	ldi	r24, 0xF5	; 245
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <ds18b20_reset+0x12>
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
     1f6:	86 b1       	in	r24, 0x06	; 6
     1f8:	e8 eb       	ldi	r30, 0xB8	; 184
     1fa:	f6 e0       	ldi	r31, 0x06	; 6
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <ds18b20_reset+0x1c>
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
}
     200:	80 72       	andi	r24, 0x20	; 32
     202:	08 95       	ret

00000204 <ds18b20_writebit>:
/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     204:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     206:	3d 9a       	sbi	0x07, 5	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <ds18b20_writebit+0x6>
	_delay_us(1);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     20e:	81 11       	cpse	r24, r1
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     210:	3d 98       	cbi	0x07, 5	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     212:	85 ef       	ldi	r24, 0xF5	; 245
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <ds18b20_writebit+0x12>

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     21a:	3d 98       	cbi	0x07, 5	; 7
     21c:	08 95       	ret

0000021e <ds18b20_readbit>:
 */
uint8_t ds18b20_readbit(void){
	uint8_t bit=0;

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     21e:	45 98       	cbi	0x08, 5	; 8
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     220:	3d 9a       	sbi	0x07, 5	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <ds18b20_readbit+0x6>
	_delay_us(1);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     228:	3d 98       	cbi	0x07, 5	; 7
     22a:	8c e4       	ldi	r24, 0x4C	; 76
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <ds18b20_readbit+0xe>
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
     230:	86 b1       	in	r24, 0x06	; 6
     232:	95 ef       	ldi	r25, 0xF5	; 245
     234:	9a 95       	dec	r25
     236:	f1 f7       	brne	.-4      	; 0x234 <ds18b20_readbit+0x16>
		bit=1;

	//wait 45uS and return read value
	_delay_us(45);
	return bit;
}
     238:	85 fb       	bst	r24, 5
     23a:	88 27       	eor	r24, r24
     23c:	80 f9       	bld	r24, 0
     23e:	08 95       	ret

00000240 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	d8 2f       	mov	r29, r24
	uint8_t i=8;
	while(i--){
     246:	c9 e0       	ldi	r28, 0x09	; 9
     248:	05 c0       	rjmp	.+10     	; 0x254 <ds18b20_writebyte+0x14>
		ds18b20_writebit(byte&1);
     24a:	8d 2f       	mov	r24, r29
     24c:	81 70       	andi	r24, 0x01	; 1
     24e:	0e 94 02 01 	call	0x204	; 0x204 <ds18b20_writebit>
		byte >>= 1;
     252:	d6 95       	lsr	r29
     254:	c1 50       	subi	r28, 0x01	; 1
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
     256:	c9 f7       	brne	.-14     	; 0x24a <ds18b20_writebyte+0xa>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	uint8_t i=8, n=0;
	while(i--){
     262:	d9 e0       	ldi	r29, 0x09	; 9

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
     264:	c0 e0       	ldi	r28, 0x00	; 0
	while(i--){
     266:	08 c0       	rjmp	.+16     	; 0x278 <ds18b20_readbyte+0x1a>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
     268:	0e 94 0f 01 	call	0x21e	; 0x21e <ds18b20_readbit>
     26c:	20 e8       	ldi	r18, 0x80	; 128
     26e:	82 9f       	mul	r24, r18
     270:	c0 01       	movw	r24, r0
     272:	11 24       	eor	r1, r1
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
     274:	c6 95       	lsr	r28
		n |= (ds18b20_readbit()<<7);
     276:	c8 2b       	or	r28, r24
     278:	d1 50       	subi	r29, 0x01	; 1
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
     27a:	b1 f7       	brne	.-20     	; 0x268 <ds18b20_readbyte+0xa>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
}
     27c:	8c 2f       	mov	r24, r28
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <ds18b20_gettemp>:

/*
 * get temperature
 */
double ds18b20_gettemp(void) {
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
	uint8_t temperature[2];
	int8_t digit;
	uint16_t decimal;
	double retd = 0;

	ds18b20_reset(); //reset
     292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
     296:	8c ec       	ldi	r24, 0xCC	; 204
     298:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
     29c:	84 e4       	ldi	r24, 0x44	; 68
     29e:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
     2a2:	0e 94 0f 01 	call	0x21e	; 0x21e <ds18b20_readbit>
     2a6:	88 23       	and	r24, r24
     2a8:	e1 f3       	breq	.-8      	; 0x2a2 <ds18b20_gettemp+0x1e>

	ds18b20_reset(); //reset
     2aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
     2ae:	8c ec       	ldi	r24, 0xCC	; 204
     2b0:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
     2b4:	8e eb       	ldi	r24, 0xBE	; 190
     2b6:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature[0] = ds18b20_readbyte();
     2ba:	0e 94 2f 01 	call	0x25e	; 0x25e <ds18b20_readbyte>
     2be:	c8 2f       	mov	r28, r24
	temperature[1] = ds18b20_readbyte();
     2c0:	0e 94 2f 01 	call	0x25e	; 0x25e <ds18b20_readbyte>
     2c4:	18 2f       	mov	r17, r24

	ds18b20_reset(); //reset
     2c6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ds18b20_reset>

	//store temperature integer digits
	digit = temperature[0]>>4;
     2ca:	6c 2f       	mov	r22, r28
     2cc:	62 95       	swap	r22
     2ce:	6f 70       	andi	r22, 0x0F	; 15
	digit |= (temperature[1]&0x7)<<4;

	//store temperature decimal digits
	decimal = temperature[0]&0xf;
     2d0:	cf 70       	andi	r28, 0x0F	; 15
     2d2:	d0 e0       	ldi	r29, 0x00	; 0

	ds18b20_reset(); //reset

	//store temperature integer digits
	digit = temperature[0]>>4;
	digit |= (temperature[1]&0x7)<<4;
     2d4:	17 70       	andi	r17, 0x07	; 7
     2d6:	20 e1       	ldi	r18, 0x10	; 16
     2d8:	12 9f       	mul	r17, r18
     2da:	c0 01       	movw	r24, r0
     2dc:	11 24       	eor	r1, r1
     2de:	68 2b       	or	r22, r24
	//store temperature decimal digits
	decimal = temperature[0]&0xf;
	decimal *= DS18B20_DECIMALSTEPS;

	//compose the double temperature value and return it
	retd = digit + decimal * 0.0001;
     2e0:	77 27       	eor	r23, r23
     2e2:	67 fd       	sbrc	r22, 7
     2e4:	70 95       	com	r23
     2e6:	87 2f       	mov	r24, r23
     2e8:	97 2f       	mov	r25, r23
     2ea:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
     2ee:	6b 01       	movw	r12, r22
     2f0:	7c 01       	movw	r14, r24
	digit = temperature[0]>>4;
	digit |= (temperature[1]&0x7)<<4;

	//store temperature decimal digits
	decimal = temperature[0]&0xf;
	decimal *= DS18B20_DECIMALSTEPS;
     2f2:	81 e7       	ldi	r24, 0x71	; 113
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	c8 9f       	mul	r28, r24
     2f8:	b0 01       	movw	r22, r0
     2fa:	c9 9f       	mul	r28, r25
     2fc:	70 0d       	add	r23, r0
     2fe:	d8 9f       	mul	r29, r24
     300:	70 0d       	add	r23, r0
     302:	11 24       	eor	r1, r1

	//compose the double temperature value and return it
	retd = digit + decimal * 0.0001;
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 af 14 	call	0x295e	; 0x295e <__floatunsisf>
     30c:	27 e1       	ldi	r18, 0x17	; 23
     30e:	37 eb       	ldi	r19, 0xB7	; 183
     310:	41 ed       	ldi	r20, 0xD1	; 209
     312:	58 e3       	ldi	r21, 0x38	; 56
     314:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c7 01       	movw	r24, r14
     31e:	b6 01       	movw	r22, r12
     320:	0e 94 b3 13 	call	0x2766	; 0x2766 <__addsf3>

	return retd;
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	08 95       	ret

00000334 <ioInit>:
{
    //~~~~~~~~~~~~~~~~~~******************** Pin Configuration ********************~~~~~~~~~~~~~~~~~~~~
    
    // outputs
    
    DDRD |= ( ( 1 << SW_1 ) | ( 1 << SER ) | ( 1 << SRCLK ) | ( 1 << RCLK ) | ( 1 << F_BOOST ) | ( 1 << LED ) );	// set  to "1" for output
     334:	8a b1       	in	r24, 0x0a	; 10
     336:	8c 6f       	ori	r24, 0xFC	; 252
     338:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~( ( 1 << SW_1 ) | ( 1 << SER ) | ( 1 << SRCLK ) | ( 1 << RCLK ) |( 1 << F_BOOST ) | ( 1 << LED ) );	// set the outputs low
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	83 70       	andi	r24, 0x03	; 3
     33e:	8b b9       	out	0x0b, r24	; 11
    
    
    // inputs
    
    DDRD &= ~( 1 << SW_1 );	// set pin to 0 for input
     340:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= ( 1 << SW_1 );	// enable internal pullup
     342:	5a 9a       	sbi	0x0b, 2	; 11
    
    DDRB &= ~( 1 << AC_FREQ );	// set pin to 0 for input
     344:	20 98       	cbi	0x04, 0	; 4
    PORTB |= ( 1 << AC_FREQ );	// enable internal pullup
     346:	28 9a       	sbi	0x05, 0	; 5
    
    DDRC &= ~( ( 1 << PWR_OK ) | ( 1 << HV_FEEDBACK ) | ( 1 << BATT_VOLTAGE ) | ( 1 << RECTIFIED_AC ) ); 	
     348:	87 b1       	in	r24, 0x07	; 7
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	87 b9       	out	0x07, r24	; 7
     34e:	08 95       	ret

00000350 <extInterruptInit>:

void extInterruptInit( void )
{
	//~~~~~~~~~~~~~~~~~~************** External Interrupt Configuration ************~~~~~~~~~~~~~~~~~~~~

    PCICR = 0x01; 	// Allow pin change interrupts.
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 68 00 	sts	0x0068, r24
    PCMSK0 = 0x01; 	// Enable interrupts specifically for pin PCINT0 
     356:	80 93 6b 00 	sts	0x006B, r24
     35a:	08 95       	ret

0000035c <rtcInit>:

void rtcInit( void )
{
	//~~~~~~~~~~~~~~~~~~***************** RTC Timer Configuration *****************~~~~~~~~~~~~~~~~~~~~

    OCR1AH = 0;                 // Interrupt at 1.000 kHz, 0.001 S.
     35c:	10 92 89 00 	sts	0x0089, r1
    OCR1AL = 63;                // Decimal 63, one less than 64000/1000 because 0 and top are counted.
     360:	8f e3       	ldi	r24, 0x3F	; 63
     362:	80 93 88 00 	sts	0x0088, r24
    TIMSK1 |= ( 1 << OCIE1A );  // enable OCR1A match interrupt
     366:	ef e6       	ldi	r30, 0x6F	; 111
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
    TCCR1B |= (( 1 << WGM12 ) | ( 1 << CS12 ));	// start timer, CTC mode OCR1A match, ck/div by 256 for 64000 Hz
     370:	e1 e8       	ldi	r30, 0x81	; 129
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	8c 60       	ori	r24, 0x0C	; 12
     378:	80 83       	st	Z, r24
     37a:	08 95       	ret

0000037c <adcInit>:
void adcInit( void )
{
	//~~~~~~~~~~~~~~~~~~******************** ADC Configuration ********************~~~~~~~~~~~~~~~~~~~~

  	// ADC clock prescale of 1/128 for 128 kHz
  	ADCSRA = ( ( 1 << ADEN ) | ( 1 << ADATE ) | ( 1 << ADIE ) | ( 1 << ADPS2 ) | ( 1 << ADPS1 ) | ( 1 << ADPS0 ) );
     37c:	8f ea       	ldi	r24, 0xAF	; 175
     37e:	80 93 7a 00 	sts	0x007A, r24
  	
  	ADCSRB |= (1<<ADTS2);
     382:	eb e7       	ldi	r30, 0x7B	; 123
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	80 83       	st	Z, r24
  	
  	// Disable digital input buffers to save power.
  	DIDR0 = ( ( 1 << ADC0D ) | ( 1 << ADC1D ) | ( 1 << ADC2D ) | ( 1 << ADC3D ) );
     38c:	8f e0       	ldi	r24, 0x0F	; 15
     38e:	80 93 7e 00 	sts	0x007E, r24
     392:	08 95       	ret

00000394 <boostConverterInit>:
	//~~~~~~~~~~~~~~~~~~************** Boost Converter Configuration **************~~~~~~~~~~~~~~~~~~~~

	// PWM Frequency: 64 kHz
	
	// Timer/Counter0: channel: A, clear on compare match ( non-inverting ), Fast PWM, TOP = 0xFF
	TCCR0A |= ((1<<COM0A1) | (1<<WGM01) | (1<<WGM00));
     394:	84 b5       	in	r24, 0x24	; 36
     396:	83 68       	ori	r24, 0x83	; 131
     398:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ( 1 << CS00 );	// internal clock as source, no prescale, start the timer
     39a:	85 b5       	in	r24, 0x25	; 37
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	85 bd       	out	0x25, r24	; 37
     3a0:	08 95       	ret

000003a2 <__vector_21>:
// ADC interrupt service routine.
// This is called at the completion of each ADC read cycle.
// At the end of the ISR, the next conversion is started and we exit.
// When that conversion is complete, this function is called again.
ISR(ADC_vect) 
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
static unsigned char input_index=0;

// Read the AD conversion result
   adc_raw[input_index]=ADCH;
     3b4:	80 91 05 05 	lds	r24, 0x0505
     3b8:	e8 2f       	mov	r30, r24
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	90 91 79 00 	lds	r25, 0x0079
     3c0:	e8 56       	subi	r30, 0x68	; 104
     3c2:	f9 4f       	sbci	r31, 0xF9	; 249
     3c4:	90 83       	st	Z, r25
   
// Select next ADC input
   if (++input_index >= ADC_CHANNELS)
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	18 f4       	brcc	.+6      	; 0x3d2 <__vector_21+0x30>
     3cc:	80 93 05 05 	sts	0x0505, r24
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__vector_21+0x34>
      {
      input_index=0;
     3d2:	10 92 05 05 	sts	0x0505, r1
      }

   ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE | ( 1 << ADLAR ) ) + input_index; //and left adjust
     3d6:	80 91 05 05 	lds	r24, 0x0505
     3da:	80 5a       	subi	r24, 0xA0	; 160
     3dc:	80 93 7c 00 	sts	0x007C, r24

// Start the AD conversion
   ADCSRA |= (1<<ADSC);
     3e0:	80 91 7a 00 	lds	r24, 0x007A
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 93 7a 00 	sts	0x007A, r24

} 
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <__vector_3>:
// This function will only be called so long as there is an AC input waveform.
// For that reason, we do not need to code for when we lose AC power.  We just have
// to say, if this function is called and we want to use the AC frequency as a timebase
// then increment our seconds.  In ISR( TIMER1_COMPA_vect ) we have to have a bit more logic.
ISR (PCINT0_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
	static uint8_t timebaseCounter = 0;		// For timekeeping
	
	timebaseCounter++;	// Counting AC cycles.
     40a:	80 91 06 05 	lds	r24, 0x0506
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 06 05 	sts	0x0506, r24
	
	if( acclock == 1 ){
     414:	90 91 0c 01 	lds	r25, 0x010C
     418:	91 30       	cpi	r25, 0x01	; 1
     41a:	49 f4       	brne	.+18     	; 0x42e <__vector_3+0x32>
	
		if( timebaseCounter > ( AC_HERTZ * 2 ) - 1 ){
     41c:	88 37       	cpi	r24, 0x78	; 120
     41e:	38 f0       	brcs	.+14     	; 0x42e <__vector_3+0x32>
		
			seconds++;	// Increment the main seconds counter.
     420:	80 91 10 01 	lds	r24, 0x0110
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 10 01 	sts	0x0110, r24
			
			timebaseCounter = 0;
     42a:	10 92 06 05 	sts	0x0506, r1
		}
		
	}
	
	acZeroCrossCounter++;	// For measuring the AC frequency - not used for timekeeping
     42e:	80 91 ea 04 	lds	r24, 0x04EA
     432:	90 91 eb 04 	lds	r25, 0x04EB
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	90 93 eb 04 	sts	0x04EB, r25
     43c:	80 93 ea 04 	sts	0x04EA, r24
	
}
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <toggle_led>:



void toggle_led()
{
    PORTD ^= ( 1 << LED );
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	80 58       	subi	r24, 0x80	; 128
     452:	8b b9       	out	0x0b, r24	; 11
     454:	08 95       	ret

00000456 <blip_led>:



void blip_led()
{
    PORTD |= ( 1 << LED );	// on
     456:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e3       	ldi	r25, 0x30	; 48
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <blip_led+0x6>
    _delay_ms(3);
    PORTD &= ~( 1 << LED );	// off
     460:	5f 98       	cbi	0x0b, 7	; 11
     462:	08 95       	ret

00000464 <is_switch_pressed>:


int is_switch_pressed( char port, char pin, int ms_debounce, int ms_block )
{
    
    if ( !( port & ( 1 << pin ) ) )
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <is_switch_pressed+0xa>
     46a:	35 95       	asr	r19
     46c:	27 95       	ror	r18
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <is_switch_pressed+0x6>
     472:	21 70       	andi	r18, 0x01	; 1
     474:	33 27       	eor	r19, r19
    {
        //_delay_ms( ms_debounce );
        if ( !( port & ( 1 << pin ) ) ) return 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	28 27       	eor	r18, r24
    }
    
    return 0;
}
     47a:	c9 01       	movw	r24, r18
     47c:	08 95       	ret

0000047e <splitString>:




uint32_t splitString(char aString[100])
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	c4 56       	subi	r28, 0x64	; 100
     488:	d1 09       	sbc	r29, r1
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
    
    char *splitChar;
    char subString[100];
    
    // find the equal symbol.  Var to the left, value to the right
    splitChar = strchr( aString, '=');
     494:	6d e3       	ldi	r22, 0x3D	; 61
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <strchr>
    
    strcpy(subString, splitChar + 1);
     49c:	bc 01       	movw	r22, r24
     49e:	6f 5f       	subi	r22, 0xFF	; 255
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <strcpy>
    
    return atol( subString );
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <atol>
}
     4b2:	cc 59       	subi	r28, 0x9C	; 156
     4b4:	df 4f       	sbci	r29, 0xFF	; 255
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <copy_command>:


void copy_command ()
{
    // Move a copy of uartString to myuartString
    memmove(myUartString, uartString, sizeof( myUartString ) );
     4c6:	84 e6       	ldi	r24, 0x64	; 100
     4c8:	e8 eb       	ldi	r30, 0xB8	; 184
     4ca:	f5 e0       	ldi	r31, 0x05	; 5
     4cc:	a4 e3       	ldi	r26, 0x34	; 52
     4ce:	b6 e0       	ldi	r27, 0x06	; 6
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	8a 95       	dec	r24
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <copy_command+0xa>
    // Empty the uartString.
    memset(uartString, 0, sizeof( myUartString ) );
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	e8 eb       	ldi	r30, 0xB8	; 184
     4dc:	f5 e0       	ldi	r31, 0x05	; 5
     4de:	df 01       	movw	r26, r30
     4e0:	1d 92       	st	X+, r1
     4e2:	8a 95       	dec	r24
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <copy_command+0x1a>
     4e6:	08 95       	ret

000004e8 <inRange>:




uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
	if( inputValue >= lowerBound && inputValue <= upperBound )
     4f0:	6e 15       	cp	r22, r14
     4f2:	7f 05       	cpc	r23, r15
     4f4:	80 07       	cpc	r24, r16
     4f6:	91 07       	cpc	r25, r17
     4f8:	30 f0       	brcs	.+12     	; 0x506 <inRange+0x1e>
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	26 17       	cp	r18, r22
     4fe:	37 07       	cpc	r19, r23
     500:	48 07       	cpc	r20, r24
     502:	59 07       	cpc	r21, r25
     504:	08 f4       	brcc	.+2      	; 0x508 <inRange+0x20>
	{
		return 1;
	}
	
	return 0;
     506:	e0 e0       	ldi	r30, 0x00	; 0
}
     508:	8e 2f       	mov	r24, r30
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	08 95       	ret

00000514 <print_value>:




void print_value (char *id, uint32_t value)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
     51a:	cb 01       	movw	r24, r22
     51c:	ba 01       	movw	r22, r20
    ultoa(value, printBuffer, 10);
     51e:	2a e0       	ldi	r18, 0x0A	; 10
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	44 e5       	ldi	r20, 0x54	; 84
     524:	55 e0       	ldi	r21, 0x05	; 5
     526:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ultoa>
    uart_puts(id);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(": ");
     530:	8e ed       	ldi	r24, 0xDE	; 222
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(printBuffer);
     538:	84 e5       	ldi	r24, 0x54	; 84
     53a:	95 e0       	ldi	r25, 0x05	; 5
    //uart_puts(RETURN_NEWLINE);
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
void print_value (char *id, uint32_t value)
{
    ultoa(value, printBuffer, 10);
    uart_puts(id);
    uart_puts(": ");
    uart_puts(printBuffer);
     540:	0c 94 24 13 	jmp	0x2648	; 0x2648 <uart_puts>

00000544 <print_csv>:
}



void print_csv( char *id, uint32_t value )
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	cb 01       	movw	r24, r22
     54c:	ba 01       	movw	r22, r20
    ultoa(value, printBuffer, 10);
     54e:	2a e0       	ldi	r18, 0x0A	; 10
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	44 e5       	ldi	r20, 0x54	; 84
     554:	55 e0       	ldi	r21, 0x05	; 5
     556:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ultoa>

    //uart_puts(": ");
    uart_puts(printBuffer);
     55a:	84 e5       	ldi	r24, 0x54	; 84
     55c:	95 e0       	ldi	r25, 0x05	; 5
     55e:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts(id);
     562:	ce 01       	movw	r24, r28
    //uart_puts(RETURN_NEWLINE);
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
{
    ultoa(value, printBuffer, 10);

    //uart_puts(": ");
    uart_puts(printBuffer);
        uart_puts(id);
     568:	0c 94 24 13 	jmp	0x2648	; 0x2648 <uart_puts>

0000056c <uart_ok>:



void uart_ok()
{
    uart_puts("OK");
     56c:	86 e2       	ldi	r24, 0x26	; 38
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     574:	89 e2       	ldi	r24, 0x29	; 41
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0c 94 24 13 	jmp	0x2648	; 0x2648 <uart_puts>

0000057c <uartWelcome>:


void uartWelcome( void )
{

    uart_puts("//~~~~~~~~~~~~************ Nixie Clock Instructions ************~~~~~~~~~~~~~~");
     57c:	8c e2       	ldi	r24, 0x2C	; 44
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     584:	89 e2       	ldi	r24, 0x29	; 41
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("ATMega328 Nixie Clock v1.0");
     58c:	8b e7       	ldi	r24, 0x7B	; 123
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     594:	89 e2       	ldi	r24, 0x29	; 41
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Check petemills.blogspot.com for more info");
     59c:	86 e9       	ldi	r24, 0x96	; 150
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5a4:	89 e2       	ldi	r24, 0x29	; 41
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5ac:	89 e2       	ldi	r24, 0x29	; 41
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Usage Example:");
     5b4:	81 ec       	ldi	r24, 0xC1	; 193
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5bc:	89 e2       	ldi	r24, 0x29	; 41
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Type 'HOURS=10' to set the hours to '10'.");
     5c4:	80 ed       	ldi	r24, 0xD0	; 208
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5cc:	89 e2       	ldi	r24, 0x29	; 41
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Type 'MINUTES=26' to set the minutes to '26'.");
     5d4:	8a ef       	ldi	r24, 0xFA	; 250
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5dc:	89 e2       	ldi	r24, 0x29	; 41
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Further parameter names can be found in the user manual.");
     5e4:	88 e2       	ldi	r24, 0x28	; 40
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5ec:	89 e2       	ldi	r24, 0x29	; 41
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("Visit the URL above to download a clock calibration app and user manual.");
     5f4:	81 e6       	ldi	r24, 0x61	; 97
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts(RETURN_NEWLINE);
     5fc:	89 e2       	ldi	r24, 0x29	; 41
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_puts("//~~~~~~~~~~~~************ Nixie Clock Instructions ************~~~~~~~~~~~~~~");
     604:	8c e2       	ldi	r24, 0x2C	; 44
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0c 94 24 13 	jmp	0x2648	; 0x2648 <uart_puts>

0000060c <uartInit>:



void uartInit( void )
{
        uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
     60c:	80 e1       	ldi	r24, 0x10	; 16
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <uart_init>

00000614 <serialPrintDateTime>:
void serialPrintDateTime( void )
{
    //if( isLeapYear() )
    //    uart_puts("L ");
    // Print the date in YYYY.MM.DD format
    uart_puts( itoa( year, printBuffer, 10 ) );
     614:	4a e0       	ldi	r20, 0x0A	; 10
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	64 e5       	ldi	r22, 0x54	; 84
     61a:	75 e0       	ldi	r23, 0x05	; 5
     61c:	80 91 11 01 	lds	r24, 0x0111
     620:	90 91 12 01 	lds	r25, 0x0112
     624:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     628:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_putc('-');
     62c:	8d e2       	ldi	r24, 0x2D	; 45
     62e:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
    
    uart_puts( itoa( month, printBuffer, 10 ) );
     632:	4a e0       	ldi	r20, 0x0A	; 10
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	64 e5       	ldi	r22, 0x54	; 84
     638:	75 e0       	ldi	r23, 0x05	; 5
     63a:	80 91 13 01 	lds	r24, 0x0113
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     644:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_putc('-');
     648:	8d e2       	ldi	r24, 0x2D	; 45
     64a:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
    
    uart_puts( itoa( day, printBuffer, 10 ) );
     64e:	4a e0       	ldi	r20, 0x0A	; 10
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	64 e5       	ldi	r22, 0x54	; 84
     654:	75 e0       	ldi	r23, 0x05	; 5
     656:	80 91 14 01 	lds	r24, 0x0114
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     660:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    
    uart_puts(", ");
     664:	8a ea       	ldi	r24, 0xAA	; 170
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    
    
    if( miltime == 0  && hours > 12 )
     66c:	80 91 0f 01 	lds	r24, 0x010F
     670:	81 11       	cpse	r24, r1
     672:	14 c0       	rjmp	.+40     	; 0x69c <serialPrintDateTime+0x88>
     674:	80 91 16 01 	lds	r24, 0x0116
     678:	8d 30       	cpi	r24, 0x0D	; 13
     67a:	38 f0       	brcs	.+14     	; 0x68a <serialPrintDateTime+0x76>
    {
        // Display the hours in 12 hour format.
        uart_puts( itoa( hours - 12, printBuffer, 10 ) );
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	4a e0       	ldi	r20, 0x0A	; 10
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	64 e5       	ldi	r22, 0x54	; 84
     684:	75 e0       	ldi	r23, 0x05	; 5
     686:	0c 97       	sbiw	r24, 0x0c	; 12
     688:	10 c0       	rjmp	.+32     	; 0x6aa <serialPrintDateTime+0x96>
    }
    else if( miltime == 0 && hours == 0 )
     68a:	81 11       	cpse	r24, r1
     68c:	07 c0       	rjmp	.+14     	; 0x69c <serialPrintDateTime+0x88>
    {
        // Don't display '0' hours in 12-hour format, display "12" instead.
        uart_puts( itoa( 12, printBuffer, 10 ) );
     68e:	4a e0       	ldi	r20, 0x0A	; 10
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	64 e5       	ldi	r22, 0x54	; 84
     694:	75 e0       	ldi	r23, 0x05	; 5
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <serialPrintDateTime+0x96>
    }
    else
    {
        // Otherwise, everything is cool, just print the hours.
        uart_puts( itoa( hours, printBuffer, 10 ) );
     69c:	4a e0       	ldi	r20, 0x0A	; 10
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	64 e5       	ldi	r22, 0x54	; 84
     6a2:	75 e0       	ldi	r23, 0x05	; 5
     6a4:	80 91 16 01 	lds	r24, 0x0116
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     6ae:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    }
    uart_putc(':');
     6b2:	8a e3       	ldi	r24, 0x3A	; 58
     6b4:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
        
    uart_puts( itoa( minutes, printBuffer, 10 ) );
     6b8:	4a e0       	ldi	r20, 0x0A	; 10
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	64 e5       	ldi	r22, 0x54	; 84
     6be:	75 e0       	ldi	r23, 0x05	; 5
     6c0:	80 91 15 01 	lds	r24, 0x0115
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     6ca:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    uart_putc(':');
     6ce:	8a e3       	ldi	r24, 0x3A	; 58
     6d0:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
        
    uart_puts( itoa( seconds, printBuffer, 10 ) );
     6d4:	80 91 10 01 	lds	r24, 0x0110
     6d8:	4a e0       	ldi	r20, 0x0A	; 10
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	64 e5       	ldi	r22, 0x54	; 84
     6de:	75 e0       	ldi	r23, 0x05	; 5
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
     6e6:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        
    //uart_puts(RETURN_NEWLINE);
    uart_putc( ',');
     6ea:	8c e2       	ldi	r24, 0x2C	; 44
     6ec:	0c 94 0f 13 	jmp	0x261e	; 0x261e <uart_putc>

000006f0 <isLeapYear>:



uint8_t isLeapYear( void )
{
    if( year % 4 != 0 )
     6f0:	20 91 11 01 	lds	r18, 0x0111
     6f4:	30 91 12 01 	lds	r19, 0x0112
     6f8:	c9 01       	movw	r24, r18
     6fa:	83 70       	andi	r24, 0x03	; 3
     6fc:	99 27       	eor	r25, r25
     6fe:	89 2b       	or	r24, r25
     700:	79 f4       	brne	.+30     	; 0x720 <isLeapYear+0x30>
    {
        return 0;   // not a leap year
    }
    else if( year % 100 != 0 )
     702:	c9 01       	movw	r24, r18
     704:	64 e6       	ldi	r22, 0x64	; 100
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
     70c:	89 2b       	or	r24, r25
     70e:	51 f4       	brne	.+20     	; 0x724 <isLeapYear+0x34>
    {
        return 1;   // it is a leap year
    }
    else if( year % 400 )
     710:	c9 01       	movw	r24, r18
     712:	60 e9       	ldi	r22, 0x90	; 144
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	89 2b       	or	r24, r25
     71e:	19 f0       	breq	.+6      	; 0x726 <isLeapYear+0x36>

uint8_t isLeapYear( void )
{
    if( year % 4 != 0 )
    {
        return 0;   // not a leap year
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	01 c0       	rjmp	.+2      	; 0x726 <isLeapYear+0x36>
    }
    else if( year % 100 != 0 )
    {
        return 1;   // it is a leap year
     724:	21 e0       	ldi	r18, 0x01	; 1
    }
    else
    {
        return 1;   // it is a leap year
    }
}
     726:	82 2f       	mov	r24, r18
     728:	08 95       	ret

0000072a <updateDateTime>:




void updateDateTime( void )
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2d 97       	sbiw	r28, 0x0d	; 13
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
    uint8_t numDaysInMonth[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
     73e:	8d e0       	ldi	r24, 0x0D	; 13
     740:	e7 e1       	ldi	r30, 0x17	; 23
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	de 01       	movw	r26, r28
     746:	11 96       	adiw	r26, 0x01	; 1
     748:	01 90       	ld	r0, Z+
     74a:	0d 92       	st	X+, r0
     74c:	8a 95       	dec	r24
     74e:	e1 f7       	brne	.-8      	; 0x748 <updateDateTime+0x1e>
    
    if( numDaysInMonth[2] == 28 && isLeapYear() )
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	8c 31       	cpi	r24, 0x1C	; 28
     754:	31 f4       	brne	.+12     	; 0x762 <updateDateTime+0x38>
     756:	0e 94 78 03 	call	0x6f0	; 0x6f0 <isLeapYear>
     75a:	88 23       	and	r24, r24
     75c:	31 f0       	breq	.+12     	; 0x76a <updateDateTime+0x40>
    {
        numDaysInMonth[2] = 29;
     75e:	8d e1       	ldi	r24, 0x1D	; 29
     760:	03 c0       	rjmp	.+6      	; 0x768 <updateDateTime+0x3e>
    }
    else if( numDaysInMonth[2] == 29 )
     762:	8d 31       	cpi	r24, 0x1D	; 29
     764:	11 f4       	brne	.+4      	; 0x76a <updateDateTime+0x40>
    {
        numDaysInMonth[2] = 28;
     766:	8c e1       	ldi	r24, 0x1C	; 28
     768:	8b 83       	std	Y+3, r24	; 0x03
    }
    
    
    if( seconds > 59 )
     76a:	80 91 10 01 	lds	r24, 0x0110
     76e:	8c 33       	cpi	r24, 0x3C	; 60
     770:	38 f0       	brcs	.+14     	; 0x780 <updateDateTime+0x56>
    {
        minutes++;		// increment minutes
     772:	80 91 15 01 	lds	r24, 0x0115
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	80 93 15 01 	sts	0x0115, r24
        seconds = 0;	// reset seconds
     77c:	10 92 10 01 	sts	0x0110, r1
    }
    
    if( minutes > 59 )
     780:	80 91 15 01 	lds	r24, 0x0115
     784:	8c 33       	cpi	r24, 0x3C	; 60
     786:	38 f0       	brcs	.+14     	; 0x796 <updateDateTime+0x6c>
    {
        hours++;		// increment hours
     788:	80 91 16 01 	lds	r24, 0x0116
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 16 01 	sts	0x0116, r24
        minutes = 0; 	// reset minutes
     792:	10 92 15 01 	sts	0x0115, r1
    }
    
    if( hours > 23 )
     796:	80 91 16 01 	lds	r24, 0x0116
     79a:	88 31       	cpi	r24, 0x18	; 24
     79c:	38 f0       	brcs	.+14     	; 0x7ac <updateDateTime+0x82>
    {
        day++;          // increment day
     79e:	80 91 14 01 	lds	r24, 0x0114
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	80 93 14 01 	sts	0x0114, r24
        hours = 0;		// reset hours
     7a8:	10 92 16 01 	sts	0x0116, r1
    }
    
    if( day > numDaysInMonth[ month ] )
     7ac:	80 91 13 01 	lds	r24, 0x0113
     7b0:	fe 01       	movw	r30, r28
     7b2:	e8 0f       	add	r30, r24
     7b4:	f1 1d       	adc	r31, r1
     7b6:	20 91 14 01 	lds	r18, 0x0114
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	92 17       	cp	r25, r18
     7be:	30 f4       	brcc	.+12     	; 0x7cc <updateDateTime+0xa2>
    {
        month++;        // increment the month
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	80 93 13 01 	sts	0x0113, r24
        day = 1;        // reset the day counter to the first
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 14 01 	sts	0x0114, r24
    }
    
    if( month > 12 )
     7cc:	80 91 13 01 	lds	r24, 0x0113
     7d0:	8d 30       	cpi	r24, 0x0D	; 13
     7d2:	60 f0       	brcs	.+24     	; 0x7ec <updateDateTime+0xc2>
    {
        year++;         // increment the year
     7d4:	80 91 11 01 	lds	r24, 0x0111
     7d8:	90 91 12 01 	lds	r25, 0x0112
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	90 93 12 01 	sts	0x0112, r25
     7e2:	80 93 11 01 	sts	0x0111, r24
        month = 1;      // reset the month to january
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 13 01 	sts	0x0113, r24
    }
    
    
}
     7ec:	2d 96       	adiw	r28, 0x0d	; 13
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <dayOfWeek>:




uint8_t dayOfWeek(uint8_t day, uint8_t month, uint16_t year)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	d8 2f       	mov	r29, r24
     804:	c6 2f       	mov	r28, r22
     806:	fa 01       	movw	r30, r20
   // http://en.wikipedia.org/wiki/Zeller%27s_congruence
   // returns 0 for monday thru 6 for sunday.
   
	if( month < 3 ){
     808:	63 30       	cpi	r22, 0x03	; 3
     80a:	10 f4       	brcc	.+4      	; 0x810 <dayOfWeek+0x12>
		month += 12;
     80c:	c4 5f       	subi	r28, 0xF4	; 244
		year--;
     80e:	31 97       	sbiw	r30, 0x01	; 1
   }
   return ( ( 13 * month + 3 ) / 5 + day + year + ( year / 4 ) - ( year / 100 ) + ( year / 400 ) ) % 7;
     810:	9f 01       	movw	r18, r30
     812:	36 95       	lsr	r19
     814:	27 95       	ror	r18
     816:	36 95       	lsr	r19
     818:	27 95       	ror	r18
     81a:	cf 01       	movw	r24, r30
     81c:	60 e9       	ldi	r22, 0x90	; 144
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
     824:	26 0f       	add	r18, r22
     826:	37 1f       	adc	r19, r23
     828:	2e 0f       	add	r18, r30
     82a:	3f 1f       	adc	r19, r31
     82c:	cf 01       	movw	r24, r30
     82e:	64 e6       	ldi	r22, 0x64	; 100
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
     836:	26 1b       	sub	r18, r22
     838:	37 0b       	sbc	r19, r23
     83a:	4d e0       	ldi	r20, 0x0D	; 13
     83c:	c4 9f       	mul	r28, r20
     83e:	c0 01       	movw	r24, r0
     840:	11 24       	eor	r1, r1
     842:	03 96       	adiw	r24, 0x03	; 3
     844:	65 e0       	ldi	r22, 0x05	; 5
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__divmodhi4>
     84c:	6d 0f       	add	r22, r29
     84e:	71 1d       	adc	r23, r1
     850:	26 0f       	add	r18, r22
     852:	37 1f       	adc	r19, r23
     854:	c9 01       	movw	r24, r18
     856:	67 e0       	ldi	r22, 0x07	; 7
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <readTemperature>:



double readTemperature( void )
{
    celsiusTemperature = ds18b20_gettemp();
     864:	0e 94 42 01 	call	0x284	; 0x284 <ds18b20_gettemp>
     868:	9b 01       	movw	r18, r22
     86a:	46 2f       	mov	r20, r22
     86c:	53 2f       	mov	r21, r19
     86e:	68 2f       	mov	r22, r24
     870:	79 2f       	mov	r23, r25
     872:	40 93 06 01 	sts	0x0106, r20
     876:	50 93 07 01 	sts	0x0107, r21
     87a:	60 93 08 01 	sts	0x0108, r22
     87e:	70 93 09 01 	sts	0x0109, r23
    
    return celsiusTemperature;
}
     882:	62 2f       	mov	r22, r18
     884:	73 2f       	mov	r23, r19
     886:	08 95       	ret

00000888 <updateBoostConverter>:
    // 5 v / 8 bits = ~0.019685 V/count, or 50.8 counts/V
    
    // ex. 50 V on the boost converter is 0.5 V to the ADC.  0.5 V in counts is 25.4
    //    175 V on the boost converter is 1.75V to the ADC.  1.75V in counts is 88.9
    
    uint16_t myVoltage = adc_raw[1];	// HV_FEEDBACK
     888:	80 91 99 06 	lds	r24, 0x0699
    
	if( myVoltage > 89 )
     88c:	8a 35       	cpi	r24, 0x5A	; 90
     88e:	18 f0       	brcs	.+6      	; 0x896 <updateBoostConverter+0xe>
	{
		boostConverterPwm = boostLowPwm;
     890:	80 91 00 01 	lds	r24, 0x0100
     894:	02 c0       	rjmp	.+4      	; 0x89a <updateBoostConverter+0x12>
		//boostConverterPwm--;
	}
	else 
	{
		boostConverterPwm = boostHighPwm;
     896:	80 91 01 01 	lds	r24, 0x0101
     89a:	80 93 ec 04 	sts	0x04EC, r24
		//boostConverterPwm++;
	}
	
	OCR0A = boostConverterPwm;        
     89e:	80 91 ec 04 	lds	r24, 0x04EC
     8a2:	87 bd       	out	0x27, r24	; 39
     8a4:	08 95       	ret

000008a6 <updateTemperatureFilter>:




void updateTemperatureFilter( uint8_t moduloSeconds )
{
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	68 2f       	mov	r22, r24
	if( seconds % moduloSeconds == 0 )
     8b0:	80 91 10 01 	lds	r24, 0x0110
     8b4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
     8b8:	91 11       	cpse	r25, r1
     8ba:	54 c0       	rjmp	.+168    	; 0x964 <__stack+0x65>
     8bc:	0c e1       	ldi	r16, 0x1C	; 28
     8be:	16 e0       	ldi	r17, 0x06	; 6
     8c0:	c0 e0       	ldi	r28, 0x00	; 0
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
            
        // FIR
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
        {
            if( i < TEMPERATURE_ARRAY_SIZE - 1 )
     8c4:	c5 30       	cpi	r28, 0x05	; 5
     8c6:	d1 05       	cpc	r29, r1
     8c8:	51 f0       	breq	.+20     	; 0x8de <updateTemperatureFilter+0x38>
            {
                movingAverageArray[ i ] = movingAverageArray[ i + 1 ];
     8ca:	f8 01       	movw	r30, r16
     8cc:	84 81       	ldd	r24, Z+4	; 0x04
     8ce:	95 81       	ldd	r25, Z+5	; 0x05
     8d0:	a6 81       	ldd	r26, Z+6	; 0x06
     8d2:	b7 81       	ldd	r27, Z+7	; 0x07
     8d4:	80 83       	st	Z, r24
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	a2 83       	std	Z+2, r26	; 0x02
     8da:	b3 83       	std	Z+3, r27	; 0x03
     8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <updateTemperatureFilter+0x4c>
            }
            else
            {
                movingAverageArray[ i ] = readTemperature();
     8de:	0e 94 32 04 	call	0x864	; 0x864 <readTemperature>
     8e2:	60 93 30 06 	sts	0x0630, r22
     8e6:	70 93 31 06 	sts	0x0631, r23
     8ea:	80 93 32 06 	sts	0x0632, r24
     8ee:	90 93 33 06 	sts	0x0633, r25
	if( seconds % moduloSeconds == 0 )
    {
            
        // FIR
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
     8f2:	21 96       	adiw	r28, 0x01	; 1
     8f4:	0c 5f       	subi	r16, 0xFC	; 252
     8f6:	1f 4f       	sbci	r17, 0xFF	; 255
     8f8:	c6 30       	cpi	r28, 0x06	; 6
     8fa:	d1 05       	cpc	r29, r1
     8fc:	19 f7       	brne	.-58     	; 0x8c4 <updateTemperatureFilter+0x1e>
     8fe:	cc e1       	ldi	r28, 0x1C	; 28
     900:	d6 e0       	ldi	r29, 0x06	; 6





void updateTemperatureFilter( uint8_t moduloSeconds )
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
            
        arraySum = 0;
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
        {
            arraySum += movingAverageArray[ i ];
     90a:	29 91       	ld	r18, Y+
     90c:	39 91       	ld	r19, Y+
     90e:	49 91       	ld	r20, Y+
     910:	59 91       	ld	r21, Y+
     912:	0f 2f       	mov	r16, r31
     914:	1e 2f       	mov	r17, r30
     916:	b8 01       	movw	r22, r16
     918:	0e 94 b3 13 	call	0x2766	; 0x2766 <__addsf3>
     91c:	f6 2f       	mov	r31, r22
     91e:	e7 2f       	mov	r30, r23
                
        }
            
        arraySum = 0;
            
        for( int i = 0; i < TEMPERATURE_ARRAY_SIZE; i++ )
     920:	26 e0       	ldi	r18, 0x06	; 6
     922:	c4 33       	cpi	r28, 0x34	; 52
     924:	d2 07       	cpc	r29, r18
     926:	89 f7       	brne	.-30     	; 0x90a <__stack+0xb>
     928:	df 01       	movw	r26, r30
     92a:	4b 2f       	mov	r20, r27
     92c:	5a 2f       	mov	r21, r26
     92e:	68 2f       	mov	r22, r24
     930:	79 2f       	mov	r23, r25
     932:	40 93 ed 04 	sts	0x04ED, r20
     936:	50 93 ee 04 	sts	0x04EE, r21
     93a:	60 93 ef 04 	sts	0x04EF, r22
     93e:	70 93 f0 04 	sts	0x04F0, r23
        {
            arraySum += movingAverageArray[ i ];
        }
            
		averageCelsiusTemperature = arraySum / TEMPERATURE_ARRAY_SIZE;       
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 ec       	ldi	r20, 0xC0	; 192
     948:	50 e4       	ldi	r21, 0x40	; 64
     94a:	ef 01       	movw	r28, r30
     94c:	6d 2f       	mov	r22, r29
     94e:	7c 2f       	mov	r23, r28
     950:	0e 94 1b 14 	call	0x2836	; 0x2836 <__divsf3>
     954:	60 93 02 01 	sts	0x0102, r22
     958:	70 93 03 01 	sts	0x0103, r23
     95c:	80 93 04 01 	sts	0x0104, r24
     960:	90 93 05 01 	sts	0x0105, r25
    }
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <serialPrintTemperature>:




void serialPrintTemperature( void )
{
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
	if( celsius == 1 )
     972:	80 91 0e 01 	lds	r24, 0x010E
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	49 f4       	brne	.+18     	; 0x98c <serialPrintTemperature+0x1e>
        {
            //dtostrf(readTemperature(), 10, 3, printBuffer);
            dtostrf(averageCelsiusTemperature, 10, 3, printBuffer);
     97a:	60 91 02 01 	lds	r22, 0x0102
     97e:	70 91 03 01 	lds	r23, 0x0103
     982:	80 91 04 01 	lds	r24, 0x0104
     986:	90 91 05 01 	lds	r25, 0x0105
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <serialPrintTemperature+0x46>
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
        }
        else
        {
            //double tempF = ( readTemperature() * 1.8 ) + 32;
            double tempF = ( averageCelsiusTemperature * 1.8 ) + 32;
     98c:	26 e6       	ldi	r18, 0x66	; 102
     98e:	36 e6       	ldi	r19, 0x66	; 102
     990:	46 ee       	ldi	r20, 0xE6	; 230
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	60 91 02 01 	lds	r22, 0x0102
     998:	70 91 03 01 	lds	r23, 0x0103
     99c:	80 91 04 01 	lds	r24, 0x0104
     9a0:	90 91 05 01 	lds	r25, 0x0105
     9a4:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	0e 94 b3 13 	call	0x2766	; 0x2766 <__addsf3>
            dtostrf(tempF , 10, 3, printBuffer);
     9b4:	04 e5       	ldi	r16, 0x54	; 84
     9b6:	15 e0       	ldi	r17, 0x05	; 5
     9b8:	23 e0       	ldi	r18, 0x03	; 3
     9ba:	4a e0       	ldi	r20, 0x0A	; 10
     9bc:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
            //uart_puts(", Temperature: ");
            //uart_putc(',');
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
     9c0:	c8 01       	movw	r24, r16
     9c2:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    }
    
    uart_putc( ',');
     9c6:	8c e2       	ldi	r24, 0x2C	; 44
}
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
            //uart_puts(", Temperature: ");
            //uart_putc(',');
            uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
    }
    
    uart_putc( ',');
     9cc:	0c 94 0f 13 	jmp	0x261e	; 0x261e <uart_putc>

000009d0 <serialPrintAcFrequency>:




void serialPrintAcFrequency( void )
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
	dtostrf(acFrequency, 10, 3, printBuffer);
     9d4:	60 91 e4 04 	lds	r22, 0x04E4
     9d8:	70 91 e5 04 	lds	r23, 0x04E5
     9dc:	80 91 e6 04 	lds	r24, 0x04E6
     9e0:	90 91 e7 04 	lds	r25, 0x04E7
     9e4:	04 e5       	ldi	r16, 0x54	; 84
     9e6:	15 e0       	ldi	r17, 0x05	; 5
     9e8:	23 e0       	ldi	r18, 0x03	; 3
     9ea:	4a e0       	ldi	r20, 0x0A	; 10
     9ec:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
	uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
	uart_putc( ',');	
     9f6:	8c e2       	ldi	r24, 0x2C	; 44
}
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16

void serialPrintAcFrequency( void )
{
	dtostrf(acFrequency, 10, 3, printBuffer);
	uart_puts(printBuffer); //uart_puts( RETURN_NEWLINE );
	uart_putc( ',');	
     9fc:	0c 94 0f 13 	jmp	0x261e	; 0x261e <uart_putc>

00000a00 <readEepromToVars>:


void readEepromToVars( void )
{
	
	mscal = eeprom_read_dword( &ee_mscal );	
     a00:	81 e1       	ldi	r24, 0x11	; 17
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__eerd_dword_m328p>
     a08:	60 93 fe 04 	sts	0x04FE, r22
     a0c:	70 93 ff 04 	sts	0x04FF, r23
     a10:	80 93 00 05 	sts	0x0500, r24
     a14:	90 93 01 05 	sts	0x0501, r25
	nixiesleepstart = eeprom_read_dword( &ee_nixiesleepstart );
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__eerd_dword_m328p>
     a20:	60 93 f5 04 	sts	0x04F5, r22
     a24:	70 93 f6 04 	sts	0x04F6, r23
     a28:	80 93 f7 04 	sts	0x04F7, r24
     a2c:	90 93 f8 04 	sts	0x04F8, r25
	nixiesleepend = eeprom_read_dword( &ee_nixiesleepend );
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__eerd_dword_m328p>
     a38:	60 93 f1 04 	sts	0x04F1, r22
     a3c:	70 93 f2 04 	sts	0x04F2, r23
     a40:	80 93 f3 04 	sts	0x04F3, r24
     a44:	90 93 f4 04 	sts	0x04F4, r25
	
	miltime = eeprom_read_byte( &ee_miltime );
     a48:	80 e1       	ldi	r24, 0x10	; 16
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a50:	80 93 0f 01 	sts	0x010F, r24
	showtherm = eeprom_read_byte( &ee_showtherm );
     a54:	8f e0       	ldi	r24, 0x0F	; 15
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a5c:	80 93 fb 04 	sts	0x04FB, r24
	showfreq = eeprom_read_byte( &ee_showfreq );
     a60:	8e e0       	ldi	r24, 0x0E	; 14
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a68:	80 93 fa 04 	sts	0x04FA, r24
	showdate = eeprom_read_byte( &ee_showdate );
     a6c:	8d e0       	ldi	r24, 0x0D	; 13
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a74:	80 93 f9 04 	sts	0x04F9, r24
	celsius = eeprom_read_byte( &ee_celsius );
     a78:	8c e0       	ldi	r24, 0x0C	; 12
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a80:	80 93 0e 01 	sts	0x010E, r24
	doecho = eeprom_read_byte( &ee_doecho );
     a84:	8b e0       	ldi	r24, 0x0B	; 11
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a8c:	80 93 0d 01 	sts	0x010D, r24
	acclock = eeprom_read_byte( &ee_acclock );
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     a98:	80 93 0c 01 	sts	0x010C, r24
	xtalisfast = eeprom_read_byte( &ee_xtalisfast );
     a9c:	89 e0       	ldi	r24, 0x09	; 9
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     aa4:	80 93 0b 01 	sts	0x010B, r24
	toggleled = eeprom_read_byte( &ee_toggleled );
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__eerd_byte_m328p>
     ab0:	80 93 0a 01 	sts	0x010A, r24
     ab4:	08 95       	ret

00000ab6 <updateVarsToEeprom>:

// Update will only write data to eeprom if the new value is different from the stored value.
void updateVarsToEeprom( void )
{

	eeprom_update_dword( &ee_mscal, mscal );
     ab6:	40 91 fe 04 	lds	r20, 0x04FE
     aba:	50 91 ff 04 	lds	r21, 0x04FF
     abe:	60 91 00 05 	lds	r22, 0x0500
     ac2:	70 91 01 05 	lds	r23, 0x0501
     ac6:	81 e1       	ldi	r24, 0x11	; 17
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__eeupd_dword_m328p>
	eeprom_update_dword( &ee_nixiesleepstart, nixiesleepstart );
     ace:	40 91 f5 04 	lds	r20, 0x04F5
     ad2:	50 91 f6 04 	lds	r21, 0x04F6
     ad6:	60 91 f7 04 	lds	r22, 0x04F7
     ada:	70 91 f8 04 	lds	r23, 0x04F8
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__eeupd_dword_m328p>
	eeprom_update_dword( &ee_nixiesleepend, nixiesleepend );
     ae6:	40 91 f1 04 	lds	r20, 0x04F1
     aea:	50 91 f2 04 	lds	r21, 0x04F2
     aee:	60 91 f3 04 	lds	r22, 0x04F3
     af2:	70 91 f4 04 	lds	r23, 0x04F4
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__eeupd_dword_m328p>
	
	eeprom_update_byte( &ee_miltime, miltime );
     afe:	60 91 0f 01 	lds	r22, 0x010F
     b02:	80 e1       	ldi	r24, 0x10	; 16
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showtherm, showtherm );
     b0a:	60 91 fb 04 	lds	r22, 0x04FB
     b0e:	8f e0       	ldi	r24, 0x0F	; 15
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showfreq, showfreq );
     b16:	60 91 fa 04 	lds	r22, 0x04FA
     b1a:	8e e0       	ldi	r24, 0x0E	; 14
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_showdate, showdate );
     b22:	60 91 f9 04 	lds	r22, 0x04F9
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_celsius, celsius );
     b2e:	60 91 0e 01 	lds	r22, 0x010E
     b32:	8c e0       	ldi	r24, 0x0C	; 12
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_doecho, doecho );
     b3a:	60 91 0d 01 	lds	r22, 0x010D
     b3e:	8b e0       	ldi	r24, 0x0B	; 11
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_acclock, acclock );
     b46:	60 91 0c 01 	lds	r22, 0x010C
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_xtalisfast, xtalisfast );
     b52:	60 91 0b 01 	lds	r22, 0x010B
     b56:	89 e0       	ldi	r24, 0x09	; 9
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
	eeprom_update_byte( &ee_toggleled, toggleled );
     b5e:	60 91 0a 01 	lds	r22, 0x010A
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__eeupd_byte_m328p>

00000b6a <process_command>:




void process_command()
{
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
    if(strcasestr(myUartString,"hours") != NULL){
     b76:	6d ea       	ldi	r22, 0xAD	; 173
     b78:	72 e0       	ldi	r23, 0x02	; 2
     b7a:	84 e3       	ldi	r24, 0x34	; 52
     b7c:	96 e0       	ldi	r25, 0x06	; 6
     b7e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     b82:	89 2b       	or	r24, r25
     b84:	21 f1       	breq	.+72     	; 0xbce <process_command+0x64>
        if(strcasestr(myUartString,"?") != NULL){
     b86:	6a e2       	ldi	r22, 0x2A	; 42
     b88:	74 e0       	ldi	r23, 0x04	; 4
     b8a:	84 e3       	ldi	r24, 0x34	; 52
     b8c:	96 e0       	ldi	r25, 0x06	; 6
     b8e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     b92:	89 2b       	or	r24, r25
     b94:	41 f0       	breq	.+16     	; 0xba6 <process_command+0x3c>
            print_value("Hours", hours);
     b96:	40 91 16 01 	lds	r20, 0x0116
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	83 eb       	ldi	r24, 0xB3	; 179
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	ed c1       	rjmp	.+986    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     ba6:	69 eb       	ldi	r22, 0xB9	; 185
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	84 e3       	ldi	r24, 0x34	; 52
     bac:	96 e0       	ldi	r25, 0x06	; 6
     bae:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     bb2:	89 2b       	or	r24, r25
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <process_command+0x4e>
     bb6:	72 c7       	rjmp	.+3812   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 23, 0 ) )
     bb8:	84 e3       	ldi	r24, 0x34	; 52
     bba:	96 e0       	ldi	r25, 0x06	; 6
     bbc:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     bc0:	68 31       	cpi	r22, 0x18	; 24
     bc2:	71 05       	cpc	r23, r1
     bc4:	81 05       	cpc	r24, r1
     bc6:	91 05       	cpc	r25, r1
     bc8:	08 f4       	brcc	.+2      	; 0xbcc <process_command+0x62>
     bca:	72 c7       	rjmp	.+3812   	; 0x1ab0 <process_command+0xf46>
     bcc:	67 c7       	rjmp	.+3790   	; 0x1a9c <process_command+0xf32>
            		hours = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"minutes") != NULL){
     bce:	6b eb       	ldi	r22, 0xBB	; 187
     bd0:	72 e0       	ldi	r23, 0x02	; 2
     bd2:	84 e3       	ldi	r24, 0x34	; 52
     bd4:	96 e0       	ldi	r25, 0x06	; 6
     bd6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     bda:	89 2b       	or	r24, r25
     bdc:	21 f1       	breq	.+72     	; 0xc26 <process_command+0xbc>
        if(strcasestr(myUartString,"?") != NULL){
     bde:	6a e2       	ldi	r22, 0x2A	; 42
     be0:	74 e0       	ldi	r23, 0x04	; 4
     be2:	84 e3       	ldi	r24, 0x34	; 52
     be4:	96 e0       	ldi	r25, 0x06	; 6
     be6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     bea:	89 2b       	or	r24, r25
     bec:	41 f0       	breq	.+16     	; 0xbfe <process_command+0x94>
            print_value("Minutes", minutes);
     bee:	40 91 15 01 	lds	r20, 0x0115
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	83 ec       	ldi	r24, 0xC3	; 195
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	c1 c1       	rjmp	.+898    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     bfe:	69 eb       	ldi	r22, 0xB9	; 185
     c00:	72 e0       	ldi	r23, 0x02	; 2
     c02:	84 e3       	ldi	r24, 0x34	; 52
     c04:	96 e0       	ldi	r25, 0x06	; 6
     c06:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c0a:	89 2b       	or	r24, r25
     c0c:	09 f4       	brne	.+2      	; 0xc10 <process_command+0xa6>
     c0e:	46 c7       	rjmp	.+3724   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 59, 0 ) )
     c10:	84 e3       	ldi	r24, 0x34	; 52
     c12:	96 e0       	ldi	r25, 0x06	; 6
     c14:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     c18:	6c 33       	cpi	r22, 0x3C	; 60
     c1a:	71 05       	cpc	r23, r1
     c1c:	81 05       	cpc	r24, r1
     c1e:	91 05       	cpc	r25, r1
     c20:	08 f4       	brcc	.+2      	; 0xc24 <process_command+0xba>
     c22:	4d c7       	rjmp	.+3738   	; 0x1abe <process_command+0xf54>
     c24:	3b c7       	rjmp	.+3702   	; 0x1a9c <process_command+0xf32>
            		minutes = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"seconds") != NULL){
     c26:	6b ec       	ldi	r22, 0xCB	; 203
     c28:	72 e0       	ldi	r23, 0x02	; 2
     c2a:	84 e3       	ldi	r24, 0x34	; 52
     c2c:	96 e0       	ldi	r25, 0x06	; 6
     c2e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c32:	89 2b       	or	r24, r25
     c34:	21 f1       	breq	.+72     	; 0xc7e <process_command+0x114>
        if(strcasestr(myUartString,"?") != NULL){
     c36:	6a e2       	ldi	r22, 0x2A	; 42
     c38:	74 e0       	ldi	r23, 0x04	; 4
     c3a:	84 e3       	ldi	r24, 0x34	; 52
     c3c:	96 e0       	ldi	r25, 0x06	; 6
     c3e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c42:	89 2b       	or	r24, r25
     c44:	41 f0       	breq	.+16     	; 0xc56 <process_command+0xec>
            print_value("Seconds", seconds);
     c46:	40 91 10 01 	lds	r20, 0x0110
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	83 ed       	ldi	r24, 0xD3	; 211
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	95 c1       	rjmp	.+810    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     c56:	69 eb       	ldi	r22, 0xB9	; 185
     c58:	72 e0       	ldi	r23, 0x02	; 2
     c5a:	84 e3       	ldi	r24, 0x34	; 52
     c5c:	96 e0       	ldi	r25, 0x06	; 6
     c5e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c62:	89 2b       	or	r24, r25
     c64:	09 f4       	brne	.+2      	; 0xc68 <process_command+0xfe>
     c66:	1a c7       	rjmp	.+3636   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 59, 0 ) )
     c68:	84 e3       	ldi	r24, 0x34	; 52
     c6a:	96 e0       	ldi	r25, 0x06	; 6
     c6c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     c70:	6c 33       	cpi	r22, 0x3C	; 60
     c72:	71 05       	cpc	r23, r1
     c74:	81 05       	cpc	r24, r1
     c76:	91 05       	cpc	r25, r1
     c78:	08 f4       	brcc	.+2      	; 0xc7c <process_command+0x112>
     c7a:	28 c7       	rjmp	.+3664   	; 0x1acc <process_command+0xf62>
     c7c:	0f c7       	rjmp	.+3614   	; 0x1a9c <process_command+0xf32>
            		seconds = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"mscal") != NULL){
     c7e:	6b ed       	ldi	r22, 0xDB	; 219
     c80:	72 e0       	ldi	r23, 0x02	; 2
     c82:	84 e3       	ldi	r24, 0x34	; 52
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c8a:	89 2b       	or	r24, r25
     c8c:	69 f1       	breq	.+90     	; 0xce8 <process_command+0x17e>
        if(strcasestr(myUartString,"?") != NULL){
     c8e:	6a e2       	ldi	r22, 0x2A	; 42
     c90:	74 e0       	ldi	r23, 0x04	; 4
     c92:	84 e3       	ldi	r24, 0x34	; 52
     c94:	96 e0       	ldi	r25, 0x06	; 6
     c96:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     c9a:	89 2b       	or	r24, r25
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <process_command+0x14a>
            print_value("mS Calibration", mscal);
     c9e:	40 91 fe 04 	lds	r20, 0x04FE
     ca2:	50 91 ff 04 	lds	r21, 0x04FF
     ca6:	60 91 00 05 	lds	r22, 0x0500
     caa:	70 91 01 05 	lds	r23, 0x0501
     cae:	81 ee       	ldi	r24, 0xE1	; 225
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	66 c1       	rjmp	.+716    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     cb4:	69 eb       	ldi	r22, 0xB9	; 185
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	84 e3       	ldi	r24, 0x34	; 52
     cba:	96 e0       	ldi	r25, 0x06	; 6
     cbc:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     cc0:	89 2b       	or	r24, r25
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <process_command+0x15c>
     cc4:	eb c6       	rjmp	.+3542   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 4294967295, 0 ) )
     cc6:	84 e3       	ldi	r24, 0x34	; 52
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
            		mscal = splitString(myUartString);
     cce:	84 e3       	ldi	r24, 0x34	; 52
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
     cd6:	60 93 fe 04 	sts	0x04FE, r22
     cda:	70 93 ff 04 	sts	0x04FF, r23
     cde:	80 93 00 05 	sts	0x0500, r24
     ce2:	90 93 01 05 	sts	0x0501, r25
     ce6:	da c6       	rjmp	.+3508   	; 0x1a9c <process_command+0xf32>
            }
        }
    }
    
    else if(strcasestr(myUartString,"miltime") != NULL){
     ce8:	60 ef       	ldi	r22, 0xF0	; 240
     cea:	72 e0       	ldi	r23, 0x02	; 2
     cec:	84 e3       	ldi	r24, 0x34	; 52
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     cf4:	89 2b       	or	r24, r25
     cf6:	21 f1       	breq	.+72     	; 0xd40 <process_command+0x1d6>
        if(strcasestr(myUartString,"?") != NULL){
     cf8:	6a e2       	ldi	r22, 0x2A	; 42
     cfa:	74 e0       	ldi	r23, 0x04	; 4
     cfc:	84 e3       	ldi	r24, 0x34	; 52
     cfe:	96 e0       	ldi	r25, 0x06	; 6
     d00:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     d04:	89 2b       	or	r24, r25
     d06:	41 f0       	breq	.+16     	; 0xd18 <process_command+0x1ae>
            print_value("MIL Time", miltime);
     d08:	40 91 0f 01 	lds	r20, 0x010F
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	88 ef       	ldi	r24, 0xF8	; 248
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	34 c1       	rjmp	.+616    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     d18:	69 eb       	ldi	r22, 0xB9	; 185
     d1a:	72 e0       	ldi	r23, 0x02	; 2
     d1c:	84 e3       	ldi	r24, 0x34	; 52
     d1e:	96 e0       	ldi	r25, 0x06	; 6
     d20:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     d24:	89 2b       	or	r24, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <process_command+0x1c0>
     d28:	b9 c6       	rjmp	.+3442   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     d2a:	84 e3       	ldi	r24, 0x34	; 52
     d2c:	96 e0       	ldi	r25, 0x06	; 6
     d2e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     d32:	62 30       	cpi	r22, 0x02	; 2
     d34:	71 05       	cpc	r23, r1
     d36:	81 05       	cpc	r24, r1
     d38:	91 05       	cpc	r25, r1
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <process_command+0x1d4>
     d3c:	af c6       	rjmp	.+3422   	; 0x1a9c <process_command+0xf32>
     d3e:	cd c6       	rjmp	.+3482   	; 0x1ada <process_command+0xf70>
            		miltime = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"year") != NULL){
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	73 e0       	ldi	r23, 0x03	; 3
     d44:	84 e3       	ldi	r24, 0x34	; 52
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     d4c:	89 2b       	or	r24, r25
     d4e:	29 f1       	breq	.+74     	; 0xd9a <process_command+0x230>
        if(strcasestr(myUartString,"?") != NULL){
     d50:	6a e2       	ldi	r22, 0x2A	; 42
     d52:	74 e0       	ldi	r23, 0x04	; 4
     d54:	84 e3       	ldi	r24, 0x34	; 52
     d56:	96 e0       	ldi	r25, 0x06	; 6
     d58:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     d5c:	89 2b       	or	r24, r25
     d5e:	49 f0       	breq	.+18     	; 0xd72 <process_command+0x208>
            print_value("Year", year);
     d60:	40 91 11 01 	lds	r20, 0x0111
     d64:	50 91 12 01 	lds	r21, 0x0112
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	86 e0       	ldi	r24, 0x06	; 6
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	07 c1       	rjmp	.+526    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     d72:	69 eb       	ldi	r22, 0xB9	; 185
     d74:	72 e0       	ldi	r23, 0x02	; 2
     d76:	84 e3       	ldi	r24, 0x34	; 52
     d78:	96 e0       	ldi	r25, 0x06	; 6
     d7a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     d7e:	89 2b       	or	r24, r25
     d80:	09 f4       	brne	.+2      	; 0xd84 <process_command+0x21a>
     d82:	8c c6       	rjmp	.+3352   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 2525, 0 ) )
     d84:	84 e3       	ldi	r24, 0x34	; 52
     d86:	96 e0       	ldi	r25, 0x06	; 6
     d88:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     d8c:	6e 3d       	cpi	r22, 0xDE	; 222
     d8e:	79 40       	sbci	r23, 0x09	; 9
     d90:	81 05       	cpc	r24, r1
     d92:	91 05       	cpc	r25, r1
     d94:	08 f4       	brcc	.+2      	; 0xd98 <process_command+0x22e>
     d96:	a8 c6       	rjmp	.+3408   	; 0x1ae8 <process_command+0xf7e>
     d98:	81 c6       	rjmp	.+3330   	; 0x1a9c <process_command+0xf32>
            		year = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"month") != NULL){
     d9a:	6b e0       	ldi	r22, 0x0B	; 11
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	84 e3       	ldi	r24, 0x34	; 52
     da0:	96 e0       	ldi	r25, 0x06	; 6
     da2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     da6:	89 2b       	or	r24, r25
     da8:	21 f1       	breq	.+72     	; 0xdf2 <process_command+0x288>
        if(strcasestr(myUartString,"?") != NULL){
     daa:	6a e2       	ldi	r22, 0x2A	; 42
     dac:	74 e0       	ldi	r23, 0x04	; 4
     dae:	84 e3       	ldi	r24, 0x34	; 52
     db0:	96 e0       	ldi	r25, 0x06	; 6
     db2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     db6:	89 2b       	or	r24, r25
     db8:	41 f0       	breq	.+16     	; 0xdca <process_command+0x260>
            print_value("Month", month);
     dba:	40 91 13 01 	lds	r20, 0x0113
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	81 e1       	ldi	r24, 0x11	; 17
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	db c0       	rjmp	.+438    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     dca:	69 eb       	ldi	r22, 0xB9	; 185
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	84 e3       	ldi	r24, 0x34	; 52
     dd0:	96 e0       	ldi	r25, 0x06	; 6
     dd2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     dd6:	89 2b       	or	r24, r25
     dd8:	09 f4       	brne	.+2      	; 0xddc <process_command+0x272>
     dda:	60 c6       	rjmp	.+3264   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 12, 0 ) )
     ddc:	84 e3       	ldi	r24, 0x34	; 52
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     de4:	6d 30       	cpi	r22, 0x0D	; 13
     de6:	71 05       	cpc	r23, r1
     de8:	81 05       	cpc	r24, r1
     dea:	91 05       	cpc	r25, r1
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <process_command+0x286>
     dee:	85 c6       	rjmp	.+3338   	; 0x1afa <process_command+0xf90>
     df0:	55 c6       	rjmp	.+3242   	; 0x1a9c <process_command+0xf32>
            		month = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"day") != NULL){
     df2:	67 e1       	ldi	r22, 0x17	; 23
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	84 e3       	ldi	r24, 0x34	; 52
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     dfe:	89 2b       	or	r24, r25
     e00:	21 f1       	breq	.+72     	; 0xe4a <process_command+0x2e0>
        if(strcasestr(myUartString,"?") != NULL){
     e02:	6a e2       	ldi	r22, 0x2A	; 42
     e04:	74 e0       	ldi	r23, 0x04	; 4
     e06:	84 e3       	ldi	r24, 0x34	; 52
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     e0e:	89 2b       	or	r24, r25
     e10:	41 f0       	breq	.+16     	; 0xe22 <process_command+0x2b8>
            print_value("Day", day);
     e12:	40 91 14 01 	lds	r20, 0x0114
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	8b e1       	ldi	r24, 0x1B	; 27
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	af c0       	rjmp	.+350    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     e22:	69 eb       	ldi	r22, 0xB9	; 185
     e24:	72 e0       	ldi	r23, 0x02	; 2
     e26:	84 e3       	ldi	r24, 0x34	; 52
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     e2e:	89 2b       	or	r24, r25
     e30:	09 f4       	brne	.+2      	; 0xe34 <process_command+0x2ca>
     e32:	34 c6       	rjmp	.+3176   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 31, 0 ) )
     e34:	84 e3       	ldi	r24, 0x34	; 52
     e36:	96 e0       	ldi	r25, 0x06	; 6
     e38:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     e3c:	60 32       	cpi	r22, 0x20	; 32
     e3e:	71 05       	cpc	r23, r1
     e40:	81 05       	cpc	r24, r1
     e42:	91 05       	cpc	r25, r1
     e44:	08 f4       	brcc	.+2      	; 0xe48 <process_command+0x2de>
     e46:	60 c6       	rjmp	.+3264   	; 0x1b08 <process_command+0xf9e>
     e48:	29 c6       	rjmp	.+3154   	; 0x1a9c <process_command+0xf32>
            		day = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"celsius") != NULL){
     e4a:	6f e1       	ldi	r22, 0x1F	; 31
     e4c:	73 e0       	ldi	r23, 0x03	; 3
     e4e:	84 e3       	ldi	r24, 0x34	; 52
     e50:	96 e0       	ldi	r25, 0x06	; 6
     e52:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     e56:	89 2b       	or	r24, r25
     e58:	21 f1       	breq	.+72     	; 0xea2 <process_command+0x338>
        if(strcasestr(myUartString,"?") != NULL){
     e5a:	6a e2       	ldi	r22, 0x2A	; 42
     e5c:	74 e0       	ldi	r23, 0x04	; 4
     e5e:	84 e3       	ldi	r24, 0x34	; 52
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     e66:	89 2b       	or	r24, r25
     e68:	41 f0       	breq	.+16     	; 0xe7a <process_command+0x310>
            print_value("Celsius", celsius);
     e6a:	40 91 0e 01 	lds	r20, 0x010E
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	87 e2       	ldi	r24, 0x27	; 39
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	83 c0       	rjmp	.+262    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     e7a:	69 eb       	ldi	r22, 0xB9	; 185
     e7c:	72 e0       	ldi	r23, 0x02	; 2
     e7e:	84 e3       	ldi	r24, 0x34	; 52
     e80:	96 e0       	ldi	r25, 0x06	; 6
     e82:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     e86:	89 2b       	or	r24, r25
     e88:	09 f4       	brne	.+2      	; 0xe8c <process_command+0x322>
     e8a:	08 c6       	rjmp	.+3088   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     e8c:	84 e3       	ldi	r24, 0x34	; 52
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     e94:	62 30       	cpi	r22, 0x02	; 2
     e96:	71 05       	cpc	r23, r1
     e98:	81 05       	cpc	r24, r1
     e9a:	91 05       	cpc	r25, r1
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <process_command+0x336>
     e9e:	fe c5       	rjmp	.+3068   	; 0x1a9c <process_command+0xf32>
     ea0:	3a c6       	rjmp	.+3188   	; 0x1b16 <process_command+0xfac>
            		celsius = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"doecho") != NULL){
     ea2:	6f e2       	ldi	r22, 0x2F	; 47
     ea4:	73 e0       	ldi	r23, 0x03	; 3
     ea6:	84 e3       	ldi	r24, 0x34	; 52
     ea8:	96 e0       	ldi	r25, 0x06	; 6
     eaa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     eae:	89 2b       	or	r24, r25
     eb0:	21 f1       	breq	.+72     	; 0xefa <process_command+0x390>
        if(strcasestr(myUartString,"?") != NULL){
     eb2:	6a e2       	ldi	r22, 0x2A	; 42
     eb4:	74 e0       	ldi	r23, 0x04	; 4
     eb6:	84 e3       	ldi	r24, 0x34	; 52
     eb8:	96 e0       	ldi	r25, 0x06	; 6
     eba:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     ebe:	89 2b       	or	r24, r25
     ec0:	41 f0       	breq	.+16     	; 0xed2 <process_command+0x368>
            print_value("Do Echo", doecho);
     ec2:	40 91 0d 01 	lds	r20, 0x010D
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	86 e3       	ldi	r24, 0x36	; 54
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	57 c0       	rjmp	.+174    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     ed2:	69 eb       	ldi	r22, 0xB9	; 185
     ed4:	72 e0       	ldi	r23, 0x02	; 2
     ed6:	84 e3       	ldi	r24, 0x34	; 52
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     ede:	89 2b       	or	r24, r25
     ee0:	09 f4       	brne	.+2      	; 0xee4 <process_command+0x37a>
     ee2:	dc c5       	rjmp	.+3000   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     ee4:	84 e3       	ldi	r24, 0x34	; 52
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     eec:	62 30       	cpi	r22, 0x02	; 2
     eee:	71 05       	cpc	r23, r1
     ef0:	81 05       	cpc	r24, r1
     ef2:	91 05       	cpc	r25, r1
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <process_command+0x38e>
     ef6:	d2 c5       	rjmp	.+2980   	; 0x1a9c <process_command+0xf32>
     ef8:	15 c6       	rjmp	.+3114   	; 0x1b24 <process_command+0xfba>
            		doecho = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"acclock") != NULL){
     efa:	6e e3       	ldi	r22, 0x3E	; 62
     efc:	73 e0       	ldi	r23, 0x03	; 3
     efe:	84 e3       	ldi	r24, 0x34	; 52
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f06:	89 2b       	or	r24, r25
     f08:	21 f1       	breq	.+72     	; 0xf52 <process_command+0x3e8>
        if(strcasestr(myUartString,"?") != NULL){
     f0a:	6a e2       	ldi	r22, 0x2A	; 42
     f0c:	74 e0       	ldi	r23, 0x04	; 4
     f0e:	84 e3       	ldi	r24, 0x34	; 52
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f16:	89 2b       	or	r24, r25
     f18:	41 f0       	breq	.+16     	; 0xf2a <process_command+0x3c0>
            print_value("AC Clock", acclock);
     f1a:	40 91 0c 01 	lds	r20, 0x010C
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	86 e4       	ldi	r24, 0x46	; 70
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	2b c0       	rjmp	.+86     	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     f2a:	69 eb       	ldi	r22, 0xB9	; 185
     f2c:	72 e0       	ldi	r23, 0x02	; 2
     f2e:	84 e3       	ldi	r24, 0x34	; 52
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f36:	89 2b       	or	r24, r25
     f38:	09 f4       	brne	.+2      	; 0xf3c <process_command+0x3d2>
     f3a:	b0 c5       	rjmp	.+2912   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     f3c:	84 e3       	ldi	r24, 0x34	; 52
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     f44:	62 30       	cpi	r22, 0x02	; 2
     f46:	71 05       	cpc	r23, r1
     f48:	81 05       	cpc	r24, r1
     f4a:	91 05       	cpc	r25, r1
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <process_command+0x3e6>
     f4e:	a6 c5       	rjmp	.+2892   	; 0x1a9c <process_command+0xf32>
     f50:	f0 c5       	rjmp	.+3040   	; 0x1b32 <process_command+0xfc8>
            		acclock = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"xtalisfast") != NULL){
     f52:	6f e4       	ldi	r22, 0x4F	; 79
     f54:	73 e0       	ldi	r23, 0x03	; 3
     f56:	84 e3       	ldi	r24, 0x34	; 52
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f5e:	89 2b       	or	r24, r25
     f60:	31 f1       	breq	.+76     	; 0xfae <process_command+0x444>
        if(strcasestr(myUartString,"?") != NULL){
     f62:	6a e2       	ldi	r22, 0x2A	; 42
     f64:	74 e0       	ldi	r23, 0x04	; 4
     f66:	84 e3       	ldi	r24, 0x34	; 52
     f68:	96 e0       	ldi	r25, 0x06	; 6
     f6a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f6e:	89 2b       	or	r24, r25
     f70:	51 f0       	breq	.+20     	; 0xf86 <process_command+0x41c>
            print_value("xtalisfast", xtalisfast);
     f72:	40 91 0b 01 	lds	r20, 0x010B
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	8f e4       	ldi	r24, 0x4F	; 79
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	0e 94 8a 02 	call	0x514	; 0x514 <print_value>
     f84:	8b c5       	rjmp	.+2838   	; 0x1a9c <process_command+0xf32>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     f86:	69 eb       	ldi	r22, 0xB9	; 185
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	84 e3       	ldi	r24, 0x34	; 52
     f8c:	96 e0       	ldi	r25, 0x06	; 6
     f8e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     f92:	89 2b       	or	r24, r25
     f94:	09 f4       	brne	.+2      	; 0xf98 <process_command+0x42e>
     f96:	82 c5       	rjmp	.+2820   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     f98:	84 e3       	ldi	r24, 0x34	; 52
     f9a:	96 e0       	ldi	r25, 0x06	; 6
     f9c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     fa0:	62 30       	cpi	r22, 0x02	; 2
     fa2:	71 05       	cpc	r23, r1
     fa4:	81 05       	cpc	r24, r1
     fa6:	91 05       	cpc	r25, r1
     fa8:	08 f0       	brcs	.+2      	; 0xfac <process_command+0x442>
     faa:	78 c5       	rjmp	.+2800   	; 0x1a9c <process_command+0xf32>
     fac:	c9 c5       	rjmp	.+2962   	; 0x1b40 <process_command+0xfd6>
            		xtalisfast = splitString(myUartString);
            }
        }
    }
    
	else if(strcasestr(myUartString,"showtherm") != NULL){
     fae:	6a e5       	ldi	r22, 0x5A	; 90
     fb0:	73 e0       	ldi	r23, 0x03	; 3
     fb2:	84 e3       	ldi	r24, 0x34	; 52
     fb4:	96 e0       	ldi	r25, 0x06	; 6
     fb6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     fba:	89 2b       	or	r24, r25
     fbc:	21 f1       	breq	.+72     	; 0x1006 <process_command+0x49c>
        if(strcasestr(myUartString,"?") != NULL){
     fbe:	6a e2       	ldi	r22, 0x2A	; 42
     fc0:	74 e0       	ldi	r23, 0x04	; 4
     fc2:	84 e3       	ldi	r24, 0x34	; 52
     fc4:	96 e0       	ldi	r25, 0x06	; 6
     fc6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     fca:	89 2b       	or	r24, r25
     fcc:	41 f0       	breq	.+16     	; 0xfde <process_command+0x474>
            print_value("Show Therm", showtherm);
     fce:	40 91 fb 04 	lds	r20, 0x04FB
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	84 e6       	ldi	r24, 0x64	; 100
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	d1 cf       	rjmp	.-94     	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
     fde:	69 eb       	ldi	r22, 0xB9	; 185
     fe0:	72 e0       	ldi	r23, 0x02	; 2
     fe2:	84 e3       	ldi	r24, 0x34	; 52
     fe4:	96 e0       	ldi	r25, 0x06	; 6
     fe6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
     fea:	89 2b       	or	r24, r25
     fec:	09 f4       	brne	.+2      	; 0xff0 <process_command+0x486>
     fee:	56 c5       	rjmp	.+2732   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
     ff0:	84 e3       	ldi	r24, 0x34	; 52
     ff2:	96 e0       	ldi	r25, 0x06	; 6
     ff4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
     ff8:	62 30       	cpi	r22, 0x02	; 2
     ffa:	71 05       	cpc	r23, r1
     ffc:	81 05       	cpc	r24, r1
     ffe:	91 05       	cpc	r25, r1
    1000:	08 f0       	brcs	.+2      	; 0x1004 <process_command+0x49a>
    1002:	4c c5       	rjmp	.+2712   	; 0x1a9c <process_command+0xf32>
    1004:	a4 c5       	rjmp	.+2888   	; 0x1b4e <process_command+0xfe4>
            		showtherm = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"showfreq") != NULL){
    1006:	6f e6       	ldi	r22, 0x6F	; 111
    1008:	73 e0       	ldi	r23, 0x03	; 3
    100a:	84 e3       	ldi	r24, 0x34	; 52
    100c:	96 e0       	ldi	r25, 0x06	; 6
    100e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1012:	89 2b       	or	r24, r25
    1014:	21 f1       	breq	.+72     	; 0x105e <process_command+0x4f4>
        if(strcasestr(myUartString,"?") != NULL){
    1016:	6a e2       	ldi	r22, 0x2A	; 42
    1018:	74 e0       	ldi	r23, 0x04	; 4
    101a:	84 e3       	ldi	r24, 0x34	; 52
    101c:	96 e0       	ldi	r25, 0x06	; 6
    101e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1022:	89 2b       	or	r24, r25
    1024:	41 f0       	breq	.+16     	; 0x1036 <process_command+0x4cc>
            print_value("Show Freq", showfreq);
    1026:	40 91 fa 04 	lds	r20, 0x04FA
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	88 e7       	ldi	r24, 0x78	; 120
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	a5 cf       	rjmp	.-182    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    1036:	69 eb       	ldi	r22, 0xB9	; 185
    1038:	72 e0       	ldi	r23, 0x02	; 2
    103a:	84 e3       	ldi	r24, 0x34	; 52
    103c:	96 e0       	ldi	r25, 0x06	; 6
    103e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1042:	89 2b       	or	r24, r25
    1044:	09 f4       	brne	.+2      	; 0x1048 <process_command+0x4de>
    1046:	2a c5       	rjmp	.+2644   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    1048:	84 e3       	ldi	r24, 0x34	; 52
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    1050:	62 30       	cpi	r22, 0x02	; 2
    1052:	71 05       	cpc	r23, r1
    1054:	81 05       	cpc	r24, r1
    1056:	91 05       	cpc	r25, r1
    1058:	08 f0       	brcs	.+2      	; 0x105c <process_command+0x4f2>
    105a:	20 c5       	rjmp	.+2624   	; 0x1a9c <process_command+0xf32>
    105c:	7f c5       	rjmp	.+2814   	; 0x1b5c <process_command+0xff2>
            		showfreq = splitString(myUartString);
            }
        }
    }
	
	else if(strcasestr(myUartString,"showdate") != NULL){
    105e:	62 e8       	ldi	r22, 0x82	; 130
    1060:	73 e0       	ldi	r23, 0x03	; 3
    1062:	84 e3       	ldi	r24, 0x34	; 52
    1064:	96 e0       	ldi	r25, 0x06	; 6
    1066:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    106a:	89 2b       	or	r24, r25
    106c:	21 f1       	breq	.+72     	; 0x10b6 <process_command+0x54c>
        if(strcasestr(myUartString,"?") != NULL){
    106e:	6a e2       	ldi	r22, 0x2A	; 42
    1070:	74 e0       	ldi	r23, 0x04	; 4
    1072:	84 e3       	ldi	r24, 0x34	; 52
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    107a:	89 2b       	or	r24, r25
    107c:	41 f0       	breq	.+16     	; 0x108e <process_command+0x524>
            print_value("Show Date", showdate);
    107e:	40 91 f9 04 	lds	r20, 0x04F9
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	8b e8       	ldi	r24, 0x8B	; 139
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	79 cf       	rjmp	.-270    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    108e:	69 eb       	ldi	r22, 0xB9	; 185
    1090:	72 e0       	ldi	r23, 0x02	; 2
    1092:	84 e3       	ldi	r24, 0x34	; 52
    1094:	96 e0       	ldi	r25, 0x06	; 6
    1096:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    109a:	89 2b       	or	r24, r25
    109c:	09 f4       	brne	.+2      	; 0x10a0 <process_command+0x536>
    109e:	fe c4       	rjmp	.+2556   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    10a0:	84 e3       	ldi	r24, 0x34	; 52
    10a2:	96 e0       	ldi	r25, 0x06	; 6
    10a4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    10a8:	62 30       	cpi	r22, 0x02	; 2
    10aa:	71 05       	cpc	r23, r1
    10ac:	81 05       	cpc	r24, r1
    10ae:	91 05       	cpc	r25, r1
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <process_command+0x54a>
    10b2:	f4 c4       	rjmp	.+2536   	; 0x1a9c <process_command+0xf32>
    10b4:	5a c5       	rjmp	.+2740   	; 0x1b6a <process_command+0x1000>
            		showdate = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"toggleled")!= NULL){
    10b6:	65 e9       	ldi	r22, 0x95	; 149
    10b8:	73 e0       	ldi	r23, 0x03	; 3
    10ba:	84 e3       	ldi	r24, 0x34	; 52
    10bc:	96 e0       	ldi	r25, 0x06	; 6
    10be:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    10c2:	89 2b       	or	r24, r25
    10c4:	21 f1       	breq	.+72     	; 0x110e <process_command+0x5a4>
        if(strcasestr(myUartString,"?") != NULL){
    10c6:	6a e2       	ldi	r22, 0x2A	; 42
    10c8:	74 e0       	ldi	r23, 0x04	; 4
    10ca:	84 e3       	ldi	r24, 0x34	; 52
    10cc:	96 e0       	ldi	r25, 0x06	; 6
    10ce:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    10d2:	89 2b       	or	r24, r25
    10d4:	41 f0       	breq	.+16     	; 0x10e6 <process_command+0x57c>
            print_value("Toggle LED", toggleled);
    10d6:	40 91 0a 01 	lds	r20, 0x010A
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	8f e9       	ldi	r24, 0x9F	; 159
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	4d cf       	rjmp	.-358    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    10e6:	69 eb       	ldi	r22, 0xB9	; 185
    10e8:	72 e0       	ldi	r23, 0x02	; 2
    10ea:	84 e3       	ldi	r24, 0x34	; 52
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    10f2:	89 2b       	or	r24, r25
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <process_command+0x58e>
    10f6:	d2 c4       	rjmp	.+2468   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 1, 0 ) )
    10f8:	84 e3       	ldi	r24, 0x34	; 52
    10fa:	96 e0       	ldi	r25, 0x06	; 6
    10fc:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    1100:	62 30       	cpi	r22, 0x02	; 2
    1102:	71 05       	cpc	r23, r1
    1104:	81 05       	cpc	r24, r1
    1106:	91 05       	cpc	r25, r1
    1108:	08 f0       	brcs	.+2      	; 0x110c <process_command+0x5a2>
    110a:	c8 c4       	rjmp	.+2448   	; 0x1a9c <process_command+0xf32>
    110c:	35 c5       	rjmp	.+2666   	; 0x1b78 <process_command+0x100e>
            		toggleled = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"nixiesleepstart") != NULL){
    110e:	6a ea       	ldi	r22, 0xAA	; 170
    1110:	73 e0       	ldi	r23, 0x03	; 3
    1112:	84 e3       	ldi	r24, 0x34	; 52
    1114:	96 e0       	ldi	r25, 0x06	; 6
    1116:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    111a:	89 2b       	or	r24, r25
    111c:	39 f1       	breq	.+78     	; 0x116c <process_command+0x602>
        if(strcasestr(myUartString,"?") != NULL){
    111e:	6a e2       	ldi	r22, 0x2A	; 42
    1120:	74 e0       	ldi	r23, 0x04	; 4
    1122:	84 e3       	ldi	r24, 0x34	; 52
    1124:	96 e0       	ldi	r25, 0x06	; 6
    1126:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    112a:	89 2b       	or	r24, r25
    112c:	59 f0       	breq	.+22     	; 0x1144 <process_command+0x5da>
            print_value("Nixie Sleep Start Time", nixiesleepstart);
    112e:	40 91 f5 04 	lds	r20, 0x04F5
    1132:	50 91 f6 04 	lds	r21, 0x04F6
    1136:	60 91 f7 04 	lds	r22, 0x04F7
    113a:	70 91 f8 04 	lds	r23, 0x04F8
    113e:	8a eb       	ldi	r24, 0xBA	; 186
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	1e cf       	rjmp	.-452    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    1144:	69 eb       	ldi	r22, 0xB9	; 185
    1146:	72 e0       	ldi	r23, 0x02	; 2
    1148:	84 e3       	ldi	r24, 0x34	; 52
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1150:	89 2b       	or	r24, r25
    1152:	09 f4       	brne	.+2      	; 0x1156 <process_command+0x5ec>
    1154:	a3 c4       	rjmp	.+2374   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 2358, 0 ) )
    1156:	84 e3       	ldi	r24, 0x34	; 52
    1158:	96 e0       	ldi	r25, 0x06	; 6
    115a:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    115e:	67 33       	cpi	r22, 0x37	; 55
    1160:	79 40       	sbci	r23, 0x09	; 9
    1162:	81 05       	cpc	r24, r1
    1164:	91 05       	cpc	r25, r1
    1166:	08 f4       	brcc	.+2      	; 0x116a <process_command+0x600>
    1168:	0e c5       	rjmp	.+2588   	; 0x1b86 <process_command+0x101c>
    116a:	98 c4       	rjmp	.+2352   	; 0x1a9c <process_command+0xf32>
            		nixiesleepstart = splitString(myUartString);
            }
        }
    }
    
    else if(strcasestr(myUartString,"nixiesleepend") != NULL){
    116c:	61 ed       	ldi	r22, 0xD1	; 209
    116e:	73 e0       	ldi	r23, 0x03	; 3
    1170:	84 e3       	ldi	r24, 0x34	; 52
    1172:	96 e0       	ldi	r25, 0x06	; 6
    1174:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1178:	89 2b       	or	r24, r25
    117a:	d1 f1       	breq	.+116    	; 0x11f0 <process_command+0x686>
        if(strcasestr(myUartString,"?") != NULL){
    117c:	6a e2       	ldi	r22, 0x2A	; 42
    117e:	74 e0       	ldi	r23, 0x04	; 4
    1180:	84 e3       	ldi	r24, 0x34	; 52
    1182:	96 e0       	ldi	r25, 0x06	; 6
    1184:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1188:	89 2b       	or	r24, r25
    118a:	59 f0       	breq	.+22     	; 0x11a2 <process_command+0x638>
            print_value("Nixie Sleep End Time", nixiesleepend);
    118c:	40 91 f1 04 	lds	r20, 0x04F1
    1190:	50 91 f2 04 	lds	r21, 0x04F2
    1194:	60 91 f3 04 	lds	r22, 0x04F3
    1198:	70 91 f4 04 	lds	r23, 0x04F4
    119c:	8f ed       	ldi	r24, 0xDF	; 223
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	ef ce       	rjmp	.-546    	; 0xf80 <process_command+0x416>
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
    11a2:	69 eb       	ldi	r22, 0xB9	; 185
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	84 e3       	ldi	r24, 0x34	; 52
    11a8:	96 e0       	ldi	r25, 0x06	; 6
    11aa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    11ae:	89 2b       	or	r24, r25
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <process_command+0x64a>
    11b2:	74 c4       	rjmp	.+2280   	; 0x1a9c <process_command+0xf32>
        		if( inRange( splitString(myUartString), 2359, nixiesleepstart + 1 ) )
    11b4:	c0 90 f5 04 	lds	r12, 0x04F5
    11b8:	d0 90 f6 04 	lds	r13, 0x04F6
    11bc:	e0 90 f7 04 	lds	r14, 0x04F7
    11c0:	f0 90 f8 04 	lds	r15, 0x04F8
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	c8 1a       	sub	r12, r24
    11c8:	d8 0a       	sbc	r13, r24
    11ca:	e8 0a       	sbc	r14, r24
    11cc:	f8 0a       	sbc	r15, r24
    11ce:	84 e3       	ldi	r24, 0x34	; 52
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>



uint8_t inRange( uint32_t inputValue, uint32_t upperBound, uint32_t lowerBound )
{
	if( inputValue >= lowerBound && inputValue <= upperBound )
    11d6:	6c 15       	cp	r22, r12
    11d8:	7d 05       	cpc	r23, r13
    11da:	8e 05       	cpc	r24, r14
    11dc:	9f 05       	cpc	r25, r15
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <process_command+0x678>
    11e0:	5d c4       	rjmp	.+2234   	; 0x1a9c <process_command+0xf32>
    11e2:	68 33       	cpi	r22, 0x38	; 56
    11e4:	79 40       	sbci	r23, 0x09	; 9
    11e6:	81 05       	cpc	r24, r1
    11e8:	91 05       	cpc	r25, r1
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <process_command+0x684>
    11ec:	d9 c4       	rjmp	.+2482   	; 0x1ba0 <process_command+0x1036>
    11ee:	56 c4       	rjmp	.+2220   	; 0x1a9c <process_command+0xf32>
            }
        }
    }
    
    
    else if(strcasestr(myUartString,"getall") != NULL){
    11f0:	64 ef       	ldi	r22, 0xF4	; 244
    11f2:	73 e0       	ldi	r23, 0x03	; 3
    11f4:	84 e3       	ldi	r24, 0x34	; 52
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    11fc:	89 2b       	or	r24, r25
    11fe:	09 f4       	brne	.+2      	; 0x1202 <process_command+0x698>
    1200:	fa c0       	rjmp	.+500    	; 0x13f6 <process_command+0x88c>
    	
    	print_csv( ",", hours );					
    1202:	40 91 16 01 	lds	r20, 0x0116
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	8b ef       	ldi	r24, 0xFB	; 251
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", minutes );					
    1214:	40 91 15 01 	lds	r20, 0x0115
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	8b ef       	ldi	r24, 0xFB	; 251
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", seconds );					
    1226:	40 91 10 01 	lds	r20, 0x0110
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	8b ef       	ldi	r24, 0xFB	; 251
    1232:	93 e0       	ldi	r25, 0x03	; 3
    1234:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", mscal );					
    1238:	40 91 fe 04 	lds	r20, 0x04FE
    123c:	50 91 ff 04 	lds	r21, 0x04FF
    1240:	60 91 00 05 	lds	r22, 0x0500
    1244:	70 91 01 05 	lds	r23, 0x0501
    1248:	8b ef       	ldi	r24, 0xFB	; 251
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", miltime );					
    1250:	40 91 0f 01 	lds	r20, 0x010F
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	8b ef       	ldi	r24, 0xFB	; 251
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", year );						
    1262:	40 91 11 01 	lds	r20, 0x0111
    1266:	50 91 12 01 	lds	r21, 0x0112
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	8b ef       	ldi	r24, 0xFB	; 251
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", month );					
    1276:	40 91 13 01 	lds	r20, 0x0113
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	8b ef       	ldi	r24, 0xFB	; 251
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", day );						
    1288:	40 91 14 01 	lds	r20, 0x0114
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	8b ef       	ldi	r24, 0xFB	; 251
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", celsius );					
    129a:	40 91 0e 01 	lds	r20, 0x010E
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	8b ef       	ldi	r24, 0xFB	; 251
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", doecho );					
    12ac:	40 91 0d 01 	lds	r20, 0x010D
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	8b ef       	ldi	r24, 0xFB	; 251
    12b8:	93 e0       	ldi	r25, 0x03	; 3
    12ba:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", xtalisfast );				
    12be:	40 91 0b 01 	lds	r20, 0x010B
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	8b ef       	ldi	r24, 0xFB	; 251
    12ca:	93 e0       	ldi	r25, 0x03	; 3
    12cc:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", showtherm );				
    12d0:	40 91 fb 04 	lds	r20, 0x04FB
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	8b ef       	ldi	r24, 0xFB	; 251
    12dc:	93 e0       	ldi	r25, 0x03	; 3
    12de:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", showdate );					
    12e2:	40 91 f9 04 	lds	r20, 0x04F9
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	8b ef       	ldi	r24, 0xFB	; 251
    12ee:	93 e0       	ldi	r25, 0x03	; 3
    12f0:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", toggleled );				
    12f4:	40 91 0a 01 	lds	r20, 0x010A
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	8b ef       	ldi	r24, 0xFB	; 251
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", nixiesleepstart );			
    1306:	40 91 f5 04 	lds	r20, 0x04F5
    130a:	50 91 f6 04 	lds	r21, 0x04F6
    130e:	60 91 f7 04 	lds	r22, 0x04F7
    1312:	70 91 f8 04 	lds	r23, 0x04F8
    1316:	8b ef       	ldi	r24, 0xFB	; 251
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", nixiesleepend );				
    131e:	40 91 f1 04 	lds	r20, 0x04F1
    1322:	50 91 f2 04 	lds	r21, 0x04F2
    1326:	60 91 f3 04 	lds	r22, 0x04F3
    132a:	70 91 f4 04 	lds	r23, 0x04F4
    132e:	8b ef       	ldi	r24, 0xFB	; 251
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	print_csv( ",", SERIAL_NUMBER );			
    1336:	44 e6       	ldi	r20, 0x64	; 100
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	8b ef       	ldi	r24, 0xFB	; 251
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	0e 94 a2 02 	call	0x544	; 0x544 <print_csv>
    	
    	// PWR_OK
    	double Volts = adc_raw[0] * 0.019375;
    1346:	60 91 98 06 	lds	r22, 0x0698
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    1354:	22 e5       	ldi	r18, 0x52	; 82
    1356:	38 eb       	ldi	r19, 0xB8	; 184
    1358:	4e e9       	ldi	r20, 0x9E	; 158
    135a:	5c e3       	ldi	r21, 0x3C	; 60
    135c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    1360:	04 e5       	ldi	r16, 0x54	; 84
    1362:	15 e0       	ldi	r17, 0x05	; 5
    1364:	22 e0       	ldi	r18, 0x02	; 2
    1366:	4a e0       	ldi	r20, 0x0A	; 10
    1368:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
        uart_puts(printBuffer);
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts(",");
    1372:	8b ef       	ldi	r24, 0xFB	; 251
    1374:	93 e0       	ldi	r25, 0x03	; 3
    1376:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        
        // HV_Feedback
        Volts = adc_raw[1] * 1.9375;
    137a:	60 91 99 06 	lds	r22, 0x0699
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	48 ef       	ldi	r20, 0xF8	; 248
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    1394:	22 e0       	ldi	r18, 0x02	; 2
    1396:	4a e0       	ldi	r20, 0x0A	; 10
    1398:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
        uart_puts(printBuffer);
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts(",");
    13a2:	8b ef       	ldi	r24, 0xFB	; 251
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        
        // Battery Voltage
        Volts = adc_raw[2] * 0.019375;
    13aa:	60 91 9a 06 	lds	r22, 0x069A
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    13b8:	22 e5       	ldi	r18, 0x52	; 82
    13ba:	38 eb       	ldi	r19, 0xB8	; 184
    13bc:	4e e9       	ldi	r20, 0x9E	; 158
    13be:	5c e3       	ldi	r21, 0x3C	; 60
    13c0:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
        dtostrf(Volts , 10, 2, printBuffer);
    13c4:	22 e0       	ldi	r18, 0x02	; 2
    13c6:	4a e0       	ldi	r20, 0x0A	; 10
    13c8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
        uart_puts(printBuffer);
    13cc:	c8 01       	movw	r24, r16
    13ce:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts(",");
    13d2:	8b ef       	ldi	r24, 0xFB	; 251
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        
        // Rectified AC voltage
        Volts = adc_raw[3] * 0.11;
    13da:	60 91 9b 06 	lds	r22, 0x069B
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    13e8:	2e ea       	ldi	r18, 0xAE	; 174
    13ea:	37 e4       	ldi	r19, 0x47	; 71
    13ec:	41 ee       	ldi	r20, 0xE1	; 225
    13ee:	5d e3       	ldi	r21, 0x3D	; 61
    13f0:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    13f4:	4c c3       	rjmp	.+1688   	; 0x1a8e <process_command+0xf24>
        dtostrf(Volts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    	
    }
    
    else if( strcasestr( myUartString, "help" ) != NULL ){
    13f6:	6d ef       	ldi	r22, 0xFD	; 253
    13f8:	73 e0       	ldi	r23, 0x03	; 3
    13fa:	84 e3       	ldi	r24, 0x34	; 52
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    1402:	89 2b       	or	r24, r25
    1404:	09 f4       	brne	.+2      	; 0x1408 <process_command+0x89e>
    1406:	cf c2       	rjmp	.+1438   	; 0x19a6 <process_command+0xe3c>
    	// print instructions
    	uart_puts("Command");			uart_puts("\t\t");	uart_puts("Set/Read");	uart_puts("\t");	uart_puts("Low Lim");				uart_puts("\t\t\t");	uart_puts("High Lim");		uart_puts( RETURN_NEWLINE );	
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1410:	8c e1       	ldi	r24, 0x1C	; 28
    1412:	94 e0       	ldi	r25, 0x04	; 4
    1414:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1418:	8a e0       	ldi	r24, 0x0A	; 10
    141a:	94 e0       	ldi	r25, 0x04	; 4
    141c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1420:	8d e1       	ldi	r24, 0x1D	; 29
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1428:	83 e1       	ldi	r24, 0x13	; 19
    142a:	94 e0       	ldi	r25, 0x04	; 4
    142c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1430:	8b e1       	ldi	r24, 0x1B	; 27
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1438:	8f e1       	ldi	r24, 0x1F	; 31
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1440:	89 e2       	ldi	r24, 0x29	; 41
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("hours");				uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("23");			uart_puts( RETURN_NEWLINE );
    1448:	8d ea       	ldi	r24, 0xAD	; 173
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1450:	8c e1       	ldi	r24, 0x1C	; 28
    1452:	94 e0       	ldi	r25, 0x04	; 4
    1454:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1458:	88 e2       	ldi	r24, 0x28	; 40
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1460:	8c e1       	ldi	r24, 0x1C	; 28
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1468:	84 e9       	ldi	r24, 0x94	; 148
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1470:	8b e1       	ldi	r24, 0x1B	; 27
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1478:	8c e2       	ldi	r24, 0x2C	; 44
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1480:	89 e2       	ldi	r24, 0x29	; 41
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("minutes");			uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("59");			uart_puts( RETURN_NEWLINE );
    1488:	8b eb       	ldi	r24, 0xBB	; 187
    148a:	92 e0       	ldi	r25, 0x02	; 2
    148c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1490:	8c e1       	ldi	r24, 0x1C	; 28
    1492:	94 e0       	ldi	r25, 0x04	; 4
    1494:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1498:	88 e2       	ldi	r24, 0x28	; 40
    149a:	94 e0       	ldi	r25, 0x04	; 4
    149c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14a0:	8c e1       	ldi	r24, 0x1C	; 28
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14a8:	84 e9       	ldi	r24, 0x94	; 148
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14b0:	8b e1       	ldi	r24, 0x1B	; 27
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14b8:	89 e6       	ldi	r24, 0x69	; 105
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14c0:	89 e2       	ldi	r24, 0x29	; 41
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("seconds");			uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("59");			uart_puts( RETURN_NEWLINE );
    14c8:	8b ec       	ldi	r24, 0xCB	; 203
    14ca:	92 e0       	ldi	r25, 0x02	; 2
    14cc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14d0:	8c e1       	ldi	r24, 0x1C	; 28
    14d2:	94 e0       	ldi	r25, 0x04	; 4
    14d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14d8:	88 e2       	ldi	r24, 0x28	; 40
    14da:	94 e0       	ldi	r25, 0x04	; 4
    14dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14e0:	8c e1       	ldi	r24, 0x1C	; 28
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14e8:	84 e9       	ldi	r24, 0x94	; 148
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14f0:	8b e1       	ldi	r24, 0x1B	; 27
    14f2:	94 e0       	ldi	r25, 0x04	; 4
    14f4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    14f8:	89 e6       	ldi	r24, 0x69	; 105
    14fa:	94 e0       	ldi	r25, 0x04	; 4
    14fc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1500:	89 e2       	ldi	r24, 0x29	; 41
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("mscal");				uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("4294967295");	uart_puts( RETURN_NEWLINE );
    1508:	8b ed       	ldi	r24, 0xDB	; 219
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1510:	8c e1       	ldi	r24, 0x1C	; 28
    1512:	94 e0       	ldi	r25, 0x04	; 4
    1514:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1518:	88 e2       	ldi	r24, 0x28	; 40
    151a:	94 e0       	ldi	r25, 0x04	; 4
    151c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1520:	8c e1       	ldi	r24, 0x1C	; 28
    1522:	94 e0       	ldi	r25, 0x04	; 4
    1524:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1528:	84 e9       	ldi	r24, 0x94	; 148
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1530:	8b e1       	ldi	r24, 0x1B	; 27
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1538:	8f e2       	ldi	r24, 0x2F	; 47
    153a:	94 e0       	ldi	r25, 0x04	; 4
    153c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1540:	89 e2       	ldi	r24, 0x29	; 41
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("miltime");			uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1548:	80 ef       	ldi	r24, 0xF0	; 240
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1550:	8c e1       	ldi	r24, 0x1C	; 28
    1552:	94 e0       	ldi	r25, 0x04	; 4
    1554:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1558:	88 e2       	ldi	r24, 0x28	; 40
    155a:	94 e0       	ldi	r25, 0x04	; 4
    155c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1560:	8c e1       	ldi	r24, 0x1C	; 28
    1562:	94 e0       	ldi	r25, 0x04	; 4
    1564:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1568:	84 e9       	ldi	r24, 0x94	; 148
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1570:	8b e1       	ldi	r24, 0x1B	; 27
    1572:	94 e0       	ldi	r25, 0x04	; 4
    1574:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1578:	85 e6       	ldi	r24, 0x65	; 101
    157a:	94 e0       	ldi	r25, 0x04	; 4
    157c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1580:	89 e2       	ldi	r24, 0x29	; 41
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("year");				uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("2525");			uart_puts( RETURN_NEWLINE );
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	93 e0       	ldi	r25, 0x03	; 3
    158c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1590:	8c e1       	ldi	r24, 0x1C	; 28
    1592:	94 e0       	ldi	r25, 0x04	; 4
    1594:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1598:	88 e2       	ldi	r24, 0x28	; 40
    159a:	94 e0       	ldi	r25, 0x04	; 4
    159c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15a0:	8c e1       	ldi	r24, 0x1C	; 28
    15a2:	94 e0       	ldi	r25, 0x04	; 4
    15a4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15a8:	84 e9       	ldi	r24, 0x94	; 148
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15b0:	8b e1       	ldi	r24, 0x1B	; 27
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15b8:	8a e3       	ldi	r24, 0x3A	; 58
    15ba:	94 e0       	ldi	r25, 0x04	; 4
    15bc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15c0:	89 e2       	ldi	r24, 0x29	; 41
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("month");				uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("12");			uart_puts( RETURN_NEWLINE );
    15c8:	8b e0       	ldi	r24, 0x0B	; 11
    15ca:	93 e0       	ldi	r25, 0x03	; 3
    15cc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15d0:	8c e1       	ldi	r24, 0x1C	; 28
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15d8:	88 e2       	ldi	r24, 0x28	; 40
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15e0:	8c e1       	ldi	r24, 0x1C	; 28
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15e8:	84 e9       	ldi	r24, 0x94	; 148
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15f0:	8b e1       	ldi	r24, 0x1B	; 27
    15f2:	94 e0       	ldi	r25, 0x04	; 4
    15f4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    15f8:	8f e3       	ldi	r24, 0x3F	; 63
    15fa:	94 e0       	ldi	r25, 0x04	; 4
    15fc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1600:	89 e2       	ldi	r24, 0x29	; 41
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("day");				uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("31");			uart_puts( RETURN_NEWLINE );
    1608:	87 e1       	ldi	r24, 0x17	; 23
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1610:	8c e1       	ldi	r24, 0x1C	; 28
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1618:	88 e2       	ldi	r24, 0x28	; 40
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1620:	8c e1       	ldi	r24, 0x1C	; 28
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1628:	84 e9       	ldi	r24, 0x94	; 148
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1630:	8b e1       	ldi	r24, 0x1B	; 27
    1632:	94 e0       	ldi	r25, 0x04	; 4
    1634:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1638:	82 e4       	ldi	r24, 0x42	; 66
    163a:	94 e0       	ldi	r25, 0x04	; 4
    163c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1640:	89 e2       	ldi	r24, 0x29	; 41
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("celsius");			uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1648:	8f e1       	ldi	r24, 0x1F	; 31
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1650:	8c e1       	ldi	r24, 0x1C	; 28
    1652:	94 e0       	ldi	r25, 0x04	; 4
    1654:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1658:	88 e2       	ldi	r24, 0x28	; 40
    165a:	94 e0       	ldi	r25, 0x04	; 4
    165c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1660:	8c e1       	ldi	r24, 0x1C	; 28
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1668:	84 e9       	ldi	r24, 0x94	; 148
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1670:	8b e1       	ldi	r24, 0x1B	; 27
    1672:	94 e0       	ldi	r25, 0x04	; 4
    1674:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1678:	85 e6       	ldi	r24, 0x65	; 101
    167a:	94 e0       	ldi	r25, 0x04	; 4
    167c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1680:	89 e2       	ldi	r24, 0x29	; 41
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("doecho");			uart_puts("\t\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1688:	8f e2       	ldi	r24, 0x2F	; 47
    168a:	93 e0       	ldi	r25, 0x03	; 3
    168c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1690:	8c e1       	ldi	r24, 0x1C	; 28
    1692:	94 e0       	ldi	r25, 0x04	; 4
    1694:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1698:	88 e2       	ldi	r24, 0x28	; 40
    169a:	94 e0       	ldi	r25, 0x04	; 4
    169c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16a0:	8c e1       	ldi	r24, 0x1C	; 28
    16a2:	94 e0       	ldi	r25, 0x04	; 4
    16a4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16a8:	84 e9       	ldi	r24, 0x94	; 148
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16b0:	8b e1       	ldi	r24, 0x1B	; 27
    16b2:	94 e0       	ldi	r25, 0x04	; 4
    16b4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16b8:	85 e6       	ldi	r24, 0x65	; 101
    16ba:	94 e0       	ldi	r25, 0x04	; 4
    16bc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16c0:	89 e2       	ldi	r24, 0x29	; 41
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("accclock");			uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    16c8:	85 e4       	ldi	r24, 0x45	; 69
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16d0:	8d e1       	ldi	r24, 0x1D	; 29
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16d8:	88 e2       	ldi	r24, 0x28	; 40
    16da:	94 e0       	ldi	r25, 0x04	; 4
    16dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16e0:	8c e1       	ldi	r24, 0x1C	; 28
    16e2:	94 e0       	ldi	r25, 0x04	; 4
    16e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16e8:	84 e9       	ldi	r24, 0x94	; 148
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16f0:	8b e1       	ldi	r24, 0x1B	; 27
    16f2:	94 e0       	ldi	r25, 0x04	; 4
    16f4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    16f8:	85 e6       	ldi	r24, 0x65	; 101
    16fa:	94 e0       	ldi	r25, 0x04	; 4
    16fc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1700:	89 e2       	ldi	r24, 0x29	; 41
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("xtalisfast");		uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1708:	8f e4       	ldi	r24, 0x4F	; 79
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1710:	8d e1       	ldi	r24, 0x1D	; 29
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1718:	88 e2       	ldi	r24, 0x28	; 40
    171a:	94 e0       	ldi	r25, 0x04	; 4
    171c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1720:	8c e1       	ldi	r24, 0x1C	; 28
    1722:	94 e0       	ldi	r25, 0x04	; 4
    1724:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1728:	84 e9       	ldi	r24, 0x94	; 148
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1730:	8b e1       	ldi	r24, 0x1B	; 27
    1732:	94 e0       	ldi	r25, 0x04	; 4
    1734:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1738:	85 e6       	ldi	r24, 0x65	; 101
    173a:	94 e0       	ldi	r25, 0x04	; 4
    173c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1740:	89 e2       	ldi	r24, 0x29	; 41
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("showtherm");			uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1748:	8a e5       	ldi	r24, 0x5A	; 90
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1750:	8d e1       	ldi	r24, 0x1D	; 29
    1752:	94 e0       	ldi	r25, 0x04	; 4
    1754:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1758:	88 e2       	ldi	r24, 0x28	; 40
    175a:	94 e0       	ldi	r25, 0x04	; 4
    175c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1760:	8c e1       	ldi	r24, 0x1C	; 28
    1762:	94 e0       	ldi	r25, 0x04	; 4
    1764:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1768:	84 e9       	ldi	r24, 0x94	; 148
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1770:	8b e1       	ldi	r24, 0x1B	; 27
    1772:	94 e0       	ldi	r25, 0x04	; 4
    1774:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1778:	85 e6       	ldi	r24, 0x65	; 101
    177a:	94 e0       	ldi	r25, 0x04	; 4
    177c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1780:	89 e2       	ldi	r24, 0x29	; 41
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("showfreq");			uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1788:	8f e6       	ldi	r24, 0x6F	; 111
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1790:	8d e1       	ldi	r24, 0x1D	; 29
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1798:	88 e2       	ldi	r24, 0x28	; 40
    179a:	94 e0       	ldi	r25, 0x04	; 4
    179c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17a0:	8c e1       	ldi	r24, 0x1C	; 28
    17a2:	94 e0       	ldi	r25, 0x04	; 4
    17a4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17a8:	84 e9       	ldi	r24, 0x94	; 148
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17b0:	8b e1       	ldi	r24, 0x1B	; 27
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17b8:	85 e6       	ldi	r24, 0x65	; 101
    17ba:	94 e0       	ldi	r25, 0x04	; 4
    17bc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17c0:	89 e2       	ldi	r24, 0x29	; 41
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("showdate");			uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    17c8:	82 e8       	ldi	r24, 0x82	; 130
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17d0:	8d e1       	ldi	r24, 0x1D	; 29
    17d2:	94 e0       	ldi	r25, 0x04	; 4
    17d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17d8:	88 e2       	ldi	r24, 0x28	; 40
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17e0:	8c e1       	ldi	r24, 0x1C	; 28
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17e8:	84 e9       	ldi	r24, 0x94	; 148
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17f0:	8b e1       	ldi	r24, 0x1B	; 27
    17f2:	94 e0       	ldi	r25, 0x04	; 4
    17f4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    17f8:	85 e6       	ldi	r24, 0x65	; 101
    17fa:	94 e0       	ldi	r25, 0x04	; 4
    17fc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1800:	89 e2       	ldi	r24, 0x29	; 41
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("toggleled");			uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("1");				uart_puts( RETURN_NEWLINE );
    1808:	85 e9       	ldi	r24, 0x95	; 149
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1810:	8d e1       	ldi	r24, 0x1D	; 29
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1818:	88 e2       	ldi	r24, 0x28	; 40
    181a:	94 e0       	ldi	r25, 0x04	; 4
    181c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1820:	8c e1       	ldi	r24, 0x1C	; 28
    1822:	94 e0       	ldi	r25, 0x04	; 4
    1824:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1828:	84 e9       	ldi	r24, 0x94	; 148
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1830:	8b e1       	ldi	r24, 0x1B	; 27
    1832:	94 e0       	ldi	r25, 0x04	; 4
    1834:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1838:	85 e6       	ldi	r24, 0x65	; 101
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1840:	89 e2       	ldi	r24, 0x29	; 41
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("nixiesleepstart");	uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("0");						uart_puts("\t\t\t");	uart_puts("2358");			uart_puts( RETURN_NEWLINE );
    1848:	8a ea       	ldi	r24, 0xAA	; 170
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1850:	8d e1       	ldi	r24, 0x1D	; 29
    1852:	94 e0       	ldi	r25, 0x04	; 4
    1854:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1858:	88 e2       	ldi	r24, 0x28	; 40
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1860:	8c e1       	ldi	r24, 0x1C	; 28
    1862:	94 e0       	ldi	r25, 0x04	; 4
    1864:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1868:	84 e9       	ldi	r24, 0x94	; 148
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1870:	8b e1       	ldi	r24, 0x1B	; 27
    1872:	94 e0       	ldi	r25, 0x04	; 4
    1874:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1878:	8e e4       	ldi	r24, 0x4E	; 78
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1880:	89 e2       	ldi	r24, 0x29	; 41
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("nixiesleepend");		uart_puts("\t");	uart_puts("=/?");		uart_puts("\t\t");	uart_puts("nixiesleepstart + 1");	uart_puts("\t");		uart_puts("2359");			uart_puts( RETURN_NEWLINE );
    1888:	81 ed       	ldi	r24, 0xD1	; 209
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1890:	8d e1       	ldi	r24, 0x1D	; 29
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1898:	88 e2       	ldi	r24, 0x28	; 40
    189a:	94 e0       	ldi	r25, 0x04	; 4
    189c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18a0:	8c e1       	ldi	r24, 0x1C	; 28
    18a2:	94 e0       	ldi	r25, 0x04	; 4
    18a4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18a8:	83 e5       	ldi	r24, 0x53	; 83
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18b0:	8d e1       	ldi	r24, 0x1D	; 29
    18b2:	94 e0       	ldi	r25, 0x04	; 4
    18b4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18b8:	87 e6       	ldi	r24, 0x67	; 103
    18ba:	94 e0       	ldi	r25, 0x04	; 4
    18bc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18c0:	89 e2       	ldi	r24, 0x29	; 41
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("getall");			uart_puts("\t\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    18c8:	84 ef       	ldi	r24, 0xF4	; 244
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18d0:	8c e1       	ldi	r24, 0x1C	; 28
    18d2:	94 e0       	ldi	r25, 0x04	; 4
    18d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18d8:	8c e6       	ldi	r24, 0x6C	; 108
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18e0:	89 e2       	ldi	r24, 0x29	; 41
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("ramtoeeprom");		uart_puts("\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    18e8:	84 e7       	ldi	r24, 0x74	; 116
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18f0:	8d e1       	ldi	r24, 0x1D	; 29
    18f2:	94 e0       	ldi	r25, 0x04	; 4
    18f4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    18f8:	8c e6       	ldi	r24, 0x6C	; 108
    18fa:	94 e0       	ldi	r25, 0x04	; 4
    18fc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1900:	89 e2       	ldi	r24, 0x29	; 41
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("poke");				uart_puts("\t\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    1908:	80 e8       	ldi	r24, 0x80	; 128
    190a:	94 e0       	ldi	r25, 0x04	; 4
    190c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1910:	8c e1       	ldi	r24, 0x1C	; 28
    1912:	94 e0       	ldi	r25, 0x04	; 4
    1914:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1918:	8c e6       	ldi	r24, 0x6C	; 108
    191a:	94 e0       	ldi	r25, 0x04	; 4
    191c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1920:	89 e2       	ldi	r24, 0x29	; 41
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("pwrok");				uart_puts("\t\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    1928:	85 e8       	ldi	r24, 0x85	; 133
    192a:	94 e0       	ldi	r25, 0x04	; 4
    192c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1930:	8c e1       	ldi	r24, 0x1C	; 28
    1932:	94 e0       	ldi	r25, 0x04	; 4
    1934:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1938:	8c e6       	ldi	r24, 0x6C	; 108
    193a:	94 e0       	ldi	r25, 0x04	; 4
    193c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1940:	89 e2       	ldi	r24, 0x29	; 41
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("hvfeedback");		uart_puts("\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    1948:	8b e8       	ldi	r24, 0x8B	; 139
    194a:	94 e0       	ldi	r25, 0x04	; 4
    194c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1950:	8d e1       	ldi	r24, 0x1D	; 29
    1952:	94 e0       	ldi	r25, 0x04	; 4
    1954:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1958:	8c e6       	ldi	r24, 0x6C	; 108
    195a:	94 e0       	ldi	r25, 0x04	; 4
    195c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1960:	89 e2       	ldi	r24, 0x29	; 41
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("battvoltage");		uart_puts("\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    1968:	86 e9       	ldi	r24, 0x96	; 150
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1970:	8d e1       	ldi	r24, 0x1D	; 29
    1972:	94 e0       	ldi	r25, 0x04	; 4
    1974:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1978:	8c e6       	ldi	r24, 0x6C	; 108
    197a:	94 e0       	ldi	r25, 0x04	; 4
    197c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1980:	89 e2       	ldi	r24, 0x29	; 41
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    	uart_puts("rectifiedac");		uart_puts("\t");	uart_puts("[ENTER]");	uart_puts( RETURN_NEWLINE );
    1988:	82 ea       	ldi	r24, 0xA2	; 162
    198a:	94 e0       	ldi	r25, 0x04	; 4
    198c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1990:	8d e1       	ldi	r24, 0x1D	; 29
    1992:	94 e0       	ldi	r25, 0x04	; 4
    1994:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    1998:	8c e6       	ldi	r24, 0x6C	; 108
    199a:	94 e0       	ldi	r25, 0x04	; 4
    199c:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    19a0:	89 e2       	ldi	r24, 0x29	; 41
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	79 c0       	rjmp	.+242    	; 0x1a98 <process_command+0xf2e>
    }
    
    else if(strcasestr(myUartString,"ramtoeeprom") != NULL){
    19a6:	64 e7       	ldi	r22, 0x74	; 116
    19a8:	74 e0       	ldi	r23, 0x04	; 4
    19aa:	84 e3       	ldi	r24, 0x34	; 52
    19ac:	96 e0       	ldi	r25, 0x06	; 6
    19ae:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <strcasestr>
    19b2:	89 2b       	or	r24, r25
    19b4:	29 f0       	breq	.+10     	; 0x19c0 <process_command+0xe56>
    	updateVarsToEeprom();   
    19b6:	0e 94 5b 05 	call	0xab6	; 0xab6 <updateVarsToEeprom>
		uart_puts( "EEPROM Storage Complete");
    19ba:	8e ea       	ldi	r24, 0xAE	; 174
    19bc:	94 e0       	ldi	r25, 0x04	; 4
    19be:	6c c0       	rjmp	.+216    	; 0x1a98 <process_command+0xf2e>
    }
    
    else if(strstr(myUartString,"poke") != NULL){
    19c0:	60 e8       	ldi	r22, 0x80	; 128
    19c2:	74 e0       	ldi	r23, 0x04	; 4
    19c4:	84 e3       	ldi	r24, 0x34	; 52
    19c6:	96 e0       	ldi	r25, 0x06	; 6
    19c8:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strstr>
    19cc:	89 2b       	or	r24, r25
    19ce:	a9 f0       	breq	.+42     	; 0x19fa <process_command+0xe90>
        
        uart_puts( "Hello!");
    19d0:	86 ec       	ldi	r24, 0xC6	; 198
    19d2:	94 e0       	ldi	r25, 0x04	; 4
    19d4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts( RETURN_NEWLINE );
    19d8:	89 e2       	ldi	r24, 0x29	; 41
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts( "I'm Serial Number: ");
    19e0:	8d ec       	ldi	r24, 0xCD	; 205
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        uart_puts( itoa( SERIAL_NUMBER, printBuffer, 10 ) );
    19e8:	4a e0       	ldi	r20, 0x0A	; 10
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	64 e5       	ldi	r22, 0x54	; 84
    19ee:	75 e0       	ldi	r23, 0x05	; 5
    19f0:	84 e6       	ldi	r24, 0x64	; 100
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <itoa>
    19f8:	4f c0       	rjmp	.+158    	; 0x1a98 <process_command+0xf2e>
        
    }
    
    else if(strstr(myUartString,"pwrok") != NULL){
    19fa:	65 e8       	ldi	r22, 0x85	; 133
    19fc:	74 e0       	ldi	r23, 0x04	; 4
    19fe:	84 e3       	ldi	r24, 0x34	; 52
    1a00:	96 e0       	ldi	r25, 0x06	; 6
    1a02:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strstr>
    1a06:	89 2b       	or	r24, r25
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <process_command+0xea6>
        // ~0.019375 V/count
        double pwrokVolts = adc_raw[0] * 0.019375;
    1a0a:	60 91 98 06 	lds	r22, 0x0698
    1a0e:	1e c0       	rjmp	.+60     	; 0x1a4c <process_command+0xee2>
        dtostrf(pwrokVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"hvfeedback") != NULL){
    1a10:	6b e8       	ldi	r22, 0x8B	; 139
    1a12:	74 e0       	ldi	r23, 0x04	; 4
    1a14:	84 e3       	ldi	r24, 0x34	; 52
    1a16:	96 e0       	ldi	r25, 0x06	; 6
    1a18:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strstr>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	61 f0       	breq	.+24     	; 0x1a38 <process_command+0xece>
        // ~1.9375 V/count
        double hvVolts = adc_raw[1] * 1.9375;
    1a20:	60 91 99 06 	lds	r22, 0x0699
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	48 ef       	ldi	r20, 0xF8	; 248
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	27 c0       	rjmp	.+78     	; 0x1a86 <process_command+0xf1c>
        dtostrf(hvVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"battvoltage") != NULL){
    1a38:	66 e9       	ldi	r22, 0x96	; 150
    1a3a:	74 e0       	ldi	r23, 0x04	; 4
    1a3c:	84 e3       	ldi	r24, 0x34	; 52
    1a3e:	96 e0       	ldi	r25, 0x06	; 6
    1a40:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strstr>
    1a44:	89 2b       	or	r24, r25
    1a46:	61 f0       	breq	.+24     	; 0x1a60 <process_command+0xef6>
        // ~0.019375 V/count
        double battVolts = adc_raw[2] * 0.019375;
    1a48:	60 91 9a 06 	lds	r22, 0x069A
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    1a56:	22 e5       	ldi	r18, 0x52	; 82
    1a58:	38 eb       	ldi	r19, 0xB8	; 184
    1a5a:	4e e9       	ldi	r20, 0x9E	; 158
    1a5c:	5c e3       	ldi	r21, 0x3C	; 60
    1a5e:	13 c0       	rjmp	.+38     	; 0x1a86 <process_command+0xf1c>
        dtostrf(battVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    
    else if(strstr(myUartString,"rectifiedac") != NULL){
    1a60:	62 ea       	ldi	r22, 0xA2	; 162
    1a62:	74 e0       	ldi	r23, 0x04	; 4
    1a64:	84 e3       	ldi	r24, 0x34	; 52
    1a66:	96 e0       	ldi	r25, 0x06	; 6
    1a68:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strstr>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	b1 f0       	breq	.+44     	; 0x1a9c <process_command+0xf32>
    	// 1K / 1K + 4K7 = 1K / 5K7 = ~0.175438 
    	// 0.175 ^-1 = 5.7 
        // ~0.11 V/count
        double rectVolts = adc_raw[3] * 0.11;
    1a70:	60 91 9b 06 	lds	r22, 0x069B
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    1a7e:	2e ea       	ldi	r18, 0xAE	; 174
    1a80:	37 e4       	ldi	r19, 0x47	; 71
    1a82:	41 ee       	ldi	r20, 0xE1	; 225
    1a84:	5d e3       	ldi	r21, 0x3D	; 61
    1a86:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
        dtostrf(rectVolts , 10, 2, printBuffer);
    1a8a:	04 e5       	ldi	r16, 0x54	; 84
    1a8c:	15 e0       	ldi	r17, 0x05	; 5
    1a8e:	22 e0       	ldi	r18, 0x02	; 2
    1a90:	4a e0       	ldi	r20, 0x0A	; 10
    1a92:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <dtostrf>
        uart_puts(printBuffer);
    1a96:	c8 01       	movw	r24, r16
    1a98:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
    }
    uart_puts( RETURN_NEWLINE );
    1a9c:	89 e2       	ldi	r24, 0x29	; 41
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
}
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	df 90       	pop	r13
    1aaa:	cf 90       	pop	r12
        // ~0.11 V/count
        double rectVolts = adc_raw[3] * 0.11;
        dtostrf(rectVolts , 10, 2, printBuffer);
        uart_puts(printBuffer);
    }
    uart_puts( RETURN_NEWLINE );
    1aac:	0c 94 24 13 	jmp	0x2648	; 0x2648 <uart_puts>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Hours", hours);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 23, 0 ) )
            		hours = splitString(myUartString);
    1ab0:	84 e3       	ldi	r24, 0x34	; 52
    1ab2:	96 e0       	ldi	r25, 0x06	; 6
    1ab4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1ab8:	60 93 16 01 	sts	0x0116, r22
    1abc:	ef cf       	rjmp	.-34     	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Minutes", minutes);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 59, 0 ) )
            		minutes = splitString(myUartString);
    1abe:	84 e3       	ldi	r24, 0x34	; 52
    1ac0:	96 e0       	ldi	r25, 0x06	; 6
    1ac2:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1ac6:	60 93 15 01 	sts	0x0115, r22
    1aca:	e8 cf       	rjmp	.-48     	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Seconds", seconds);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 59, 0 ) )
            		seconds = splitString(myUartString);
    1acc:	84 e3       	ldi	r24, 0x34	; 52
    1ace:	96 e0       	ldi	r25, 0x06	; 6
    1ad0:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1ad4:	60 93 10 01 	sts	0x0110, r22
    1ad8:	e1 cf       	rjmp	.-62     	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("MIL Time", miltime);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		miltime = splitString(myUartString);
    1ada:	84 e3       	ldi	r24, 0x34	; 52
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1ae2:	60 93 0f 01 	sts	0x010F, r22
    1ae6:	da cf       	rjmp	.-76     	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Year", year);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2525, 0 ) )
            		year = splitString(myUartString);
    1ae8:	84 e3       	ldi	r24, 0x34	; 52
    1aea:	96 e0       	ldi	r25, 0x06	; 6
    1aec:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1af0:	70 93 12 01 	sts	0x0112, r23
    1af4:	60 93 11 01 	sts	0x0111, r22
    1af8:	d1 cf       	rjmp	.-94     	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Month", month);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 12, 0 ) )
            		month = splitString(myUartString);
    1afa:	84 e3       	ldi	r24, 0x34	; 52
    1afc:	96 e0       	ldi	r25, 0x06	; 6
    1afe:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b02:	60 93 13 01 	sts	0x0113, r22
    1b06:	ca cf       	rjmp	.-108    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Day", day);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 31, 0 ) )
            		day = splitString(myUartString);
    1b08:	84 e3       	ldi	r24, 0x34	; 52
    1b0a:	96 e0       	ldi	r25, 0x06	; 6
    1b0c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b10:	60 93 14 01 	sts	0x0114, r22
    1b14:	c3 cf       	rjmp	.-122    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Celsius", celsius);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		celsius = splitString(myUartString);
    1b16:	84 e3       	ldi	r24, 0x34	; 52
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b1e:	60 93 0e 01 	sts	0x010E, r22
    1b22:	bc cf       	rjmp	.-136    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Do Echo", doecho);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		doecho = splitString(myUartString);
    1b24:	84 e3       	ldi	r24, 0x34	; 52
    1b26:	96 e0       	ldi	r25, 0x06	; 6
    1b28:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b2c:	60 93 0d 01 	sts	0x010D, r22
    1b30:	b5 cf       	rjmp	.-150    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("AC Clock", acclock);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		acclock = splitString(myUartString);
    1b32:	84 e3       	ldi	r24, 0x34	; 52
    1b34:	96 e0       	ldi	r25, 0x06	; 6
    1b36:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b3a:	60 93 0c 01 	sts	0x010C, r22
    1b3e:	ae cf       	rjmp	.-164    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("xtalisfast", xtalisfast);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		xtalisfast = splitString(myUartString);
    1b40:	84 e3       	ldi	r24, 0x34	; 52
    1b42:	96 e0       	ldi	r25, 0x06	; 6
    1b44:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b48:	60 93 0b 01 	sts	0x010B, r22
    1b4c:	a7 cf       	rjmp	.-178    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Therm", showtherm);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showtherm = splitString(myUartString);
    1b4e:	84 e3       	ldi	r24, 0x34	; 52
    1b50:	96 e0       	ldi	r25, 0x06	; 6
    1b52:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b56:	60 93 fb 04 	sts	0x04FB, r22
    1b5a:	a0 cf       	rjmp	.-192    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Freq", showfreq);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showfreq = splitString(myUartString);
    1b5c:	84 e3       	ldi	r24, 0x34	; 52
    1b5e:	96 e0       	ldi	r25, 0x06	; 6
    1b60:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b64:	60 93 fa 04 	sts	0x04FA, r22
    1b68:	99 cf       	rjmp	.-206    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Show Date", showdate);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		showdate = splitString(myUartString);
    1b6a:	84 e3       	ldi	r24, 0x34	; 52
    1b6c:	96 e0       	ldi	r25, 0x06	; 6
    1b6e:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b72:	60 93 f9 04 	sts	0x04F9, r22
    1b76:	92 cf       	rjmp	.-220    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Toggle LED", toggleled);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 1, 0 ) )
            		toggleled = splitString(myUartString);
    1b78:	84 e3       	ldi	r24, 0x34	; 52
    1b7a:	96 e0       	ldi	r25, 0x06	; 6
    1b7c:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b80:	60 93 0a 01 	sts	0x010A, r22
    1b84:	8b cf       	rjmp	.-234    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Nixie Sleep Start Time", nixiesleepstart);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2358, 0 ) )
            		nixiesleepstart = splitString(myUartString);
    1b86:	84 e3       	ldi	r24, 0x34	; 52
    1b88:	96 e0       	ldi	r25, 0x06	; 6
    1b8a:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1b8e:	60 93 f5 04 	sts	0x04F5, r22
    1b92:	70 93 f6 04 	sts	0x04F6, r23
    1b96:	80 93 f7 04 	sts	0x04F7, r24
    1b9a:	90 93 f8 04 	sts	0x04F8, r25
    1b9e:	7e cf       	rjmp	.-260    	; 0x1a9c <process_command+0xf32>
        if(strcasestr(myUartString,"?") != NULL){
            print_value("Nixie Sleep End Time", nixiesleepend);
        }else{
        	if(strcasestr(myUartString,"=") != NULL){
        		if( inRange( splitString(myUartString), 2359, nixiesleepstart + 1 ) )
            		nixiesleepend = splitString(myUartString);
    1ba0:	84 e3       	ldi	r24, 0x34	; 52
    1ba2:	96 e0       	ldi	r25, 0x06	; 6
    1ba4:	0e 94 3f 02 	call	0x47e	; 0x47e <splitString>
    1ba8:	60 93 f1 04 	sts	0x04F1, r22
    1bac:	70 93 f2 04 	sts	0x04F2, r23
    1bb0:	80 93 f3 04 	sts	0x04F3, r24
    1bb4:	90 93 f4 04 	sts	0x04F4, r25
    1bb8:	71 cf       	rjmp	.-286    	; 0x1a9c <process_command+0xf32>

00001bba <checkSerialIn>:




void checkSerialIn()
{
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    
    unsigned int aChar = uart_getc();
    1bbe:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <uart_getc>
    1bc2:	ec 01       	movw	r28, r24
    
    if ( aChar & UART_NO_DATA )
    1bc4:	90 fd       	sbrc	r25, 0
    1bc6:	33 c0       	rjmp	.+102    	; 0x1c2e <checkSerialIn+0x74>

        /*
         * new data available from UART
         * check for Frame or Overrun error
         */
        if ( aChar & UART_FRAME_ERROR )
    1bc8:	93 ff       	sbrs	r25, 3
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <checkSerialIn+0x1a>
        {
            /* Framing Error detected, i.e no stop bit detected */
            uart_puts_P("UART Frame Error: ");
    1bcc:	88 e6       	ldi	r24, 0x68	; 104
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 30 13 	call	0x2660	; 0x2660 <uart_puts_p>
        }
        if ( aChar & UART_OVERRUN_ERROR )
    1bd4:	d2 ff       	sbrs	r29, 2
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <checkSerialIn+0x26>
            /*
             * Overrun, a character already present in the UART UDR register was
             * not read by the interrupt handler before the next character arrived,
             * one or more received characters have been dropped
             */
            uart_puts_P("UART Overrun Error: ");
    1bd8:	8b e7       	ldi	r24, 0x7B	; 123
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 30 13 	call	0x2660	; 0x2660 <uart_puts_p>
        }
        if ( aChar & UART_BUFFER_OVERFLOW )
    1be0:	d1 ff       	sbrs	r29, 1
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <checkSerialIn+0x32>
        {
            /*
             * We are not reading the receive buffer fast enough,
             * one or more received character have been dropped
             */
            uart_puts_P("Buffer overflow error: ");
    1be4:	80 e9       	ldi	r24, 0x90	; 144
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 30 13 	call	0x2660	; 0x2660 <uart_puts_p>
        /*
         * send received character back
         */
        
    // Add aChar to the growing string.
    uartString[uartStringIndex] = aChar;
    1bec:	80 91 04 05 	lds	r24, 0x0504
    1bf0:	dc 2f       	mov	r29, r28
    1bf2:	e8 2f       	mov	r30, r24
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	e8 54       	subi	r30, 0x48	; 72
    1bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfa:	c0 83       	st	Z, r28
    
    // Keep going until we see a CHAR_RETURN.
    if (uartString[uartStringIndex] == CHAR_RETURN) {
    1bfc:	cd 30       	cpi	r28, 0x0D	; 13
    1bfe:	59 f4       	brne	.+22     	; 0x1c16 <checkSerialIn+0x5c>
        // Reset to 0, ready to go again
        uartStringIndex = 0;
    1c00:	10 92 04 05 	sts	0x0504, r1
        uart_puts(RETURN_NEWLINE);
    1c04:	89 e2       	ldi	r24, 0x29	; 41
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>
        
        copy_command();
    1c0c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <copy_command>
        process_command();
    1c10:	0e 94 b5 05 	call	0xb6a	; 0xb6a <process_command>
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <checkSerialIn+0x62>
        }
    else {
        uartStringIndex++;
    1c16:	8f 5f       	subi	r24, 0xFF	; 255
    1c18:	80 93 04 05 	sts	0x0504, r24
    }
    
    if( doecho ){
    1c1c:	80 91 0d 01 	lds	r24, 0x010D
    1c20:	88 23       	and	r24, r24
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <checkSerialIn+0x74>
    	uart_putc( (unsigned char)aChar ); //echo
    1c24:	8d 2f       	mov	r24, r29
    }
        
    }
}
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    else {
        uartStringIndex++;
    }
    
    if( doecho ){
    	uart_putc( (unsigned char)aChar ); //echo
    1c2a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <uart_putc>
    }
        
    }
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <acPowerOk>:



uint8_t acPowerOk( void )
{
	if( adc_raw[0] < 51 ){	// If PWR_OK < ~2 V
    1c34:	90 91 98 06 	lds	r25, 0x0698
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	93 33       	cpi	r25, 0x33	; 51
    1c3c:	08 f4       	brcc	.+2      	; 0x1c40 <acPowerOk+0xc>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}else{
		return 1;
	}

}
    1c40:	08 95       	ret

00001c42 <__vector_11>:
// This interrupt is called at 1kHz
// Here we are keeping track of milliseconds and adjusting them slightly to get 1 clock second
// to equal 1 real world second very closely.
// Set via serial comms,  mscal = F_CPU / (F_CPU * PPM_ERROR), then set fast or slow.
ISR( TIMER1_COMPA_vect )
{
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	2f 93       	push	r18
    1c4e:	3f 93       	push	r19
    1c50:	4f 93       	push	r20
    1c52:	5f 93       	push	r21
    1c54:	6f 93       	push	r22
    1c56:	7f 93       	push	r23
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	af 93       	push	r26
    1c5e:	bf 93       	push	r27
    1c60:	ef 93       	push	r30
    1c62:	ff 93       	push	r31
    static uint16_t milliSeconds = 0;		// mS value for timekeeping 1000mS/1S
    static uint32_t clockCalCounter = 0;	// counting up the milliseconds to mscal
    const uint16_t MS_IN_SEC = 1000;		// 1000mS/1S
    static uint16_t acFreqFiltCtr = 0;		// this is incremented until it == AC_FRQ_FILT_SEC
    milliSeconds++;
    1c64:	20 91 07 05 	lds	r18, 0x0507
    1c68:	30 91 08 05 	lds	r19, 0x0508
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	30 93 08 05 	sts	0x0508, r19
    1c74:	20 93 07 05 	sts	0x0507, r18
    clockCalCounter++;
    1c78:	80 91 09 05 	lds	r24, 0x0509
    1c7c:	90 91 0a 05 	lds	r25, 0x050A
    1c80:	a0 91 0b 05 	lds	r26, 0x050B
    1c84:	b0 91 0c 05 	lds	r27, 0x050C
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	b1 1d       	adc	r27, r1
    1c8e:	80 93 09 05 	sts	0x0509, r24
    1c92:	90 93 0a 05 	sts	0x050A, r25
    1c96:	a0 93 0b 05 	sts	0x050B, r26
    1c9a:	b0 93 0c 05 	sts	0x050C, r27
    
    
    if( milliSeconds >= MS_IN_SEC )
    1c9e:	28 3e       	cpi	r18, 0xE8	; 232
    1ca0:	33 40       	sbci	r19, 0x03	; 3
    1ca2:	00 f1       	brcs	.+64     	; 0x1ce4 <__vector_11+0xa2>
    {
    	if( acclock == 0 || acPowerOk() == 0 ){	// If we are meant to use the internal xtal, not power line frequency for timekeeping.
    1ca4:	80 91 0c 01 	lds	r24, 0x010C
    1ca8:	81 11       	cpse	r24, r1
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <__vector_11+0x76>
    											// Or, if we loose AC power, and we are in AC clock mode we should step in and keep time here.
        	seconds++;          // increment seconds
    1cac:	80 91 10 01 	lds	r24, 0x0110
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	80 93 10 01 	sts	0x0110, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <__vector_11+0x7e>
    clockCalCounter++;
    
    
    if( milliSeconds >= MS_IN_SEC )
    {
    	if( acclock == 0 || acPowerOk() == 0 ){	// If we are meant to use the internal xtal, not power line frequency for timekeeping.
    1cb8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <acPowerOk>
    1cbc:	88 23       	and	r24, r24
    1cbe:	b1 f3       	breq	.-20     	; 0x1cac <__vector_11+0x6a>
    											// Or, if we loose AC power, and we are in AC clock mode we should step in and keep time here.
        	seconds++;          // increment seconds
        }
        
        	milliSeconds = 0;   // reset milliseconds
    1cc0:	10 92 08 05 	sts	0x0508, r1
    1cc4:	10 92 07 05 	sts	0x0507, r1
        
        	if( toggleled )		// Clearly toggling the LED is only available when using the internal xtal.
    1cc8:	80 91 0a 01 	lds	r24, 0x010A
    1ccc:	81 11       	cpse	r24, r1
        		toggle_led();	// Toggle the LED if allowed.
    1cce:	0e 94 27 02 	call	0x44e	; 0x44e <toggle_led>
        	acFreqFiltCtr++;	// Increment the frequency filter counter.	
    1cd2:	80 91 0d 05 	lds	r24, 0x050D
    1cd6:	90 91 0e 05 	lds	r25, 0x050E
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	90 93 0e 05 	sts	0x050E, r25
    1ce0:	80 93 0d 05 	sts	0x050D, r24
    }
    
    // For measuring the power line frequency.
	if( acFreqFiltCtr >= AC_FRQ_FILT_SEC )
    1ce4:	80 91 0d 05 	lds	r24, 0x050D
    1ce8:	90 91 0e 05 	lds	r25, 0x050E
    1cec:	cc 97       	sbiw	r24, 0x3c	; 60
    1cee:	98 f0       	brcs	.+38     	; 0x1d16 <__vector_11+0xd4>
	{
		acZeroCrossSnapshot = acZeroCrossCounter;	// Grab the current number of zero crossings since the last.
    1cf0:	80 91 ea 04 	lds	r24, 0x04EA
    1cf4:	90 91 eb 04 	lds	r25, 0x04EB
    1cf8:	90 93 e9 04 	sts	0x04E9, r25
    1cfc:	80 93 e8 04 	sts	0x04E8, r24
		acZeroCrossCounter = 0;				// Reset the number of zero crossings.
    1d00:	10 92 eb 04 	sts	0x04EB, r1
    1d04:	10 92 ea 04 	sts	0x04EA, r1
		acFreqFlag = 1;						// Signal that a computation is ready to be made.
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 e3 04 	sts	0x04E3, r24
		acFreqFiltCtr = 0;					// Reset the measurement interval counter.
    1d0e:	10 92 0e 05 	sts	0x050E, r1
    1d12:	10 92 0d 05 	sts	0x050D, r1

    

    // Only adjust the time if mscal is not 0, this way we can disable the
    // adjustment during the calibration procedure.
    if( mscal != 0 )
    1d16:	80 91 fe 04 	lds	r24, 0x04FE
    1d1a:	90 91 ff 04 	lds	r25, 0x04FF
    1d1e:	a0 91 00 05 	lds	r26, 0x0500
    1d22:	b0 91 01 05 	lds	r27, 0x0501
    1d26:	89 2b       	or	r24, r25
    1d28:	8a 2b       	or	r24, r26
    1d2a:	8b 2b       	or	r24, r27
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <__vector_11+0xee>
    1d2e:	4a c0       	rjmp	.+148    	; 0x1dc4 <__vector_11+0x182>
    {
        if( xtalisfast == 1 )
    1d30:	20 91 0b 01 	lds	r18, 0x010B
    1d34:	80 91 09 05 	lds	r24, 0x0509
    1d38:	90 91 0a 05 	lds	r25, 0x050A
    1d3c:	a0 91 0b 05 	lds	r26, 0x050B
    1d40:	b0 91 0c 05 	lds	r27, 0x050C
        {
            if( ( clockCalCounter >= mscal ) && ( milliSeconds > 1 ))
    1d44:	40 91 fe 04 	lds	r20, 0x04FE
    1d48:	50 91 ff 04 	lds	r21, 0x04FF
    1d4c:	60 91 00 05 	lds	r22, 0x0500
    1d50:	70 91 01 05 	lds	r23, 0x0501

    // Only adjust the time if mscal is not 0, this way we can disable the
    // adjustment during the calibration procedure.
    if( mscal != 0 )
    {
        if( xtalisfast == 1 )
    1d54:	21 30       	cpi	r18, 0x01	; 1
    1d56:	79 f4       	brne	.+30     	; 0x1d76 <__vector_11+0x134>
        {
            if( ( clockCalCounter >= mscal ) && ( milliSeconds > 1 ))
    1d58:	84 17       	cp	r24, r20
    1d5a:	95 07       	cpc	r25, r21
    1d5c:	a6 07       	cpc	r26, r22
    1d5e:	b7 07       	cpc	r27, r23
    1d60:	88 f1       	brcs	.+98     	; 0x1dc4 <__vector_11+0x182>
    1d62:	20 91 07 05 	lds	r18, 0x0507
    1d66:	30 91 08 05 	lds	r19, 0x0508
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	50 f1       	brcs	.+84     	; 0x1dc4 <__vector_11+0x182>
            {
                milliSeconds--;
    1d70:	21 50       	subi	r18, 0x01	; 1
    1d72:	31 09       	sbc	r19, r1
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <__vector_11+0x152>
        {
            // milliseconds must be less than 999 to avoid missing an adjustment.
            // eg if milliseconds were to be 999 and we increment it here to 1000
            // the next ISR call will make it 1001 and reset to zero just as if it
            // would for 1000 and the adjustment would be effectively canceled out.
            if( ( clockCalCounter >= mscal ) && ( milliSeconds < MS_IN_SEC - 1 ) )
    1d76:	84 17       	cp	r24, r20
    1d78:	95 07       	cpc	r25, r21
    1d7a:	a6 07       	cpc	r26, r22
    1d7c:	b7 07       	cpc	r27, r23
    1d7e:	10 f1       	brcs	.+68     	; 0x1dc4 <__vector_11+0x182>
    1d80:	20 91 07 05 	lds	r18, 0x0507
    1d84:	30 91 08 05 	lds	r19, 0x0508
    1d88:	27 3e       	cpi	r18, 0xE7	; 231
    1d8a:	43 e0       	ldi	r20, 0x03	; 3
    1d8c:	34 07       	cpc	r19, r20
    1d8e:	d0 f4       	brcc	.+52     	; 0x1dc4 <__vector_11+0x182>
            {
                milliSeconds++;
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	30 93 08 05 	sts	0x0508, r19
    1d98:	20 93 07 05 	sts	0x0507, r18
         
                // it may be that clock_cal_counter > than mscal in which case
                // I want to count the tick towards the next adjustment
                // should always be 1 or 0
                clockCalCounter = clockCalCounter - mscal;
    1d9c:	40 91 fe 04 	lds	r20, 0x04FE
    1da0:	50 91 ff 04 	lds	r21, 0x04FF
    1da4:	60 91 00 05 	lds	r22, 0x0500
    1da8:	70 91 01 05 	lds	r23, 0x0501
    1dac:	84 1b       	sub	r24, r20
    1dae:	95 0b       	sbc	r25, r21
    1db0:	a6 0b       	sbc	r26, r22
    1db2:	b7 0b       	sbc	r27, r23
    1db4:	80 93 09 05 	sts	0x0509, r24
    1db8:	90 93 0a 05 	sts	0x050A, r25
    1dbc:	a0 93 0b 05 	sts	0x050B, r26
    1dc0:	b0 93 0c 05 	sts	0x050C, r27
            }
        }
    }
    
    updateBoostConverter();	// Updated here for determinism.
    1dc4:	0e 94 44 04 	call	0x888	; 0x888 <updateBoostConverter>
}
    1dc8:	ff 91       	pop	r31
    1dca:	ef 91       	pop	r30
    1dcc:	bf 91       	pop	r27
    1dce:	af 91       	pop	r26
    1dd0:	9f 91       	pop	r25
    1dd2:	8f 91       	pop	r24
    1dd4:	7f 91       	pop	r23
    1dd6:	6f 91       	pop	r22
    1dd8:	5f 91       	pop	r21
    1dda:	4f 91       	pop	r20
    1ddc:	3f 91       	pop	r19
    1dde:	2f 91       	pop	r18
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	0f 90       	pop	r0
    1de6:	1f 90       	pop	r1
    1de8:	18 95       	reti

00001dea <turnOnOffBoostConverter>:

// Very important to use this function to turn ON or OFF the boost converter.  Read below to find out why.
// Send 1 to turn ON, send 0 ( or anything else ) to turn OFF
void turnOnOffBoostConverter( uint8_t state )
{
	if( state ){
    1dea:	88 23       	and	r24, r24
    1dec:	21 f0       	breq	.+8      	; 0x1df6 <turnOnOffBoostConverter+0xc>
		TCCR0A |= ( 1 << COM0A1 );	// Connect the output pin to the PWM controller.
    1dee:	84 b5       	in	r24, 0x24	; 36
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	84 bd       	out	0x24, r24	; 36
    1df4:	08 95       	ret
	}
	else{
		TCCR0A &= ~( 1 << COM0A1 );	// Disconnect the output pin from the PWM controller.
    1df6:	84 b5       	in	r24, 0x24	; 36
    1df8:	8f 77       	andi	r24, 0x7F	; 127
    1dfa:	84 bd       	out	0x24, r24	; 36
		PORTD &= ~( 1 << F_BOOST );	// Set the output pin low, otherwise you will have a direct short 
    1dfc:	5e 98       	cbi	0x0b, 6	; 11
    1dfe:	08 95       	ret

00001e00 <updateNixieOutputState>:




void updateNixieOutputState( void )
{
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
	uint16_t aTimeToCompare = 0;
	
	// Check to see if we have lost AC power.
	
	
	if( acPowerOk() == 0 )			// If we have lost AC power.
    1e04:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <acPowerOk>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <updateNixieOutputState+0x16>
	{
		//
		turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	// Otherwise, the voltage is good, and the nixie sleep window is either not now or is inactive.
	turnOnOffBoostConverter( 1 );	// Turn on the boost converter.
	
}
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
	
	
	if( acPowerOk() == 0 )			// If we have lost AC power.
	{
		//
		turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
    1e12:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <turnOnOffBoostConverter>
		return;						// Leave.
	}
	

		// Check to see if the nixies will go to sleep at night.
		if( nixiesleepstart != 0 )
    1e16:	40 91 f5 04 	lds	r20, 0x04F5
    1e1a:	50 91 f6 04 	lds	r21, 0x04F6
    1e1e:	60 91 f7 04 	lds	r22, 0x04F7
    1e22:	70 91 f8 04 	lds	r23, 0x04F8
    1e26:	41 15       	cp	r20, r1
    1e28:	51 05       	cpc	r21, r1
    1e2a:	61 05       	cpc	r22, r1
    1e2c:	71 05       	cpc	r23, r1
    1e2e:	59 f1       	breq	.+86     	; 0x1e86 <updateNixieOutputState+0x86>
		{
			// We aren't really comparing time here, just some integers.
			// This is because 10 AM is stored as 10000 in the sleep time vars.
			// This is OK, as it works out mathematically the same.
			
			aTimeToCompare = ( hours * 100 ) + minutes;
    1e30:	20 91 16 01 	lds	r18, 0x0116
    1e34:	80 91 15 01 	lds	r24, 0x0115
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	34 e6       	ldi	r19, 0x64	; 100
    1e3c:	23 9f       	mul	r18, r19
    1e3e:	80 0d       	add	r24, r0
    1e40:	91 1d       	adc	r25, r1
    1e42:	11 24       	eor	r1, r1
			// If the turn back ON time is the next day, it could be a smaller number than the turn OFF time.
			// If the turn back ON time is the same day, it could be a larger  number than the turn OFF time.
			// This matters due to the logic of checking if you are "inside" or "outside" the time window.
			
			// For turn ON/OFF times that are on the same day, the turn OFF time is smaller than the turn ON time.
			if( nixiesleepend >= nixiesleepstart ){
    1e44:	00 91 f1 04 	lds	r16, 0x04F1
    1e48:	10 91 f2 04 	lds	r17, 0x04F2
    1e4c:	20 91 f3 04 	lds	r18, 0x04F3
    1e50:	30 91 f4 04 	lds	r19, 0x04F4
    1e54:	aa 27       	eor	r26, r26
    1e56:	97 fd       	sbrc	r25, 7
    1e58:	a0 95       	com	r26
    1e5a:	ba 2f       	mov	r27, r26
    1e5c:	04 17       	cp	r16, r20
    1e5e:	15 07       	cpc	r17, r21
    1e60:	26 07       	cpc	r18, r22
    1e62:	37 07       	cpc	r19, r23
    1e64:	30 f0       	brcs	.+12     	; 0x1e72 <updateNixieOutputState+0x72>
				// Check to see if the time is in the sleep window.
				if( aTimeToCompare >= nixiesleepstart && aTimeToCompare < nixiesleepend )
    1e66:	84 17       	cp	r24, r20
    1e68:	95 07       	cpc	r25, r21
    1e6a:	a6 07       	cpc	r26, r22
    1e6c:	b7 07       	cpc	r27, r23
    1e6e:	58 f0       	brcs	.+22     	; 0x1e86 <updateNixieOutputState+0x86>
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <updateNixieOutputState+0x7c>
					turnOnOffBoostConverter( 0 );	// Turn off the boost converter.
					return;
				}
			}else{	// For turn ON/OFF times that are on different days, the turn OFF time is larger than the turn ON time.
				// Check to see if the time is in the sleep window.
				if( aTimeToCompare >= nixiesleepstart || aTimeToCompare < nixiesleepend ) 
    1e72:	84 17       	cp	r24, r20
    1e74:	95 07       	cpc	r25, r21
    1e76:	a6 07       	cpc	r26, r22
    1e78:	b7 07       	cpc	r27, r23
    1e7a:	40 f6       	brcc	.-112    	; 0x1e0c <updateNixieOutputState+0xc>
    1e7c:	80 17       	cp	r24, r16
    1e7e:	91 07       	cpc	r25, r17
    1e80:	a2 07       	cpc	r26, r18
    1e82:	b3 07       	cpc	r27, r19
    1e84:	18 f2       	brcs	.-122    	; 0x1e0c <updateNixieOutputState+0xc>
// Very important to use this function to turn ON or OFF the boost converter.  Read below to find out why.
// Send 1 to turn ON, send 0 ( or anything else ) to turn OFF
void turnOnOffBoostConverter( uint8_t state )
{
	if( state ){
		TCCR0A |= ( 1 << COM0A1 );	// Connect the output pin to the PWM controller.
    1e86:	84 b5       	in	r24, 0x24	; 36
    1e88:	80 68       	ori	r24, 0x80	; 128
    1e8a:	84 bd       	out	0x24, r24	; 36
		}
		
	// Otherwise, the voltage is good, and the nixie sleep window is either not now or is inactive.
	turnOnOffBoostConverter( 1 );	// Turn on the boost converter.
	
}
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <updateAcFrequency>:



void updateAcFrequency( void )
{
	if( acFreqFlag )	// acFreqFlag is set in ISR( TIMER1_COMPA_vect ) and cleared here.
    1e92:	80 91 e3 04 	lds	r24, 0x04E3
    1e96:	88 23       	and	r24, r24
    1e98:	c1 f1       	breq	.+112    	; 0x1f0a <updateAcFrequency+0x78>
		// If acFreqFlag == 1, then acZeroCrossSnapshot contains the total number of AC waveform 
		// "zero crossings" in AC_FRQ_FILT_SEC seconds.  Here we just need to compute the average and
		// stuff the result into acFrequency.
		// Then, in out main app: The contents of acFrequency is the frequency of the AC line input.
		
		acFrequency = ( acZeroCrossSnapshot / ( AC_FRQ_FILT_SEC * 60.0 ) ) * 60.0;
    1e9a:	60 91 e8 04 	lds	r22, 0x04E8
    1e9e:	70 91 e9 04 	lds	r23, 0x04E9
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 af 14 	call	0x295e	; 0x295e <__floatunsisf>
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	41 e6       	ldi	r20, 0x61	; 97
    1eb0:	55 e4       	ldi	r21, 0x45	; 69
    1eb2:	0e 94 1b 14 	call	0x2836	; 0x2836 <__divsf3>
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e7       	ldi	r20, 0x70	; 112
    1ebc:	52 e4       	ldi	r21, 0x42	; 66
    1ebe:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    1ec2:	ab 01       	movw	r20, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	40 93 e4 04 	sts	0x04E4, r20
    1eca:	50 93 e5 04 	sts	0x04E5, r21
    1ece:	60 93 e6 04 	sts	0x04E6, r22
    1ed2:	70 93 e7 04 	sts	0x04E7, r23
		
		// Since a pin change interrupt counts rising and falling edges, there are twice as many events.
		acFrequency /= 2.0;
    1ed6:	60 91 e4 04 	lds	r22, 0x04E4
    1eda:	70 91 e5 04 	lds	r23, 0x04E5
    1ede:	80 91 e6 04 	lds	r24, 0x04E6
    1ee2:	90 91 e7 04 	lds	r25, 0x04E7
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    1ef2:	ab 01       	movw	r20, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	40 93 e4 04 	sts	0x04E4, r20
    1efa:	50 93 e5 04 	sts	0x04E5, r21
    1efe:	60 93 e6 04 	sts	0x04E6, r22
    1f02:	70 93 e7 04 	sts	0x04E7, r23
		
		acFreqFlag = 0;	// Reset the counter.
    1f06:	10 92 e3 04 	sts	0x04E3, r1
    1f0a:	08 95       	ret

00001f0c <shiftRegisterPulse>:


void shiftRegisterPulse( void )
{

	PORTD |= ( 1 << SRCLK );		// set the serial clock line high.
    1f0c:	5c 9a       	sbi	0x0b, 4	; 11
	//_delay_us( 1 );							// No delay
    PORTD &= ~( 1 << SRCLK );	// Set the serial Clock line low.
    1f0e:	5c 98       	cbi	0x0b, 4	; 11
    1f10:	08 95       	ret

00001f12 <shiftRegisterSetOutput>:


void shiftRegisterSetOutput( void )
{

	PORTD |= ( 1 << RCLK );		// set the store output line high.
    1f12:	5d 9a       	sbi	0x0b, 5	; 11
	//_delay_us(1);							// No delay, might need a nop or 2.
    PORTD &= ~( 1 << RCLK );	// Set the store output line low.
    1f14:	5d 98       	cbi	0x0b, 5	; 11
    1f16:	08 95       	ret

00001f18 <shiftByteOut>:




void shiftByteOut( uint8_t byteToShift )
{
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
	PORTD &= ~( 1 << RCLK );		// Hold low while transmitting.
    1f20:	5d 98       	cbi	0x0b, 5	; 11
    1f22:	c7 e0       	ldi	r28, 0x07	; 7
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
	
	for( uint8_t i = 0; i < 8; i++ ) 
	{
		// If the MSB is high.
		if ( byteToShift & _BV( 7 - i ) ){
    1f26:	08 2f       	mov	r16, r24
    1f28:	10 e0       	ldi	r17, 0x00	; 0
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	0c 2e       	mov	r0, r28
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <shiftByteOut+0x1c>
    1f30:	95 95       	asr	r25
    1f32:	87 95       	ror	r24
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <shiftByteOut+0x18>
    1f38:	80 ff       	sbrs	r24, 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <shiftByteOut+0x28>
		
            PORTD |= ( 1 << SER );	// set the output high
    1f3c:	5b 9a       	sbi	0x0b, 3	; 11
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <shiftByteOut+0x2a>
        
        } else {
        
            PORTD &= ~( 1 << SER );	// Set the output low.
    1f40:	5b 98       	cbi	0x0b, 3	; 11
        
        }
        
        shiftRegisterPulse();
    1f42:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <shiftRegisterPulse>
    1f46:	21 97       	sbiw	r28, 0x01	; 1
    1f48:	80 f7       	brcc	.-32     	; 0x1f2a <shiftByteOut+0x12>
    }
    
    PORTD |= ( 1 << RCLK );	
    1f4a:	5d 9a       	sbi	0x0b, 5	; 11

}
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <sendIntegerToNixie>:
  Decimal			N/A				0b00001000	// & this with the digit above to turn the decimal ON.

//~~~~~~~~~~~~~~~~~~~~~~*********** Nixie Digits to BCD to Byte ***********~~~~~~~~~~~~~~~~~~~~~~~~
*/

switch ( intToSend ){
    1f56:	84 30       	cpi	r24, 0x04	; 4
    1f58:	81 f1       	breq	.+96     	; 0x1fba <sendIntegerToNixie+0x64>
    1f5a:	48 f4       	brcc	.+18     	; 0x1f6e <sendIntegerToNixie+0x18>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	d9 f0       	breq	.+54     	; 0x1f96 <sendIntegerToNixie+0x40>
    1f60:	a0 f0       	brcs	.+40     	; 0x1f8a <sendIntegerToNixie+0x34>
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	f1 f0       	breq	.+60     	; 0x1fa2 <sendIntegerToNixie+0x4c>
    1f66:	83 30       	cpi	r24, 0x03	; 3
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <sendIntegerToNixie+0x16>
    1f6a:	4c c0       	rjmp	.+152    	; 0x2004 <sendIntegerToNixie+0xae>
    1f6c:	20 c0       	rjmp	.+64     	; 0x1fae <sendIntegerToNixie+0x58>
    1f6e:	87 30       	cpi	r24, 0x07	; 7
    1f70:	b1 f1       	breq	.+108    	; 0x1fde <sendIntegerToNixie+0x88>
    1f72:	30 f4       	brcc	.+12     	; 0x1f80 <sendIntegerToNixie+0x2a>
    1f74:	85 30       	cpi	r24, 0x05	; 5
    1f76:	39 f1       	breq	.+78     	; 0x1fc6 <sendIntegerToNixie+0x70>
    1f78:	86 30       	cpi	r24, 0x06	; 6
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <sendIntegerToNixie+0x28>
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <sendIntegerToNixie+0xae>
    1f7e:	29 c0       	rjmp	.+82     	; 0x1fd2 <sendIntegerToNixie+0x7c>
    1f80:	88 30       	cpi	r24, 0x08	; 8
    1f82:	99 f1       	breq	.+102    	; 0x1fea <sendIntegerToNixie+0x94>
    1f84:	89 30       	cpi	r24, 0x09	; 9
    1f86:	f1 f5       	brne	.+124    	; 0x2004 <sendIntegerToNixie+0xae>
    1f88:	36 c0       	rjmp	.+108    	; 0x1ff6 <sendIntegerToNixie+0xa0>
	
	case 0:
		if( doDecimal ){
    1f8a:	66 23       	and	r22, r22
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <sendIntegerToNixie+0x3c>
			shiftByteOut( 0b00000000 | 0b00010000 );
    1f8e:	80 e1       	ldi	r24, 0x10	; 16
    1f90:	37 c0       	rjmp	.+110    	; 0x2000 <sendIntegerToNixie+0xaa>
		}else{
			shiftByteOut( 0b00000000 );
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	35 c0       	rjmp	.+106    	; 0x2000 <sendIntegerToNixie+0xaa>
		}
	break;
	
	
	case 1:
	if( doDecimal ){
    1f96:	66 23       	and	r22, r22
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <sendIntegerToNixie+0x48>
		shiftByteOut( 0b00000001 | 0b00010000 );
    1f9a:	81 e1       	ldi	r24, 0x11	; 17
    1f9c:	31 c0       	rjmp	.+98     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000001 );
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	2f c0       	rjmp	.+94     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	

	case 2:
	if( doDecimal ){
    1fa2:	66 23       	and	r22, r22
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <sendIntegerToNixie+0x54>
		shiftByteOut( 0b00000010 | 0b00010000 );
    1fa6:	82 e1       	ldi	r24, 0x12	; 18
    1fa8:	2b c0       	rjmp	.+86     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000010 );
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	29 c0       	rjmp	.+82     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 3:
	if( doDecimal ){
    1fae:	66 23       	and	r22, r22
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <sendIntegerToNixie+0x60>
		shiftByteOut( 0b00000011 | 0b00010000 );
    1fb2:	83 e1       	ldi	r24, 0x13	; 19
    1fb4:	25 c0       	rjmp	.+74     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000011 );
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	23 c0       	rjmp	.+70     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 4:
	if( doDecimal ){
    1fba:	66 23       	and	r22, r22
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <sendIntegerToNixie+0x6c>
		shiftByteOut( 0b00000100 | 0b00010000 );
    1fbe:	84 e1       	ldi	r24, 0x14	; 20
    1fc0:	1f c0       	rjmp	.+62     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000100 );
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	1d c0       	rjmp	.+58     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 5:
	if( doDecimal ){
    1fc6:	66 23       	and	r22, r22
    1fc8:	11 f0       	breq	.+4      	; 0x1fce <sendIntegerToNixie+0x78>
		shiftByteOut( 0b00000101 | 0b00010000 );
    1fca:	85 e1       	ldi	r24, 0x15	; 21
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000101 );
    1fce:	85 e0       	ldi	r24, 0x05	; 5
    1fd0:	17 c0       	rjmp	.+46     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 6:
	if( doDecimal ){
    1fd2:	66 23       	and	r22, r22
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <sendIntegerToNixie+0x84>
		shiftByteOut( 0b00000110 | 0b00010000 );
    1fd6:	86 e1       	ldi	r24, 0x16	; 22
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000110 );
    1fda:	86 e0       	ldi	r24, 0x06	; 6
    1fdc:	11 c0       	rjmp	.+34     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 7:
	if( doDecimal ){
    1fde:	66 23       	and	r22, r22
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <sendIntegerToNixie+0x90>
		shiftByteOut( 0b00000111 | 0b00010000 );
    1fe2:	87 e1       	ldi	r24, 0x17	; 23
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00000111 );
    1fe6:	87 e0       	ldi	r24, 0x07	; 7
    1fe8:	0b c0       	rjmp	.+22     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 8:
	if( doDecimal ){
    1fea:	66 23       	and	r22, r22
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <sendIntegerToNixie+0x9c>
		shiftByteOut( 0b00001000 | 0b00010000 );
    1fee:	88 e1       	ldi	r24, 0x18	; 24
    1ff0:	07 c0       	rjmp	.+14     	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00001000 );
    1ff2:	88 e0       	ldi	r24, 0x08	; 8
    1ff4:	05 c0       	rjmp	.+10     	; 0x2000 <sendIntegerToNixie+0xaa>
	}
	break;
	
	
	case 9:
	if( doDecimal ){
    1ff6:	66 23       	and	r22, r22
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <sendIntegerToNixie+0xa8>
		shiftByteOut( 0b00001001 | 0b00010000 );
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <sendIntegerToNixie+0xaa>
	}else{
		shiftByteOut( 0b00001001 );
    1ffe:	89 e0       	ldi	r24, 0x09	; 9
    2000:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <shiftByteOut>
    2004:	08 95       	ret

00002006 <antiCathodePoisonPattern>:

// Read about cathode poisoning on the web.  
// Basically we just want to make sure each nixie element gets some burn time
// otherwise the unused elements will underperform and get dim or dark spots.
void antiCathodePoisonPattern( uint16_t delay )
{		
    2006:	3f 92       	push	r3
    2008:	4f 92       	push	r4
    200a:	5f 92       	push	r5
    200c:	6f 92       	push	r6
    200e:	7f 92       	push	r7
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2028:	10 e0       	ldi	r17, 0x00	; 0
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
			_delay_ms( delay );
    202a:	6c 01       	movw	r12, r24
    202c:	e1 2c       	mov	r14, r1
    202e:	f1 2c       	mov	r15, r1
    2030:	c9 e9       	ldi	r28, 0x99	; 153
    2032:	d1 e0       	ldi	r29, 0x01	; 1
    2034:	7b c0       	rjmp	.+246    	; 0x212c <antiCathodePoisonPattern+0x126>
void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	81 2f       	mov	r24, r17
    203a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	a8 1a       	sub	r10, r24
    2042:	b1 08       	sbc	r11, r1
// otherwise the unused elements will underperform and get dim or dark spots.
void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
			for( int j = 0; j < 6; j++ ){
    2044:	c1 f7       	brne	.-16     	; 0x2036 <antiCathodePoisonPattern+0x30>
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
    2046:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <shiftRegisterSetOutput>
			_delay_ms( delay );
    204a:	c7 01       	movw	r24, r14
    204c:	b6 01       	movw	r22, r12
    204e:	0e 94 af 14 	call	0x295e	; 0x295e <__floatunsisf>
    2052:	4b 01       	movw	r8, r22
    2054:	5c 01       	movw	r10, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	55 e4       	ldi	r21, 0x45	; 69
    205e:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    2062:	76 2e       	mov	r7, r22
    2064:	67 2e       	mov	r6, r23
    2066:	58 2e       	mov	r5, r24
    2068:	49 2e       	mov	r4, r25
	if (__tmp < 1.0)
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	d3 01       	movw	r26, r6
    2074:	f2 01       	movw	r30, r4
    2076:	6b 2f       	mov	r22, r27
    2078:	7a 2f       	mov	r23, r26
    207a:	8f 2f       	mov	r24, r31
    207c:	9e 2f       	mov	r25, r30
    207e:	0e 94 17 14 	call	0x282e	; 0x282e <__cmpsf2>
    2082:	87 fd       	sbrc	r24, 7
    2084:	2b c0       	rjmp	.+86     	; 0x20dc <antiCathodePoisonPattern+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	d3 01       	movw	r26, r6
    2090:	f2 01       	movw	r30, r4
    2092:	6b 2f       	mov	r22, r27
    2094:	7a 2f       	mov	r23, r26
    2096:	8f 2f       	mov	r24, r31
    2098:	9e 2f       	mov	r25, r30
    209a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__gesf2>
    209e:	18 16       	cp	r1, r24
    20a0:	a4 f4       	brge	.+40     	; 0x20ca <antiCathodePoisonPattern+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	c5 01       	movw	r24, r10
    20ac:	b4 01       	movw	r22, r8
    20ae:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    20b2:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <antiCathodePoisonPattern+0xbc>
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <antiCathodePoisonPattern+0xb4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	61 50       	subi	r22, 0x01	; 1
    20c0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	61 15       	cp	r22, r1
    20c4:	71 05       	cpc	r23, r1
    20c6:	c1 f7       	brne	.-16     	; 0x20b8 <antiCathodePoisonPattern+0xb2>
    20c8:	0e c0       	rjmp	.+28     	; 0x20e6 <antiCathodePoisonPattern+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	a3 01       	movw	r20, r6
    20cc:	92 01       	movw	r18, r4
    20ce:	65 2f       	mov	r22, r21
    20d0:	74 2f       	mov	r23, r20
    20d2:	83 2f       	mov	r24, r19
    20d4:	92 2f       	mov	r25, r18
    20d6:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <antiCathodePoisonPattern+0xda>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	cb 01       	movw	r24, r22
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <antiCathodePoisonPattern+0xdc>
    20e6:	1f 5f       	subi	r17, 0xFF	; 255
// Basically we just want to make sure each nixie element gets some burn time
// otherwise the unused elements will underperform and get dim or dark spots.
void antiCathodePoisonPattern( uint16_t delay )
{		
		// Count up.
		for( int i = 0; i < 10; i++ ){
    20e8:	1a 30       	cpi	r17, 0x0A	; 10
    20ea:	01 f5       	brne	.+64     	; 0x212c <antiCathodePoisonPattern+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	a3 01       	movw	r20, r6
    20ee:	92 01       	movw	r18, r4
    20f0:	65 2f       	mov	r22, r21
    20f2:	76 2d       	mov	r23, r6
    20f4:	83 2f       	mov	r24, r19
    20f6:	94 2d       	mov	r25, r4
    20f8:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    20fc:	8b 01       	movw	r16, r22
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	d3 01       	movw	r26, r6
    2108:	f2 01       	movw	r30, r4
    210a:	6b 2f       	mov	r22, r27
    210c:	76 2d       	mov	r23, r6
    210e:	8f 2f       	mov	r24, r31
    2110:	94 2d       	mov	r25, r4
    2112:	0e 94 17 14 	call	0x282e	; 0x282e <__cmpsf2>
    2116:	87 ff       	sbrs	r24, 7
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <antiCathodePoisonPattern+0x11a>
    211a:	c1 e0       	ldi	r28, 0x01	; 1
    211c:	d0 e0       	ldi	r29, 0x00	; 0
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <antiCathodePoisonPattern+0x11c>
    2120:	e8 01       	movw	r28, r16
    2122:	38 e0       	ldi	r19, 0x08	; 8
    2124:	33 2e       	mov	r3, r19
    2126:	09 e9       	ldi	r16, 0x99	; 153
    2128:	11 e0       	ldi	r17, 0x01	; 1
    212a:	43 c0       	rjmp	.+134    	; 0x21b2 <antiCathodePoisonPattern+0x1ac>

// Read about cathode poisoning on the web.  
// Basically we just want to make sure each nixie element gets some burn time
// otherwise the unused elements will underperform and get dim or dark spots.
void antiCathodePoisonPattern( uint16_t delay )
{		
    212c:	26 e0       	ldi	r18, 0x06	; 6
    212e:	a2 2e       	mov	r10, r18
    2130:	b1 2c       	mov	r11, r1
    2132:	81 cf       	rjmp	.-254    	; 0x2036 <antiCathodePoisonPattern+0x30>
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
			for( int j = 0; j < 6; j++ ){
				sendIntegerToNixie( i, 1 );
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	83 2d       	mov	r24, r3
    2138:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	e8 1a       	sub	r14, r24
    2140:	f1 08       	sbc	r15, r1
			_delay_ms( delay );
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
			for( int j = 0; j < 6; j++ ){
    2142:	c1 f7       	brne	.-16     	; 0x2134 <antiCathodePoisonPattern+0x12e>
				sendIntegerToNixie( i, 1 );
			}
			
			shiftRegisterSetOutput();
    2144:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <shiftRegisterSetOutput>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	d3 01       	movw	r26, r6
    2152:	f2 01       	movw	r30, r4
    2154:	6b 2f       	mov	r22, r27
    2156:	76 2d       	mov	r23, r6
    2158:	8f 2f       	mov	r24, r31
    215a:	94 2d       	mov	r25, r4
    215c:	0e 94 17 14 	call	0x282e	; 0x282e <__cmpsf2>
    2160:	87 fd       	sbrc	r24, 7
    2162:	22 c0       	rjmp	.+68     	; 0x21a8 <antiCathodePoisonPattern+0x1a2>
		__ticks = 1;
	else if (__tmp > 65535)
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	d3 01       	movw	r26, r6
    216e:	f2 01       	movw	r30, r4
    2170:	6b 2f       	mov	r22, r27
    2172:	76 2d       	mov	r23, r6
    2174:	8f 2f       	mov	r24, r31
    2176:	94 2d       	mov	r25, r4
    2178:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__gesf2>
    217c:	18 16       	cp	r1, r24
    217e:	a4 f4       	brge	.+40     	; 0x21a8 <antiCathodePoisonPattern+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	c5 01       	movw	r24, r10
    218a:	b4 01       	movw	r22, r8
    218c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    2190:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <antiCathodePoisonPattern+0x19a>
    2196:	c8 01       	movw	r24, r16
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <antiCathodePoisonPattern+0x192>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	61 50       	subi	r22, 0x01	; 1
    219e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	61 15       	cp	r22, r1
    21a2:	71 05       	cpc	r23, r1
    21a4:	c1 f7       	brne	.-16     	; 0x2196 <antiCathodePoisonPattern+0x190>
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <antiCathodePoisonPattern+0x1a8>
    21a8:	ce 01       	movw	r24, r28
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <antiCathodePoisonPattern+0x1a4>
    21ae:	3a 94       	dec	r3
			shiftRegisterSetOutput();
			_delay_ms( delay );
		}
		
		// Count down.
		for( int i = 8; i >= 1; i-- ){
    21b0:	21 f0       	breq	.+8      	; 0x21ba <antiCathodePoisonPattern+0x1b4>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    21b2:	96 e0       	ldi	r25, 0x06	; 6
    21b4:	e9 2e       	mov	r14, r25
    21b6:	f1 2c       	mov	r15, r1
    21b8:	bd cf       	rjmp	.-134    	; 0x2134 <antiCathodePoisonPattern+0x12e>
			}
			
			shiftRegisterSetOutput();
			_delay_ms( delay );
		}
}
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	7f 90       	pop	r7
    21d4:	6f 90       	pop	r6
    21d6:	5f 90       	pop	r5
    21d8:	4f 90       	pop	r4
    21da:	3f 90       	pop	r3
    21dc:	08 95       	ret

000021de <checkCathodePoison>:

// See antiCathodePoisonPattern() comments.
void checkCathodePoison( void )
{
		// Anti-poison the cathodes every 30 minutes.
        if( minutes == 30 || minutes == 0){
    21de:	80 91 15 01 	lds	r24, 0x0115
    21e2:	8e 31       	cpi	r24, 0x1E	; 30
    21e4:	11 f0       	breq	.+4      	; 0x21ea <checkCathodePoison+0xc>
    21e6:	81 11       	cpse	r24, r1
    21e8:	3a c0       	rjmp	.+116    	; 0x225e <checkCathodePoison+0x80>
        	if( cathodePoisonFlag == 1 ){
    21ea:	80 91 e2 04 	lds	r24, 0x04E2
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	b1 f5       	brne	.+108    	; 0x225e <checkCathodePoison+0x80>
        		antiCathodePoisonPattern( 250 );
    21f2:	8a ef       	ldi	r24, 0xFA	; 250
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 225 );
    21fa:	81 ee       	ldi	r24, 0xE1	; 225
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 200 );
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 175 );
    220a:	8f ea       	ldi	r24, 0xAF	; 175
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 150 );
    2212:	86 e9       	ldi	r24, 0x96	; 150
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 125 );
    221a:	8d e7       	ldi	r24, 0x7D	; 125
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 100 );
    2222:	84 e6       	ldi	r24, 0x64	; 100
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 75 );
    222a:	8b e4       	ldi	r24, 0x4B	; 75
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 50 );
    2232:	82 e3       	ldi	r24, 0x32	; 50
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 25 );
    223a:	89 e1       	ldi	r24, 0x19	; 25
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 10 );
    2242:	8a e0       	ldi	r24, 0x0A	; 10
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 10 );
    224a:	8a e0       	ldi	r24, 0x0A	; 10
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		antiCathodePoisonPattern( 5 );
    2252:	85 e0       	ldi	r24, 0x05	; 5
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 03 10 	call	0x2006	; 0x2006 <antiCathodePoisonPattern>
        		cathodePoisonFlag = 0;				// Reset the counter.
    225a:	10 92 e2 04 	sts	0x04E2, r1
    225e:	08 95       	ret

00002260 <nixiePrintTemperature>:




void nixiePrintTemperature( void )
{
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
	
	uint8_t isNegative = 0;		// 0 for positive temperatures, 1 for negative
	
	// Determine if the temperature is negative.
	// If so, we will set the leftmost nixie to "1".
	if( averageCelsiusTemperature >= 0 ){
    226e:	c0 90 02 01 	lds	r12, 0x0102
    2272:	d0 90 03 01 	lds	r13, 0x0103
    2276:	e0 90 04 01 	lds	r14, 0x0104
    227a:	f0 90 05 01 	lds	r15, 0x0105
    227e:	d1 e0       	ldi	r29, 0x01	; 1
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	a9 01       	movw	r20, r18
    2286:	c7 01       	movw	r24, r14
    2288:	b6 01       	movw	r22, r12
    228a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__gesf2>
    228e:	87 fd       	sbrc	r24, 7
    2290:	d0 e0       	ldi	r29, 0x00	; 0
    2292:	c1 e0       	ldi	r28, 0x01	; 1
    2294:	cd 27       	eor	r28, r29
	
	// Get the current temperature reading.
	double absValTemperature = averageCelsiusTemperature;
	
	// And if negative, convert to absolute value of the temperature reading.
	if( averageCelsiusTemperature < 0 )
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	a9 01       	movw	r20, r18
    229c:	c7 01       	movw	r24, r14
    229e:	b6 01       	movw	r22, r12
    22a0:	0e 94 17 14 	call	0x282e	; 0x282e <__cmpsf2>
    22a4:	87 ff       	sbrs	r24, 7
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <nixiePrintTemperature+0x50>
		absValTemperature *= -1; 
    22a8:	f7 fa       	bst	r15, 7
    22aa:	f0 94       	com	r15
    22ac:	f7 f8       	bld	r15, 7
    22ae:	f0 94       	com	r15
	
		
	// Convert to Fahrenheit if necessary. 
	if( celsius == 0 )	
    22b0:	80 91 0e 01 	lds	r24, 0x010E
    22b4:	81 11       	cpse	r24, r1
    22b6:	12 c0       	rjmp	.+36     	; 0x22dc <nixiePrintTemperature+0x7c>
    {
    	absValTemperature = ( absValTemperature * 1.8 ) + 32;
    22b8:	26 e6       	ldi	r18, 0x66	; 102
    22ba:	36 e6       	ldi	r19, 0x66	; 102
    22bc:	46 ee       	ldi	r20, 0xE6	; 230
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	c7 01       	movw	r24, r14
    22c2:	b6 01       	movw	r22, r12
    22c4:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	52 e4       	ldi	r21, 0x42	; 66
    22d0:	0e 94 b3 13 	call	0x2766	; 0x2766 <__addsf3>
    22d4:	c6 2e       	mov	r12, r22
    22d6:	d7 2e       	mov	r13, r23
    22d8:	e8 2e       	mov	r14, r24
    22da:	f9 2e       	mov	r15, r25
    }
   
    
    // The temperature reading to the left of the decimal point. 
	uint8_t intPartTemperature = absValTemperature;	
    22dc:	c7 01       	movw	r24, r14
    22de:	b6 01       	movw	r22, r12
    22e0:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    22e4:	d6 2f       	mov	r29, r22
		
		
	// Temperature reading to the right of the decimal point.						
	uint8_t decimalPartTemperature = ( absValTemperature - intPartTemperature ) * 100;
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 b1 14 	call	0x2962	; 0x2962 <__floatsisf>
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	c7 01       	movw	r24, r14
    22f6:	b6 01       	movw	r22, r12
    22f8:	0e 94 b2 13 	call	0x2764	; 0x2764 <__subsf3>
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	48 ec       	ldi	r20, 0xC8	; 200
    2302:	52 e4       	ldi	r21, 0x42	; 66
    2304:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    2308:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    230c:	86 2f       	mov	r24, r22
	uint8_t ones = 0;		// For outputting the digits to the nixies in order.
	uint8_t tens = 0;
	uint8_t hundreds = 0;
				
	// starting from the rightmost, decimal portion of the temperature.
	ones = decimalPartTemperature % 10;	// Grab the specific digits.
    230e:	1a e0       	ldi	r17, 0x0A	; 10
    2310:	61 2f       	mov	r22, r17
    2312:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2316:	f8 2e       	mov	r15, r24
    2318:	89 2f       	mov	r24, r25
	tens = decimalPartTemperature / 10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );		// Display the decimal point.
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	8f 2d       	mov	r24, r15
    2324:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    2328:	8d 2f       	mov	r24, r29
    232a:	61 2f       	mov	r22, r17
    232c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2330:	d8 2f       	mov	r29, r24
    2332:	89 2f       	mov	r24, r25
    tens = intPartTemperature % 10;
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    tens = intPartTemperature % 10;
    233a:	8d 2f       	mov	r24, r29
    233c:	61 2f       	mov	r22, r17
    233e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2342:	d8 2f       	mov	r29, r24
    2344:	89 2f       	mov	r24, r25
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	// And now the integer portion.
    ones = intPartTemperature % 10;   
    intPartTemperature /= 10;
    tens = intPartTemperature % 10;
    intPartTemperature /= 10;
    hundreds = intPartTemperature %10;		
    234c:	8d 2f       	mov	r24, r29
    234e:	61 2f       	mov	r22, r17
    2350:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2354:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
	sendIntegerToNixie( hundreds, 0 );
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	sendIntegerToNixie( isNegative, 0 );	// Is the temperature negative?
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	8c 2f       	mov	r24, r28

}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
	
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
	sendIntegerToNixie( hundreds, 0 );
	
	sendIntegerToNixie( isNegative, 0 );	// Is the temperature negative?
    236e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <sendIntegerToNixie>

00002372 <nixiePrintTime>:




void nixiePrintTime( uint8_t doToggleDecimal )
{
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
	int myDecimal = 1;
	
	if( doToggleDecimal ){			// Toggle the nixie Decimal point.
    2378:	88 23       	and	r24, r24
    237a:	31 f0       	breq	.+12     	; 0x2388 <nixiePrintTime+0x16>
		if( seconds % 2 == 0 ){
    237c:	80 91 10 01 	lds	r24, 0x0110
    2380:	80 95       	com	r24
			myDecimal = 1;
		}
		else{
			myDecimal = 0;
    2382:	81 70       	andi	r24, 0x01	; 1
    2384:	c8 2f       	mov	r28, r24
    2386:	02 c0       	rjmp	.+4      	; 0x238c <nixiePrintTime+0x1a>
			}
		}else{
			myDecimal = 1;	// Else, they are steady ON.	
    2388:	c1 e0       	ldi	r28, 0x01	; 1
    238a:	d0 e0       	ldi	r29, 0x00	; 0
	// It can happen that nixiePrintTime() is called before updateDateTime() has had a change to roll over the seconds.
	// In which case seconds here can be >= 60.  This does not effect the determinism or accuracy of the clock.  
	// However, it may be disturbing to some people to see 60 seconds displayed on a clock when it should be 0::59.
	// We will adjust the 10's of seconds below, the one's of seconds will take care of themselves.
	 
	uint8_t tens = seconds;
    238c:	20 91 10 01 	lds	r18, 0x0110
	uint8_t ones = tens;
				
	tens /= 10;		// Get the "ten's" of seconds.
    2390:	82 2f       	mov	r24, r18
    2392:	6a e0       	ldi	r22, 0x0A	; 10
    2394:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2398:	18 2f       	mov	r17, r24
	if( tens > 5 )
    239a:	86 30       	cpi	r24, 0x06	; 6
    239c:	08 f0       	brcs	.+2      	; 0x23a0 <nixiePrintTime+0x2e>
		tens = 0;	// Restrict the display to 0::59 seconds. ( Read above that this does not affect accuracy of timekeeping. )
    239e:	10 e0       	ldi	r17, 0x00	; 0
	ones %= 10;		// Get the "one's" of seconds
    23a0:	da e0       	ldi	r29, 0x0A	; 10
    23a2:	82 2f       	mov	r24, r18
    23a4:	6d 2f       	mov	r22, r29
    23a6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    23aa:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, myDecimal );
    23b2:	6c 2f       	mov	r22, r28
    23b4:	81 2f       	mov	r24, r17
    23b6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	
	// Minutes
	tens = minutes;
    23ba:	80 91 15 01 	lds	r24, 0x0115
	ones = tens;
	
	tens /= 10;		// Get the "ten's" of minutes.
	ones %= 10;		// Get the "one's" of minutes
    23be:	6d 2f       	mov	r22, r29
    23c0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    23c4:	d8 2f       	mov	r29, r24
    23c6:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, myDecimal );
    23ce:	6c 2f       	mov	r22, r28
    23d0:	8d 2f       	mov	r24, r29
    23d2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	
	// Hours
	uint8_t myHours = hours;
    23d6:	80 91 16 01 	lds	r24, 0x0116
	
	if( miltime == 0 && hours > 12 )
    23da:	90 91 0f 01 	lds	r25, 0x010F
    23de:	91 11       	cpse	r25, r1
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <nixiePrintTime+0x76>
    23e2:	8d 30       	cpi	r24, 0x0D	; 13
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <nixiePrintTime+0x76>
		myHours -= 12;
    23e6:	8c 50       	subi	r24, 0x0C	; 12
		
	tens = myHours;
	ones = tens;
	
	tens /= 10;		// Get the "ten's" of hours.
	ones %= 10;		// Get the "one's" of hours.
    23e8:	6a e0       	ldi	r22, 0x0A	; 10
    23ea:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    23ee:	c8 2f       	mov	r28, r24
    23f0:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 0 );
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	8c 2f       	mov	r24, r28

}
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
	
	tens /= 10;		// Get the "ten's" of hours.
	ones %= 10;		// Get the "one's" of hours.
	
	sendIntegerToNixie( ones, 0 );
	sendIntegerToNixie( tens, 0 );
    2402:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <sendIntegerToNixie>

00002406 <nixiePrintDate>:




void nixiePrintDate( void )
{
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
	// Printing the date in YY.MM.DD format to the nixies
	
	// Print the day.
	uint8_t ones = day;
    240e:	80 91 14 01 	lds	r24, 0x0114
	uint8_t tens = ones;
				
	tens /= 10;		// Get the "ten's" of days.
	ones %= 10;		// Get the "one's" of days.
    2412:	ca e0       	ldi	r28, 0x0A	; 10
    2414:	6c 2f       	mov	r22, r28
    2416:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    241a:	d8 2f       	mov	r29, r24
    241c:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	8d 2f       	mov	r24, r29
    2428:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	
	
	// Print the month.
	 ones = month;
    242c:	80 91 13 01 	lds	r24, 0x0113
	 tens = ones;
				
	tens /= 10;		// Get the "ten's" of months.
	ones %= 10;		// Get the "one's" of months.
    2430:	6c 2f       	mov	r22, r28
    2432:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__udivmodqi4>
    2436:	c8 2f       	mov	r28, r24
    2438:	89 2f       	mov	r24, r25
	
	sendIntegerToNixie( ones, 0 );
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	sendIntegerToNixie( tens, 1 );
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	8c 2f       	mov	r24, r28
    2444:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>

	
	// Print the Year.
	uint16_t myYear = year;
    2448:	80 91 11 01 	lds	r24, 0x0111
    244c:	90 91 12 01 	lds	r25, 0x0112
	
	ones = myYear % 10;   
    2450:	ca e0       	ldi	r28, 0x0A	; 10
    2452:	d0 e0       	ldi	r29, 0x00	; 0
    2454:	be 01       	movw	r22, r28
    2456:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
    245a:	8b 01       	movw	r16, r22
    myYear /= 10;
    tens = myYear % 10;
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
	// Print the Year.
	uint16_t myYear = year;
	
	ones = myYear % 10;   
    myYear /= 10;
    tens = myYear % 10;
    2462:	c8 01       	movw	r24, r16
    2464:	be 01       	movw	r22, r28
    2466:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    246a:	60 e0       	ldi	r22, 0x00	; 0
	
}
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
	ones = myYear % 10;   
    myYear /= 10;
    tens = myYear % 10;
    
	sendIntegerToNixie( ones, 0 );		// Display the digits.
	sendIntegerToNixie( tens, 0 );		
    2474:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <sendIntegerToNixie>

00002478 <nixiePrintAcFrequency>:




void nixiePrintAcFrequency( void )
{
    2478:	af 92       	push	r10
    247a:	bf 92       	push	r11
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
	uint32_t myFrequency = acFrequency * 1000;	// Shift everything over 3 decimal places.
    248c:	60 91 e4 04 	lds	r22, 0x04E4
    2490:	70 91 e5 04 	lds	r23, 0x04E5
    2494:	80 91 e6 04 	lds	r24, 0x04E6
    2498:	90 91 e7 04 	lds	r25, 0x04E7
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsf3>
    24a8:	0e 94 83 14 	call	0x2906	; 0x2906 <__fixunssfsi>
    24ac:	b6 2e       	mov	r11, r22
    24ae:	a7 2e       	mov	r10, r23
    24b0:	18 2f       	mov	r17, r24
    24b2:	09 2f       	mov	r16, r25
	uint8_t intToSend = 0;						// The extracted digit to send to the nixie.
	
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
    24b4:	c0 e0       	ldi	r28, 0x00	; 0
    24b6:	d0 e0       	ldi	r29, 0x00	; 0
			myDecimal = 1;
		}else{
			myDecimal = 0;
		}
		
		intToSend = myFrequency % 10;				// Extract the rightmost digit.
    24b8:	4a e0       	ldi	r20, 0x0A	; 10
    24ba:	c4 2e       	mov	r12, r20
    24bc:	d1 2c       	mov	r13, r1
    24be:	e1 2c       	mov	r14, r1
    24c0:	f1 2c       	mov	r15, r1
    24c2:	6b 2d       	mov	r22, r11
    24c4:	7a 2d       	mov	r23, r10
    24c6:	81 2f       	mov	r24, r17
    24c8:	90 2f       	mov	r25, r16
    24ca:	a7 01       	movw	r20, r14
    24cc:	96 01       	movw	r18, r12
    24ce:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__udivmodsi4>
    24d2:	86 2f       	mov	r24, r22
		myFrequency /= 10;							// Shift right.
    24d4:	b2 2e       	mov	r11, r18
    24d6:	a3 2e       	mov	r10, r19
    24d8:	14 2f       	mov	r17, r20
    24da:	05 2f       	mov	r16, r21
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
	{
		uint8_t myDecimal = 0;
		
		if( i == 2 ){		// put a decimal point in the right spot.
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	c2 30       	cpi	r28, 0x02	; 2
    24e0:	d1 05       	cpc	r29, r1
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <nixiePrintAcFrequency+0x6e>
    24e4:	60 e0       	ldi	r22, 0x00	; 0
			myDecimal = 0;
		}
		
		intToSend = myFrequency % 10;				// Extract the rightmost digit.
		myFrequency /= 10;							// Shift right.
		sendIntegerToNixie( intToSend, myDecimal );	// And print it to the nixie tubes.
    24e6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <sendIntegerToNixie>
{
	uint32_t myFrequency = acFrequency * 1000;	// Shift everything over 3 decimal places.
	uint8_t intToSend = 0;						// The extracted digit to send to the nixie.
	
	// Loop 5 times because we have 5 digits to display.
	for( int i = 0; i < 5; i++ )
    24ea:	21 96       	adiw	r28, 0x01	; 1
    24ec:	c5 30       	cpi	r28, 0x05	; 5
    24ee:	d1 05       	cpc	r29, r1
    24f0:	41 f7       	brne	.-48     	; 0x24c2 <nixiePrintAcFrequency+0x4a>
	
	case 0:
		if( doDecimal ){
			shiftByteOut( 0b00000000 | 0b00010000 );
		}else{
			shiftByteOut( 0b00000000 );
    24f2:	80 e0       	ldi	r24, 0x00	; 0
		sendIntegerToNixie( intToSend, myDecimal );	// And print it to the nixie tubes.
	}
	
	sendIntegerToNixie( 0, 0 );		//  Send an extra "0" to shift everything "right" one.

}
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	cf 90       	pop	r12
    2504:	bf 90       	pop	r11
    2506:	af 90       	pop	r10
	
	case 0:
		if( doDecimal ){
			shiftByteOut( 0b00000000 | 0b00010000 );
		}else{
			shiftByteOut( 0b00000000 );
    2508:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <shiftByteOut>

0000250c <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    250c:	1f 92       	push	r1
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	0f 92       	push	r0
    2514:	11 24       	eor	r1, r1
    2516:	2f 93       	push	r18
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	ef 93       	push	r30
    251e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2520:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    2524:	90 91 c6 00 	lds	r25, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2528:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    252a:	e0 91 11 05 	lds	r30, 0x0511
    252e:	ef 5f       	subi	r30, 0xFF	; 255
    2530:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    2532:	20 91 10 05 	lds	r18, 0x0510
    2536:	e2 17       	cp	r30, r18
    2538:	39 f0       	breq	.+14     	; 0x2548 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    253a:	e0 93 11 05 	sts	0x0511, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	ec 5e       	subi	r30, 0xEC	; 236
    2542:	fa 4f       	sbci	r31, 0xFA	; 250
    2544:	90 83       	st	Z, r25
    2546:	01 c0       	rjmp	.+2      	; 0x254a <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2548:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    254a:	80 93 0f 05 	sts	0x050F, r24
}
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	2f 91       	pop	r18
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2574:	90 91 13 05 	lds	r25, 0x0513
    2578:	80 91 12 05 	lds	r24, 0x0512
    257c:	98 17       	cp	r25, r24
    257e:	69 f0       	breq	.+26     	; 0x259a <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2580:	e0 91 12 05 	lds	r30, 0x0512
    2584:	ef 5f       	subi	r30, 0xFF	; 255
    2586:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2588:	e0 93 12 05 	sts	0x0512, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	ec 5c       	subi	r30, 0xCC	; 204
    2590:	fa 4f       	sbci	r31, 0xFA	; 250
    2592:	80 81       	ld	r24, Z
    2594:	80 93 c6 00 	sts	0x00C6, r24
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    259a:	80 91 c1 00 	lds	r24, 0x00C1
    259e:	8f 7d       	andi	r24, 0xDF	; 223
    25a0:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    25a4:	ff 91       	pop	r31
    25a6:	ef 91       	pop	r30
    25a8:	9f 91       	pop	r25
    25aa:	8f 91       	pop	r24
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	0f 90       	pop	r0
    25b2:	1f 90       	pop	r1
    25b4:	18 95       	reti

000025b6 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    25b6:	10 92 13 05 	sts	0x0513, r1
    UART_TxTail = 0;
    25ba:	10 92 12 05 	sts	0x0512, r1
    UART_RxHead = 0;
    25be:	10 92 11 05 	sts	0x0511, r1
    UART_RxTail = 0;
    25c2:	10 92 10 05 	sts	0x0510, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    25c6:	97 ff       	sbrs	r25, 7
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    25ca:	22 e0       	ldi	r18, 0x02	; 2
    25cc:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    25d0:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    25d2:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    25d6:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    25da:	88 e9       	ldi	r24, 0x98	; 152
    25dc:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    25e0:	86 e0       	ldi	r24, 0x06	; 6
    25e2:	80 93 c2 00 	sts	0x00C2, r24
    25e6:	08 95       	ret

000025e8 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    25e8:	90 91 11 05 	lds	r25, 0x0511
    25ec:	80 91 10 05 	lds	r24, 0x0510
    25f0:	98 17       	cp	r25, r24
    25f2:	89 f0       	breq	.+34     	; 0x2616 <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    25f4:	e0 91 10 05 	lds	r30, 0x0510
    25f8:	ef 5f       	subi	r30, 0xFF	; 255
    25fa:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    25fc:	e0 93 10 05 	sts	0x0510, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	ec 5e       	subi	r30, 0xEC	; 236
    2604:	fa 4f       	sbci	r31, 0xFA	; 250
    2606:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
    2608:	90 91 0f 05 	lds	r25, 0x050F
    260c:	39 2f       	mov	r19, r25
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	28 0f       	add	r18, r24
    2612:	31 1d       	adc	r19, r1
    2614:	02 c0       	rjmp	.+4      	; 0x261a <uart_getc+0x32>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    261a:	c9 01       	movw	r24, r18
    261c:	08 95       	ret

0000261e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    261e:	90 91 13 05 	lds	r25, 0x0513
    2622:	9f 5f       	subi	r25, 0xFF	; 255
    2624:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    2626:	20 91 12 05 	lds	r18, 0x0512
    262a:	92 17       	cp	r25, r18
    262c:	e1 f3       	breq	.-8      	; 0x2626 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    262e:	e9 2f       	mov	r30, r25
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	ec 5c       	subi	r30, 0xCC	; 204
    2634:	fa 4f       	sbci	r31, 0xFA	; 250
    2636:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    2638:	90 93 13 05 	sts	0x0513, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    263c:	80 91 c1 00 	lds	r24, 0x00C1
    2640:	80 62       	ori	r24, 0x20	; 32
    2642:	80 93 c1 00 	sts	0x00C1, r24
    2646:	08 95       	ret

00002648 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	ec 01       	movw	r28, r24
    while (*s) 
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <uart_puts+0xc>
      uart_putc(*s++);
    2650:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    2654:	89 91       	ld	r24, Y+
    2656:	81 11       	cpse	r24, r1
    2658:	fb cf       	rjmp	.-10     	; 0x2650 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	08 95       	ret

00002660 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2666:	02 c0       	rjmp	.+4      	; 0x266c <uart_puts_p+0xc>
      uart_putc(c);
    2668:	0e 94 0f 13 	call	0x261e	; 0x261e <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    266c:	fe 01       	movw	r30, r28
    266e:	21 96       	adiw	r28, 0x01	; 1
    2670:	84 91       	lpm	r24, Z
    2672:	81 11       	cpse	r24, r1
    2674:	f9 cf       	rjmp	.-14     	; 0x2668 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	08 95       	ret

0000267c <main>:

//~~~~~~~~~~~~~~~~~~~~~~~~~******************** MAIN ********************~~~~~~~~~~~~~~~~~~~~~~~~~~

int main(void)
{
    cli();
    267c:	f8 94       	cli
    ioInit();
    267e:	0e 94 9a 01 	call	0x334	; 0x334 <ioInit>
    adcInit();
    2682:	0e 94 be 01 	call	0x37c	; 0x37c <adcInit>
    boostConverterInit();
    2686:	0e 94 ca 01 	call	0x394	; 0x394 <boostConverterInit>
    rtcInit();
    268a:	0e 94 ae 01 	call	0x35c	; 0x35c <rtcInit>
    uartInit();
    268e:	0e 94 06 03 	call	0x60c	; 0x60c <uartInit>
    extInterruptInit();
    2692:	0e 94 a8 01 	call	0x350	; 0x350 <extInterruptInit>
    readEepromToVars();  
    2696:	0e 94 00 05 	call	0xa00	; 0xa00 <readEepromToVars>
    sei();
    269a:	78 94       	sei
    
    uartWelcome();
    269c:	0e 94 be 02 	call	0x57c	; 0x57c <uartWelcome>
    26a0:	c9 e9       	ldi	r28, 0x99	; 153
    26a2:	d1 e0       	ldi	r29, 0x01	; 1


    while( 1 )
    {
    	
    	updateAcFrequency();			// Every AC_FRQ_FILT_SEC seconds, compute the average.
    26a4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <updateAcFrequency>
    	updateTemperatureFilter( 20 );	// FIR averaging filter for the DS18b20.
    26a8:	84 e1       	ldi	r24, 0x14	; 20
    26aa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <updateTemperatureFilter>
        updateNixieOutputState();		// Turns ON or OFF the nixie tubes based on input power and sleep window.
    26ae:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <updateNixieOutputState>
      	checkSerialIn();				// Is there new serial data available?
    26b2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <checkSerialIn>
		updateDateTime();				// Keep track of the current date and time.
    26b6:	0e 94 95 03 	call	0x72a	; 0x72a <updateDateTime>
      
        // If the time has changed, update the display.
        if( seconds != prevSeconds)
    26ba:	90 91 10 01 	lds	r25, 0x0110
    26be:	80 91 fd 04 	lds	r24, 0x04FD
    26c2:	98 17       	cp	r25, r24
    26c4:	39 f0       	breq	.+14     	; 0x26d4 <main+0x58>
        {
            nixiePrintTime( 1 );	// Display the current time on the nixie tubes and toggle the decimal.   
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	0e 94 b9 11 	call	0x2372	; 0x2372 <nixiePrintTime>
            prevSeconds = seconds;
    26cc:	80 91 10 01 	lds	r24, 0x0110
    26d0:	80 93 fd 04 	sts	0x04FD, r24
            
        }


        if( minutes != prevMinutes)
    26d4:	90 91 15 01 	lds	r25, 0x0115
    26d8:	80 91 fc 04 	lds	r24, 0x04FC
    26dc:	98 17       	cp	r25, r24
    26de:	09 f4       	brne	.+2      	; 0x26e2 <main+0x66>
    26e0:	3e c0       	rjmp	.+124    	; 0x275e <main+0xe2>
        {
        	cathodePoisonFlag = 1;		// Set every minute.  Cleared in checkCathodePoison(). 
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 93 e2 04 	sts	0x04E2, r24
            
            serialPrintDateTime();
    26e8:	0e 94 0a 03 	call	0x614	; 0x614 <serialPrintDateTime>
            serialPrintTemperature();
    26ec:	0e 94 b7 04 	call	0x96e	; 0x96e <serialPrintTemperature>
            serialPrintAcFrequency();
    26f0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <serialPrintAcFrequency>
            uart_puts(RETURN_NEWLINE);
    26f4:	89 e2       	ldi	r24, 0x29	; 41
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 24 13 	call	0x2648	; 0x2648 <uart_puts>

            
            // On the nixie.
            if( showdate ){
    26fc:	80 91 f9 04 	lds	r24, 0x04F9
    2700:	81 11       	cpse	r24, r1
    2702:	05 c0       	rjmp	.+10     	; 0x270e <main+0x92>
            	nixiePrintDate();
            	_delay_ms( 5000 );
            }
            
            // On the nixie.
           	if( showtherm ){
    2704:	80 91 fb 04 	lds	r24, 0x04FB
    2708:	88 23       	and	r24, r24
    270a:	59 f0       	breq	.+22     	; 0x2722 <main+0xa6>
    270c:	0f c0       	rjmp	.+30     	; 0x272c <main+0xb0>
            uart_puts(RETURN_NEWLINE);

            
            // On the nixie.
            if( showdate ){
            	nixiePrintDate();
    270e:	0e 94 03 12 	call	0x2406	; 0x2406 <nixiePrintDate>
    2712:	80 e5       	ldi	r24, 0x50	; 80
    2714:	93 ec       	ldi	r25, 0xC3	; 195
    2716:	fe 01       	movw	r30, r28
    2718:	31 97       	sbiw	r30, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <main+0x9c>
    271c:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	d9 f7       	brne	.-10     	; 0x2716 <main+0x9a>
    2720:	f1 cf       	rjmp	.-30     	; 0x2704 <main+0x88>
           		nixiePrintTemperature();
           		_delay_ms( 5000 );
           	}
           	
           	// On the nixie.
           	if( showfreq ){
    2722:	80 91 fa 04 	lds	r24, 0x04FA
    2726:	88 23       	and	r24, r24
    2728:	59 f0       	breq	.+22     	; 0x2740 <main+0xc4>
    272a:	0f c0       	rjmp	.+30     	; 0x274a <main+0xce>
            	_delay_ms( 5000 );
            }
            
            // On the nixie.
           	if( showtherm ){
           		nixiePrintTemperature();
    272c:	0e 94 30 11 	call	0x2260	; 0x2260 <nixiePrintTemperature>
    2730:	80 e5       	ldi	r24, 0x50	; 80
    2732:	93 ec       	ldi	r25, 0xC3	; 195
    2734:	fe 01       	movw	r30, r28
    2736:	31 97       	sbiw	r30, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <main+0xba>
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	d9 f7       	brne	.-10     	; 0x2734 <main+0xb8>
    273e:	f1 cf       	rjmp	.-30     	; 0x2722 <main+0xa6>
           	if( showfreq ){
           		nixiePrintAcFrequency();
           		_delay_ms( 5000 );
           	}
           
            prevMinutes = minutes;   
    2740:	80 91 15 01 	lds	r24, 0x0115
    2744:	80 93 fc 04 	sts	0x04FC, r24
    2748:	0a c0       	rjmp	.+20     	; 0x275e <main+0xe2>
           		_delay_ms( 5000 );
           	}
           	
           	// On the nixie.
           	if( showfreq ){
           		nixiePrintAcFrequency();
    274a:	0e 94 3c 12 	call	0x2478	; 0x2478 <nixiePrintAcFrequency>
    274e:	80 e5       	ldi	r24, 0x50	; 80
    2750:	93 ec       	ldi	r25, 0xC3	; 195
    2752:	fe 01       	movw	r30, r28
    2754:	31 97       	sbiw	r30, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <main+0xd8>
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	d9 f7       	brne	.-10     	; 0x2752 <main+0xd6>
    275c:	f1 cf       	rjmp	.-30     	; 0x2740 <main+0xc4>
           	}
           
            prevMinutes = minutes;   
        }
        
        checkCathodePoison();			// do the antipoison routine if ready.
    275e:	0e 94 ef 10 	call	0x21de	; 0x21de <checkCathodePoison>
        
    }
    2762:	a0 cf       	rjmp	.-192    	; 0x26a4 <main+0x28>

00002764 <__subsf3>:
    2764:	50 58       	subi	r21, 0x80	; 128

00002766 <__addsf3>:
    2766:	bb 27       	eor	r27, r27
    2768:	aa 27       	eor	r26, r26
    276a:	0e d0       	rcall	.+28     	; 0x2788 <__addsf3x>
    276c:	70 c1       	rjmp	.+736    	; 0x2a4e <__fp_round>
    276e:	61 d1       	rcall	.+706    	; 0x2a32 <__fp_pscA>
    2770:	30 f0       	brcs	.+12     	; 0x277e <__addsf3+0x18>
    2772:	66 d1       	rcall	.+716    	; 0x2a40 <__fp_pscB>
    2774:	20 f0       	brcs	.+8      	; 0x277e <__addsf3+0x18>
    2776:	31 f4       	brne	.+12     	; 0x2784 <__addsf3+0x1e>
    2778:	9f 3f       	cpi	r25, 0xFF	; 255
    277a:	11 f4       	brne	.+4      	; 0x2780 <__addsf3+0x1a>
    277c:	1e f4       	brtc	.+6      	; 0x2784 <__addsf3+0x1e>
    277e:	56 c1       	rjmp	.+684    	; 0x2a2c <__fp_nan>
    2780:	0e f4       	brtc	.+2      	; 0x2784 <__addsf3+0x1e>
    2782:	e0 95       	com	r30
    2784:	e7 fb       	bst	r30, 7
    2786:	4c c1       	rjmp	.+664    	; 0x2a20 <__fp_inf>

00002788 <__addsf3x>:
    2788:	e9 2f       	mov	r30, r25
    278a:	72 d1       	rcall	.+740    	; 0x2a70 <__fp_split3>
    278c:	80 f3       	brcs	.-32     	; 0x276e <__addsf3+0x8>
    278e:	ba 17       	cp	r27, r26
    2790:	62 07       	cpc	r22, r18
    2792:	73 07       	cpc	r23, r19
    2794:	84 07       	cpc	r24, r20
    2796:	95 07       	cpc	r25, r21
    2798:	18 f0       	brcs	.+6      	; 0x27a0 <__addsf3x+0x18>
    279a:	71 f4       	brne	.+28     	; 0x27b8 <__addsf3x+0x30>
    279c:	9e f5       	brtc	.+102    	; 0x2804 <__addsf3x+0x7c>
    279e:	8a c1       	rjmp	.+788    	; 0x2ab4 <__fp_zero>
    27a0:	0e f4       	brtc	.+2      	; 0x27a4 <__addsf3x+0x1c>
    27a2:	e0 95       	com	r30
    27a4:	0b 2e       	mov	r0, r27
    27a6:	ba 2f       	mov	r27, r26
    27a8:	a0 2d       	mov	r26, r0
    27aa:	0b 01       	movw	r0, r22
    27ac:	b9 01       	movw	r22, r18
    27ae:	90 01       	movw	r18, r0
    27b0:	0c 01       	movw	r0, r24
    27b2:	ca 01       	movw	r24, r20
    27b4:	a0 01       	movw	r20, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	ff 27       	eor	r31, r31
    27ba:	59 1b       	sub	r21, r25
    27bc:	99 f0       	breq	.+38     	; 0x27e4 <__addsf3x+0x5c>
    27be:	59 3f       	cpi	r21, 0xF9	; 249
    27c0:	50 f4       	brcc	.+20     	; 0x27d6 <__addsf3x+0x4e>
    27c2:	50 3e       	cpi	r21, 0xE0	; 224
    27c4:	68 f1       	brcs	.+90     	; 0x2820 <__addsf3x+0x98>
    27c6:	1a 16       	cp	r1, r26
    27c8:	f0 40       	sbci	r31, 0x00	; 0
    27ca:	a2 2f       	mov	r26, r18
    27cc:	23 2f       	mov	r18, r19
    27ce:	34 2f       	mov	r19, r20
    27d0:	44 27       	eor	r20, r20
    27d2:	58 5f       	subi	r21, 0xF8	; 248
    27d4:	f3 cf       	rjmp	.-26     	; 0x27bc <__addsf3x+0x34>
    27d6:	46 95       	lsr	r20
    27d8:	37 95       	ror	r19
    27da:	27 95       	ror	r18
    27dc:	a7 95       	ror	r26
    27de:	f0 40       	sbci	r31, 0x00	; 0
    27e0:	53 95       	inc	r21
    27e2:	c9 f7       	brne	.-14     	; 0x27d6 <__addsf3x+0x4e>
    27e4:	7e f4       	brtc	.+30     	; 0x2804 <__addsf3x+0x7c>
    27e6:	1f 16       	cp	r1, r31
    27e8:	ba 0b       	sbc	r27, r26
    27ea:	62 0b       	sbc	r22, r18
    27ec:	73 0b       	sbc	r23, r19
    27ee:	84 0b       	sbc	r24, r20
    27f0:	ba f0       	brmi	.+46     	; 0x2820 <__addsf3x+0x98>
    27f2:	91 50       	subi	r25, 0x01	; 1
    27f4:	a1 f0       	breq	.+40     	; 0x281e <__addsf3x+0x96>
    27f6:	ff 0f       	add	r31, r31
    27f8:	bb 1f       	adc	r27, r27
    27fa:	66 1f       	adc	r22, r22
    27fc:	77 1f       	adc	r23, r23
    27fe:	88 1f       	adc	r24, r24
    2800:	c2 f7       	brpl	.-16     	; 0x27f2 <__addsf3x+0x6a>
    2802:	0e c0       	rjmp	.+28     	; 0x2820 <__addsf3x+0x98>
    2804:	ba 0f       	add	r27, r26
    2806:	62 1f       	adc	r22, r18
    2808:	73 1f       	adc	r23, r19
    280a:	84 1f       	adc	r24, r20
    280c:	48 f4       	brcc	.+18     	; 0x2820 <__addsf3x+0x98>
    280e:	87 95       	ror	r24
    2810:	77 95       	ror	r23
    2812:	67 95       	ror	r22
    2814:	b7 95       	ror	r27
    2816:	f7 95       	ror	r31
    2818:	9e 3f       	cpi	r25, 0xFE	; 254
    281a:	08 f0       	brcs	.+2      	; 0x281e <__addsf3x+0x96>
    281c:	b3 cf       	rjmp	.-154    	; 0x2784 <__addsf3+0x1e>
    281e:	93 95       	inc	r25
    2820:	88 0f       	add	r24, r24
    2822:	08 f0       	brcs	.+2      	; 0x2826 <__addsf3x+0x9e>
    2824:	99 27       	eor	r25, r25
    2826:	ee 0f       	add	r30, r30
    2828:	97 95       	ror	r25
    282a:	87 95       	ror	r24
    282c:	08 95       	ret

0000282e <__cmpsf2>:
    282e:	d4 d0       	rcall	.+424    	; 0x29d8 <__fp_cmp>
    2830:	08 f4       	brcc	.+2      	; 0x2834 <__cmpsf2+0x6>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	08 95       	ret

00002836 <__divsf3>:
    2836:	0c d0       	rcall	.+24     	; 0x2850 <__divsf3x>
    2838:	0a c1       	rjmp	.+532    	; 0x2a4e <__fp_round>
    283a:	02 d1       	rcall	.+516    	; 0x2a40 <__fp_pscB>
    283c:	40 f0       	brcs	.+16     	; 0x284e <__divsf3+0x18>
    283e:	f9 d0       	rcall	.+498    	; 0x2a32 <__fp_pscA>
    2840:	30 f0       	brcs	.+12     	; 0x284e <__divsf3+0x18>
    2842:	21 f4       	brne	.+8      	; 0x284c <__divsf3+0x16>
    2844:	5f 3f       	cpi	r21, 0xFF	; 255
    2846:	19 f0       	breq	.+6      	; 0x284e <__divsf3+0x18>
    2848:	eb c0       	rjmp	.+470    	; 0x2a20 <__fp_inf>
    284a:	51 11       	cpse	r21, r1
    284c:	34 c1       	rjmp	.+616    	; 0x2ab6 <__fp_szero>
    284e:	ee c0       	rjmp	.+476    	; 0x2a2c <__fp_nan>

00002850 <__divsf3x>:
    2850:	0f d1       	rcall	.+542    	; 0x2a70 <__fp_split3>
    2852:	98 f3       	brcs	.-26     	; 0x283a <__divsf3+0x4>

00002854 <__divsf3_pse>:
    2854:	99 23       	and	r25, r25
    2856:	c9 f3       	breq	.-14     	; 0x284a <__divsf3+0x14>
    2858:	55 23       	and	r21, r21
    285a:	b1 f3       	breq	.-20     	; 0x2848 <__divsf3+0x12>
    285c:	95 1b       	sub	r25, r21
    285e:	55 0b       	sbc	r21, r21
    2860:	bb 27       	eor	r27, r27
    2862:	aa 27       	eor	r26, r26
    2864:	62 17       	cp	r22, r18
    2866:	73 07       	cpc	r23, r19
    2868:	84 07       	cpc	r24, r20
    286a:	38 f0       	brcs	.+14     	; 0x287a <__divsf3_pse+0x26>
    286c:	9f 5f       	subi	r25, 0xFF	; 255
    286e:	5f 4f       	sbci	r21, 0xFF	; 255
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	44 1f       	adc	r20, r20
    2876:	aa 1f       	adc	r26, r26
    2878:	a9 f3       	breq	.-22     	; 0x2864 <__divsf3_pse+0x10>
    287a:	33 d0       	rcall	.+102    	; 0x28e2 <__divsf3_pse+0x8e>
    287c:	0e 2e       	mov	r0, r30
    287e:	3a f0       	brmi	.+14     	; 0x288e <__divsf3_pse+0x3a>
    2880:	e0 e8       	ldi	r30, 0x80	; 128
    2882:	30 d0       	rcall	.+96     	; 0x28e4 <__divsf3_pse+0x90>
    2884:	91 50       	subi	r25, 0x01	; 1
    2886:	50 40       	sbci	r21, 0x00	; 0
    2888:	e6 95       	lsr	r30
    288a:	00 1c       	adc	r0, r0
    288c:	ca f7       	brpl	.-14     	; 0x2880 <__divsf3_pse+0x2c>
    288e:	29 d0       	rcall	.+82     	; 0x28e2 <__divsf3_pse+0x8e>
    2890:	fe 2f       	mov	r31, r30
    2892:	27 d0       	rcall	.+78     	; 0x28e2 <__divsf3_pse+0x8e>
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	88 1f       	adc	r24, r24
    289a:	bb 1f       	adc	r27, r27
    289c:	26 17       	cp	r18, r22
    289e:	37 07       	cpc	r19, r23
    28a0:	48 07       	cpc	r20, r24
    28a2:	ab 07       	cpc	r26, r27
    28a4:	b0 e8       	ldi	r27, 0x80	; 128
    28a6:	09 f0       	breq	.+2      	; 0x28aa <__divsf3_pse+0x56>
    28a8:	bb 0b       	sbc	r27, r27
    28aa:	80 2d       	mov	r24, r0
    28ac:	bf 01       	movw	r22, r30
    28ae:	ff 27       	eor	r31, r31
    28b0:	93 58       	subi	r25, 0x83	; 131
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	2a f0       	brmi	.+10     	; 0x28c0 <__divsf3_pse+0x6c>
    28b6:	9e 3f       	cpi	r25, 0xFE	; 254
    28b8:	51 05       	cpc	r21, r1
    28ba:	68 f0       	brcs	.+26     	; 0x28d6 <__divsf3_pse+0x82>
    28bc:	b1 c0       	rjmp	.+354    	; 0x2a20 <__fp_inf>
    28be:	fb c0       	rjmp	.+502    	; 0x2ab6 <__fp_szero>
    28c0:	5f 3f       	cpi	r21, 0xFF	; 255
    28c2:	ec f3       	brlt	.-6      	; 0x28be <__divsf3_pse+0x6a>
    28c4:	98 3e       	cpi	r25, 0xE8	; 232
    28c6:	dc f3       	brlt	.-10     	; 0x28be <__divsf3_pse+0x6a>
    28c8:	86 95       	lsr	r24
    28ca:	77 95       	ror	r23
    28cc:	67 95       	ror	r22
    28ce:	b7 95       	ror	r27
    28d0:	f7 95       	ror	r31
    28d2:	9f 5f       	subi	r25, 0xFF	; 255
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <__divsf3_pse+0x74>
    28d6:	88 0f       	add	r24, r24
    28d8:	91 1d       	adc	r25, r1
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	97 f9       	bld	r25, 7
    28e0:	08 95       	ret
    28e2:	e1 e0       	ldi	r30, 0x01	; 1
    28e4:	66 0f       	add	r22, r22
    28e6:	77 1f       	adc	r23, r23
    28e8:	88 1f       	adc	r24, r24
    28ea:	bb 1f       	adc	r27, r27
    28ec:	62 17       	cp	r22, r18
    28ee:	73 07       	cpc	r23, r19
    28f0:	84 07       	cpc	r24, r20
    28f2:	ba 07       	cpc	r27, r26
    28f4:	20 f0       	brcs	.+8      	; 0x28fe <__divsf3_pse+0xaa>
    28f6:	62 1b       	sub	r22, r18
    28f8:	73 0b       	sbc	r23, r19
    28fa:	84 0b       	sbc	r24, r20
    28fc:	ba 0b       	sbc	r27, r26
    28fe:	ee 1f       	adc	r30, r30
    2900:	88 f7       	brcc	.-30     	; 0x28e4 <__divsf3_pse+0x90>
    2902:	e0 95       	com	r30
    2904:	08 95       	ret

00002906 <__fixunssfsi>:
    2906:	bc d0       	rcall	.+376    	; 0x2a80 <__fp_splitA>
    2908:	88 f0       	brcs	.+34     	; 0x292c <__fixunssfsi+0x26>
    290a:	9f 57       	subi	r25, 0x7F	; 127
    290c:	90 f0       	brcs	.+36     	; 0x2932 <__fixunssfsi+0x2c>
    290e:	b9 2f       	mov	r27, r25
    2910:	99 27       	eor	r25, r25
    2912:	b7 51       	subi	r27, 0x17	; 23
    2914:	a0 f0       	brcs	.+40     	; 0x293e <__fixunssfsi+0x38>
    2916:	d1 f0       	breq	.+52     	; 0x294c <__fixunssfsi+0x46>
    2918:	66 0f       	add	r22, r22
    291a:	77 1f       	adc	r23, r23
    291c:	88 1f       	adc	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	1a f0       	brmi	.+6      	; 0x2928 <__fixunssfsi+0x22>
    2922:	ba 95       	dec	r27
    2924:	c9 f7       	brne	.-14     	; 0x2918 <__fixunssfsi+0x12>
    2926:	12 c0       	rjmp	.+36     	; 0x294c <__fixunssfsi+0x46>
    2928:	b1 30       	cpi	r27, 0x01	; 1
    292a:	81 f0       	breq	.+32     	; 0x294c <__fixunssfsi+0x46>
    292c:	c3 d0       	rcall	.+390    	; 0x2ab4 <__fp_zero>
    292e:	b1 e0       	ldi	r27, 0x01	; 1
    2930:	08 95       	ret
    2932:	c0 c0       	rjmp	.+384    	; 0x2ab4 <__fp_zero>
    2934:	67 2f       	mov	r22, r23
    2936:	78 2f       	mov	r23, r24
    2938:	88 27       	eor	r24, r24
    293a:	b8 5f       	subi	r27, 0xF8	; 248
    293c:	39 f0       	breq	.+14     	; 0x294c <__fixunssfsi+0x46>
    293e:	b9 3f       	cpi	r27, 0xF9	; 249
    2940:	cc f3       	brlt	.-14     	; 0x2934 <__fixunssfsi+0x2e>
    2942:	86 95       	lsr	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	b3 95       	inc	r27
    294a:	d9 f7       	brne	.-10     	; 0x2942 <__fixunssfsi+0x3c>
    294c:	3e f4       	brtc	.+14     	; 0x295c <__fixunssfsi+0x56>
    294e:	90 95       	com	r25
    2950:	80 95       	com	r24
    2952:	70 95       	com	r23
    2954:	61 95       	neg	r22
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	8f 4f       	sbci	r24, 0xFF	; 255
    295a:	9f 4f       	sbci	r25, 0xFF	; 255
    295c:	08 95       	ret

0000295e <__floatunsisf>:
    295e:	e8 94       	clt
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <__floatsisf+0x12>

00002962 <__floatsisf>:
    2962:	97 fb       	bst	r25, 7
    2964:	3e f4       	brtc	.+14     	; 0x2974 <__floatsisf+0x12>
    2966:	90 95       	com	r25
    2968:	80 95       	com	r24
    296a:	70 95       	com	r23
    296c:	61 95       	neg	r22
    296e:	7f 4f       	sbci	r23, 0xFF	; 255
    2970:	8f 4f       	sbci	r24, 0xFF	; 255
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	99 23       	and	r25, r25
    2976:	a9 f0       	breq	.+42     	; 0x29a2 <__floatsisf+0x40>
    2978:	f9 2f       	mov	r31, r25
    297a:	96 e9       	ldi	r25, 0x96	; 150
    297c:	bb 27       	eor	r27, r27
    297e:	93 95       	inc	r25
    2980:	f6 95       	lsr	r31
    2982:	87 95       	ror	r24
    2984:	77 95       	ror	r23
    2986:	67 95       	ror	r22
    2988:	b7 95       	ror	r27
    298a:	f1 11       	cpse	r31, r1
    298c:	f8 cf       	rjmp	.-16     	; 0x297e <__floatsisf+0x1c>
    298e:	fa f4       	brpl	.+62     	; 0x29ce <__floatsisf+0x6c>
    2990:	bb 0f       	add	r27, r27
    2992:	11 f4       	brne	.+4      	; 0x2998 <__floatsisf+0x36>
    2994:	60 ff       	sbrs	r22, 0
    2996:	1b c0       	rjmp	.+54     	; 0x29ce <__floatsisf+0x6c>
    2998:	6f 5f       	subi	r22, 0xFF	; 255
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	8f 4f       	sbci	r24, 0xFF	; 255
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	16 c0       	rjmp	.+44     	; 0x29ce <__floatsisf+0x6c>
    29a2:	88 23       	and	r24, r24
    29a4:	11 f0       	breq	.+4      	; 0x29aa <__floatsisf+0x48>
    29a6:	96 e9       	ldi	r25, 0x96	; 150
    29a8:	11 c0       	rjmp	.+34     	; 0x29cc <__floatsisf+0x6a>
    29aa:	77 23       	and	r23, r23
    29ac:	21 f0       	breq	.+8      	; 0x29b6 <__floatsisf+0x54>
    29ae:	9e e8       	ldi	r25, 0x8E	; 142
    29b0:	87 2f       	mov	r24, r23
    29b2:	76 2f       	mov	r23, r22
    29b4:	05 c0       	rjmp	.+10     	; 0x29c0 <__floatsisf+0x5e>
    29b6:	66 23       	and	r22, r22
    29b8:	71 f0       	breq	.+28     	; 0x29d6 <__floatsisf+0x74>
    29ba:	96 e8       	ldi	r25, 0x86	; 134
    29bc:	86 2f       	mov	r24, r22
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	2a f0       	brmi	.+10     	; 0x29ce <__floatsisf+0x6c>
    29c4:	9a 95       	dec	r25
    29c6:	66 0f       	add	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	88 1f       	adc	r24, r24
    29cc:	da f7       	brpl	.-10     	; 0x29c4 <__floatsisf+0x62>
    29ce:	88 0f       	add	r24, r24
    29d0:	96 95       	lsr	r25
    29d2:	87 95       	ror	r24
    29d4:	97 f9       	bld	r25, 7
    29d6:	08 95       	ret

000029d8 <__fp_cmp>:
    29d8:	99 0f       	add	r25, r25
    29da:	00 08       	sbc	r0, r0
    29dc:	55 0f       	add	r21, r21
    29de:	aa 0b       	sbc	r26, r26
    29e0:	e0 e8       	ldi	r30, 0x80	; 128
    29e2:	fe ef       	ldi	r31, 0xFE	; 254
    29e4:	16 16       	cp	r1, r22
    29e6:	17 06       	cpc	r1, r23
    29e8:	e8 07       	cpc	r30, r24
    29ea:	f9 07       	cpc	r31, r25
    29ec:	c0 f0       	brcs	.+48     	; 0x2a1e <__fp_cmp+0x46>
    29ee:	12 16       	cp	r1, r18
    29f0:	13 06       	cpc	r1, r19
    29f2:	e4 07       	cpc	r30, r20
    29f4:	f5 07       	cpc	r31, r21
    29f6:	98 f0       	brcs	.+38     	; 0x2a1e <__fp_cmp+0x46>
    29f8:	62 1b       	sub	r22, r18
    29fa:	73 0b       	sbc	r23, r19
    29fc:	84 0b       	sbc	r24, r20
    29fe:	95 0b       	sbc	r25, r21
    2a00:	39 f4       	brne	.+14     	; 0x2a10 <__fp_cmp+0x38>
    2a02:	0a 26       	eor	r0, r26
    2a04:	61 f0       	breq	.+24     	; 0x2a1e <__fp_cmp+0x46>
    2a06:	23 2b       	or	r18, r19
    2a08:	24 2b       	or	r18, r20
    2a0a:	25 2b       	or	r18, r21
    2a0c:	21 f4       	brne	.+8      	; 0x2a16 <__fp_cmp+0x3e>
    2a0e:	08 95       	ret
    2a10:	0a 26       	eor	r0, r26
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <__fp_cmp+0x3e>
    2a14:	a1 40       	sbci	r26, 0x01	; 1
    2a16:	a6 95       	lsr	r26
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	81 1d       	adc	r24, r1
    2a1c:	81 1d       	adc	r24, r1
    2a1e:	08 95       	ret

00002a20 <__fp_inf>:
    2a20:	97 f9       	bld	r25, 7
    2a22:	9f 67       	ori	r25, 0x7F	; 127
    2a24:	80 e8       	ldi	r24, 0x80	; 128
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	08 95       	ret

00002a2c <__fp_nan>:
    2a2c:	9f ef       	ldi	r25, 0xFF	; 255
    2a2e:	80 ec       	ldi	r24, 0xC0	; 192
    2a30:	08 95       	ret

00002a32 <__fp_pscA>:
    2a32:	00 24       	eor	r0, r0
    2a34:	0a 94       	dec	r0
    2a36:	16 16       	cp	r1, r22
    2a38:	17 06       	cpc	r1, r23
    2a3a:	18 06       	cpc	r1, r24
    2a3c:	09 06       	cpc	r0, r25
    2a3e:	08 95       	ret

00002a40 <__fp_pscB>:
    2a40:	00 24       	eor	r0, r0
    2a42:	0a 94       	dec	r0
    2a44:	12 16       	cp	r1, r18
    2a46:	13 06       	cpc	r1, r19
    2a48:	14 06       	cpc	r1, r20
    2a4a:	05 06       	cpc	r0, r21
    2a4c:	08 95       	ret

00002a4e <__fp_round>:
    2a4e:	09 2e       	mov	r0, r25
    2a50:	03 94       	inc	r0
    2a52:	00 0c       	add	r0, r0
    2a54:	11 f4       	brne	.+4      	; 0x2a5a <__fp_round+0xc>
    2a56:	88 23       	and	r24, r24
    2a58:	52 f0       	brmi	.+20     	; 0x2a6e <__fp_round+0x20>
    2a5a:	bb 0f       	add	r27, r27
    2a5c:	40 f4       	brcc	.+16     	; 0x2a6e <__fp_round+0x20>
    2a5e:	bf 2b       	or	r27, r31
    2a60:	11 f4       	brne	.+4      	; 0x2a66 <__fp_round+0x18>
    2a62:	60 ff       	sbrs	r22, 0
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <__fp_round+0x20>
    2a66:	6f 5f       	subi	r22, 0xFF	; 255
    2a68:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	08 95       	ret

00002a70 <__fp_split3>:
    2a70:	57 fd       	sbrc	r21, 7
    2a72:	90 58       	subi	r25, 0x80	; 128
    2a74:	44 0f       	add	r20, r20
    2a76:	55 1f       	adc	r21, r21
    2a78:	59 f0       	breq	.+22     	; 0x2a90 <__fp_splitA+0x10>
    2a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7c:	71 f0       	breq	.+28     	; 0x2a9a <__fp_splitA+0x1a>
    2a7e:	47 95       	ror	r20

00002a80 <__fp_splitA>:
    2a80:	88 0f       	add	r24, r24
    2a82:	97 fb       	bst	r25, 7
    2a84:	99 1f       	adc	r25, r25
    2a86:	61 f0       	breq	.+24     	; 0x2aa0 <__fp_splitA+0x20>
    2a88:	9f 3f       	cpi	r25, 0xFF	; 255
    2a8a:	79 f0       	breq	.+30     	; 0x2aaa <__fp_splitA+0x2a>
    2a8c:	87 95       	ror	r24
    2a8e:	08 95       	ret
    2a90:	12 16       	cp	r1, r18
    2a92:	13 06       	cpc	r1, r19
    2a94:	14 06       	cpc	r1, r20
    2a96:	55 1f       	adc	r21, r21
    2a98:	f2 cf       	rjmp	.-28     	; 0x2a7e <__fp_split3+0xe>
    2a9a:	46 95       	lsr	r20
    2a9c:	f1 df       	rcall	.-30     	; 0x2a80 <__fp_splitA>
    2a9e:	08 c0       	rjmp	.+16     	; 0x2ab0 <__fp_splitA+0x30>
    2aa0:	16 16       	cp	r1, r22
    2aa2:	17 06       	cpc	r1, r23
    2aa4:	18 06       	cpc	r1, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	f1 cf       	rjmp	.-30     	; 0x2a8c <__fp_splitA+0xc>
    2aaa:	86 95       	lsr	r24
    2aac:	71 05       	cpc	r23, r1
    2aae:	61 05       	cpc	r22, r1
    2ab0:	08 94       	sec
    2ab2:	08 95       	ret

00002ab4 <__fp_zero>:
    2ab4:	e8 94       	clt

00002ab6 <__fp_szero>:
    2ab6:	bb 27       	eor	r27, r27
    2ab8:	66 27       	eor	r22, r22
    2aba:	77 27       	eor	r23, r23
    2abc:	cb 01       	movw	r24, r22
    2abe:	97 f9       	bld	r25, 7
    2ac0:	08 95       	ret

00002ac2 <__gesf2>:
    2ac2:	8a df       	rcall	.-236    	; 0x29d8 <__fp_cmp>
    2ac4:	08 f4       	brcc	.+2      	; 0x2ac8 <__gesf2+0x6>
    2ac6:	8f ef       	ldi	r24, 0xFF	; 255
    2ac8:	08 95       	ret

00002aca <__mulsf3>:
    2aca:	0b d0       	rcall	.+22     	; 0x2ae2 <__mulsf3x>
    2acc:	c0 cf       	rjmp	.-128    	; 0x2a4e <__fp_round>
    2ace:	b1 df       	rcall	.-158    	; 0x2a32 <__fp_pscA>
    2ad0:	28 f0       	brcs	.+10     	; 0x2adc <__mulsf3+0x12>
    2ad2:	b6 df       	rcall	.-148    	; 0x2a40 <__fp_pscB>
    2ad4:	18 f0       	brcs	.+6      	; 0x2adc <__mulsf3+0x12>
    2ad6:	95 23       	and	r25, r21
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <__mulsf3+0x12>
    2ada:	a2 cf       	rjmp	.-188    	; 0x2a20 <__fp_inf>
    2adc:	a7 cf       	rjmp	.-178    	; 0x2a2c <__fp_nan>
    2ade:	11 24       	eor	r1, r1
    2ae0:	ea cf       	rjmp	.-44     	; 0x2ab6 <__fp_szero>

00002ae2 <__mulsf3x>:
    2ae2:	c6 df       	rcall	.-116    	; 0x2a70 <__fp_split3>
    2ae4:	a0 f3       	brcs	.-24     	; 0x2ace <__mulsf3+0x4>

00002ae6 <__mulsf3_pse>:
    2ae6:	95 9f       	mul	r25, r21
    2ae8:	d1 f3       	breq	.-12     	; 0x2ade <__mulsf3+0x14>
    2aea:	95 0f       	add	r25, r21
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	55 1f       	adc	r21, r21
    2af0:	62 9f       	mul	r22, r18
    2af2:	f0 01       	movw	r30, r0
    2af4:	72 9f       	mul	r23, r18
    2af6:	bb 27       	eor	r27, r27
    2af8:	f0 0d       	add	r31, r0
    2afa:	b1 1d       	adc	r27, r1
    2afc:	63 9f       	mul	r22, r19
    2afe:	aa 27       	eor	r26, r26
    2b00:	f0 0d       	add	r31, r0
    2b02:	b1 1d       	adc	r27, r1
    2b04:	aa 1f       	adc	r26, r26
    2b06:	64 9f       	mul	r22, r20
    2b08:	66 27       	eor	r22, r22
    2b0a:	b0 0d       	add	r27, r0
    2b0c:	a1 1d       	adc	r26, r1
    2b0e:	66 1f       	adc	r22, r22
    2b10:	82 9f       	mul	r24, r18
    2b12:	22 27       	eor	r18, r18
    2b14:	b0 0d       	add	r27, r0
    2b16:	a1 1d       	adc	r26, r1
    2b18:	62 1f       	adc	r22, r18
    2b1a:	73 9f       	mul	r23, r19
    2b1c:	b0 0d       	add	r27, r0
    2b1e:	a1 1d       	adc	r26, r1
    2b20:	62 1f       	adc	r22, r18
    2b22:	83 9f       	mul	r24, r19
    2b24:	a0 0d       	add	r26, r0
    2b26:	61 1d       	adc	r22, r1
    2b28:	22 1f       	adc	r18, r18
    2b2a:	74 9f       	mul	r23, r20
    2b2c:	33 27       	eor	r19, r19
    2b2e:	a0 0d       	add	r26, r0
    2b30:	61 1d       	adc	r22, r1
    2b32:	23 1f       	adc	r18, r19
    2b34:	84 9f       	mul	r24, r20
    2b36:	60 0d       	add	r22, r0
    2b38:	21 1d       	adc	r18, r1
    2b3a:	82 2f       	mov	r24, r18
    2b3c:	76 2f       	mov	r23, r22
    2b3e:	6a 2f       	mov	r22, r26
    2b40:	11 24       	eor	r1, r1
    2b42:	9f 57       	subi	r25, 0x7F	; 127
    2b44:	50 40       	sbci	r21, 0x00	; 0
    2b46:	8a f0       	brmi	.+34     	; 0x2b6a <__mulsf3_pse+0x84>
    2b48:	e1 f0       	breq	.+56     	; 0x2b82 <__mulsf3_pse+0x9c>
    2b4a:	88 23       	and	r24, r24
    2b4c:	4a f0       	brmi	.+18     	; 0x2b60 <__mulsf3_pse+0x7a>
    2b4e:	ee 0f       	add	r30, r30
    2b50:	ff 1f       	adc	r31, r31
    2b52:	bb 1f       	adc	r27, r27
    2b54:	66 1f       	adc	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	88 1f       	adc	r24, r24
    2b5a:	91 50       	subi	r25, 0x01	; 1
    2b5c:	50 40       	sbci	r21, 0x00	; 0
    2b5e:	a9 f7       	brne	.-22     	; 0x2b4a <__mulsf3_pse+0x64>
    2b60:	9e 3f       	cpi	r25, 0xFE	; 254
    2b62:	51 05       	cpc	r21, r1
    2b64:	70 f0       	brcs	.+28     	; 0x2b82 <__mulsf3_pse+0x9c>
    2b66:	5c cf       	rjmp	.-328    	; 0x2a20 <__fp_inf>
    2b68:	a6 cf       	rjmp	.-180    	; 0x2ab6 <__fp_szero>
    2b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b6c:	ec f3       	brlt	.-6      	; 0x2b68 <__mulsf3_pse+0x82>
    2b6e:	98 3e       	cpi	r25, 0xE8	; 232
    2b70:	dc f3       	brlt	.-10     	; 0x2b68 <__mulsf3_pse+0x82>
    2b72:	86 95       	lsr	r24
    2b74:	77 95       	ror	r23
    2b76:	67 95       	ror	r22
    2b78:	b7 95       	ror	r27
    2b7a:	f7 95       	ror	r31
    2b7c:	e7 95       	ror	r30
    2b7e:	9f 5f       	subi	r25, 0xFF	; 255
    2b80:	c1 f7       	brne	.-16     	; 0x2b72 <__mulsf3_pse+0x8c>
    2b82:	fe 2b       	or	r31, r30
    2b84:	88 0f       	add	r24, r24
    2b86:	91 1d       	adc	r25, r1
    2b88:	96 95       	lsr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	97 f9       	bld	r25, 7
    2b8e:	08 95       	ret

00002b90 <__udivmodqi4>:
    2b90:	99 1b       	sub	r25, r25
    2b92:	79 e0       	ldi	r23, 0x09	; 9
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <__udivmodqi4_ep>

00002b96 <__udivmodqi4_loop>:
    2b96:	99 1f       	adc	r25, r25
    2b98:	96 17       	cp	r25, r22
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <__udivmodqi4_ep>
    2b9c:	96 1b       	sub	r25, r22

00002b9e <__udivmodqi4_ep>:
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	7a 95       	dec	r23
    2ba2:	c9 f7       	brne	.-14     	; 0x2b96 <__udivmodqi4_loop>
    2ba4:	80 95       	com	r24
    2ba6:	08 95       	ret

00002ba8 <__udivmodhi4>:
    2ba8:	aa 1b       	sub	r26, r26
    2baa:	bb 1b       	sub	r27, r27
    2bac:	51 e1       	ldi	r21, 0x11	; 17
    2bae:	07 c0       	rjmp	.+14     	; 0x2bbe <__udivmodhi4_ep>

00002bb0 <__udivmodhi4_loop>:
    2bb0:	aa 1f       	adc	r26, r26
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	a6 17       	cp	r26, r22
    2bb6:	b7 07       	cpc	r27, r23
    2bb8:	10 f0       	brcs	.+4      	; 0x2bbe <__udivmodhi4_ep>
    2bba:	a6 1b       	sub	r26, r22
    2bbc:	b7 0b       	sbc	r27, r23

00002bbe <__udivmodhi4_ep>:
    2bbe:	88 1f       	adc	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	5a 95       	dec	r21
    2bc4:	a9 f7       	brne	.-22     	; 0x2bb0 <__udivmodhi4_loop>
    2bc6:	80 95       	com	r24
    2bc8:	90 95       	com	r25
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	08 95       	ret

00002bd0 <__divmodhi4>:
    2bd0:	97 fb       	bst	r25, 7
    2bd2:	07 2e       	mov	r0, r23
    2bd4:	16 f4       	brtc	.+4      	; 0x2bda <__divmodhi4+0xa>
    2bd6:	00 94       	com	r0
    2bd8:	07 d0       	rcall	.+14     	; 0x2be8 <__divmodhi4_neg1>
    2bda:	77 fd       	sbrc	r23, 7
    2bdc:	09 d0       	rcall	.+18     	; 0x2bf0 <__divmodhi4_neg2>
    2bde:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
    2be2:	07 fc       	sbrc	r0, 7
    2be4:	05 d0       	rcall	.+10     	; 0x2bf0 <__divmodhi4_neg2>
    2be6:	3e f4       	brtc	.+14     	; 0x2bf6 <__divmodhi4_exit>

00002be8 <__divmodhi4_neg1>:
    2be8:	90 95       	com	r25
    2bea:	81 95       	neg	r24
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	08 95       	ret

00002bf0 <__divmodhi4_neg2>:
    2bf0:	70 95       	com	r23
    2bf2:	61 95       	neg	r22
    2bf4:	7f 4f       	sbci	r23, 0xFF	; 255

00002bf6 <__divmodhi4_exit>:
    2bf6:	08 95       	ret

00002bf8 <__udivmodsi4>:
    2bf8:	a1 e2       	ldi	r26, 0x21	; 33
    2bfa:	1a 2e       	mov	r1, r26
    2bfc:	aa 1b       	sub	r26, r26
    2bfe:	bb 1b       	sub	r27, r27
    2c00:	fd 01       	movw	r30, r26
    2c02:	0d c0       	rjmp	.+26     	; 0x2c1e <__udivmodsi4_ep>

00002c04 <__udivmodsi4_loop>:
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	ee 1f       	adc	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	a2 17       	cp	r26, r18
    2c0e:	b3 07       	cpc	r27, r19
    2c10:	e4 07       	cpc	r30, r20
    2c12:	f5 07       	cpc	r31, r21
    2c14:	20 f0       	brcs	.+8      	; 0x2c1e <__udivmodsi4_ep>
    2c16:	a2 1b       	sub	r26, r18
    2c18:	b3 0b       	sbc	r27, r19
    2c1a:	e4 0b       	sbc	r30, r20
    2c1c:	f5 0b       	sbc	r31, r21

00002c1e <__udivmodsi4_ep>:
    2c1e:	66 1f       	adc	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	1a 94       	dec	r1
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <__udivmodsi4_loop>
    2c2a:	60 95       	com	r22
    2c2c:	70 95       	com	r23
    2c2e:	80 95       	com	r24
    2c30:	90 95       	com	r25
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	bd 01       	movw	r22, r26
    2c38:	cf 01       	movw	r24, r30
    2c3a:	08 95       	ret

00002c3c <dtostrf>:
    2c3c:	ef 92       	push	r14
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	cf 93       	push	r28
    2c44:	c0 2f       	mov	r28, r16
    2c46:	47 ff       	sbrs	r20, 7
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <dtostrf+0x12>
    2c4a:	34 e1       	ldi	r19, 0x14	; 20
    2c4c:	01 c0       	rjmp	.+2      	; 0x2c50 <dtostrf+0x14>
    2c4e:	34 e0       	ldi	r19, 0x04	; 4
    2c50:	e4 2f       	mov	r30, r20
    2c52:	ff 27       	eor	r31, r31
    2c54:	e7 fd       	sbrc	r30, 7
    2c56:	f0 95       	com	r31
    2c58:	f7 ff       	sbrs	r31, 7
    2c5a:	03 c0       	rjmp	.+6      	; 0x2c62 <dtostrf+0x26>
    2c5c:	f1 95       	neg	r31
    2c5e:	e1 95       	neg	r30
    2c60:	f1 09       	sbc	r31, r1
    2c62:	e3 2e       	mov	r14, r19
    2c64:	02 2f       	mov	r16, r18
    2c66:	2e 2f       	mov	r18, r30
    2c68:	4c 2f       	mov	r20, r28
    2c6a:	51 2f       	mov	r21, r17
    2c6c:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <dtoa_prf>
    2c70:	8c 2f       	mov	r24, r28
    2c72:	91 2f       	mov	r25, r17
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ef 90       	pop	r14
    2c7c:	08 95       	ret

00002c7e <atol>:
    2c7e:	1f 93       	push	r17
    2c80:	fc 01       	movw	r30, r24
    2c82:	99 27       	eor	r25, r25
    2c84:	88 27       	eor	r24, r24
    2c86:	bc 01       	movw	r22, r24
    2c88:	e8 94       	clt
    2c8a:	11 91       	ld	r17, Z+
    2c8c:	10 32       	cpi	r17, 0x20	; 32
    2c8e:	e9 f3       	breq	.-6      	; 0x2c8a <atol+0xc>
    2c90:	19 30       	cpi	r17, 0x09	; 9
    2c92:	10 f0       	brcs	.+4      	; 0x2c98 <atol+0x1a>
    2c94:	1e 30       	cpi	r17, 0x0E	; 14
    2c96:	c8 f3       	brcs	.-14     	; 0x2c8a <atol+0xc>
    2c98:	1b 32       	cpi	r17, 0x2B	; 43
    2c9a:	51 f0       	breq	.+20     	; 0x2cb0 <atol+0x32>
    2c9c:	1d 32       	cpi	r17, 0x2D	; 45
    2c9e:	49 f4       	brne	.+18     	; 0x2cb2 <atol+0x34>
    2ca0:	68 94       	set
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <atol+0x32>
    2ca4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__mulsi_const_10>
    2ca8:	61 0f       	add	r22, r17
    2caa:	71 1d       	adc	r23, r1
    2cac:	81 1d       	adc	r24, r1
    2cae:	91 1d       	adc	r25, r1
    2cb0:	11 91       	ld	r17, Z+
    2cb2:	10 53       	subi	r17, 0x30	; 48
    2cb4:	1a 30       	cpi	r17, 0x0A	; 10
    2cb6:	b0 f3       	brcs	.-20     	; 0x2ca4 <atol+0x26>
    2cb8:	3e f4       	brtc	.+14     	; 0x2cc8 <atol+0x4a>
    2cba:	90 95       	com	r25
    2cbc:	80 95       	com	r24
    2cbe:	70 95       	com	r23
    2cc0:	61 95       	neg	r22
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc8:	1f 91       	pop	r17
    2cca:	08 95       	ret

00002ccc <strcasestr>:
    2ccc:	fb 01       	movw	r30, r22
    2cce:	51 91       	ld	r21, Z+
    2cd0:	55 23       	and	r21, r21
    2cd2:	b1 f0       	breq	.+44     	; 0x2d00 <strcasestr+0x34>
    2cd4:	bf 01       	movw	r22, r30
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	05 2e       	mov	r0, r21
    2cda:	4d 91       	ld	r20, X+
    2cdc:	44 23       	and	r20, r20
    2cde:	69 f0       	breq	.+26     	; 0x2cfa <strcasestr+0x2e>
    2ce0:	10 d0       	rcall	.+32     	; 0x2d02 <strcasestr+0x36>
    2ce2:	d9 f7       	brne	.-10     	; 0x2cda <strcasestr+0xe>
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	01 90       	ld	r0, Z+
    2ce8:	00 20       	and	r0, r0
    2cea:	49 f0       	breq	.+18     	; 0x2cfe <strcasestr+0x32>
    2cec:	4d 91       	ld	r20, X+
    2cee:	41 11       	cpse	r20, r1
    2cf0:	08 d0       	rcall	.+16     	; 0x2d02 <strcasestr+0x36>
    2cf2:	c9 f3       	breq	.-14     	; 0x2ce6 <strcasestr+0x1a>
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	41 11       	cpse	r20, r1
    2cf8:	ee cf       	rjmp	.-36     	; 0x2cd6 <strcasestr+0xa>
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	08 95       	ret
    2d02:	40 25       	eor	r20, r0
    2d04:	39 f0       	breq	.+14     	; 0x2d14 <strcasestr+0x48>
    2d06:	40 32       	cpi	r20, 0x20	; 32
    2d08:	29 f4       	brne	.+10     	; 0x2d14 <strcasestr+0x48>
    2d0a:	40 29       	or	r20, r0
    2d0c:	4b 57       	subi	r20, 0x7B	; 123
    2d0e:	46 5e       	subi	r20, 0xE6	; 230
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <strcasestr+0x48>
    2d12:	18 94       	sez
    2d14:	08 95       	ret

00002d16 <strchr>:
    2d16:	fc 01       	movw	r30, r24
    2d18:	81 91       	ld	r24, Z+
    2d1a:	86 17       	cp	r24, r22
    2d1c:	21 f0       	breq	.+8      	; 0x2d26 <strchr+0x10>
    2d1e:	88 23       	and	r24, r24
    2d20:	d9 f7       	brne	.-10     	; 0x2d18 <strchr+0x2>
    2d22:	99 27       	eor	r25, r25
    2d24:	08 95       	ret
    2d26:	31 97       	sbiw	r30, 0x01	; 1
    2d28:	cf 01       	movw	r24, r30
    2d2a:	08 95       	ret

00002d2c <strcpy>:
    2d2c:	fb 01       	movw	r30, r22
    2d2e:	dc 01       	movw	r26, r24
    2d30:	01 90       	ld	r0, Z+
    2d32:	0d 92       	st	X+, r0
    2d34:	00 20       	and	r0, r0
    2d36:	e1 f7       	brne	.-8      	; 0x2d30 <strcpy+0x4>
    2d38:	08 95       	ret

00002d3a <strstr>:
    2d3a:	fb 01       	movw	r30, r22
    2d3c:	51 91       	ld	r21, Z+
    2d3e:	55 23       	and	r21, r21
    2d40:	a9 f0       	breq	.+42     	; 0x2d6c <strstr+0x32>
    2d42:	bf 01       	movw	r22, r30
    2d44:	dc 01       	movw	r26, r24
    2d46:	4d 91       	ld	r20, X+
    2d48:	45 17       	cp	r20, r21
    2d4a:	41 11       	cpse	r20, r1
    2d4c:	e1 f7       	brne	.-8      	; 0x2d46 <strstr+0xc>
    2d4e:	59 f4       	brne	.+22     	; 0x2d66 <strstr+0x2c>
    2d50:	cd 01       	movw	r24, r26
    2d52:	01 90       	ld	r0, Z+
    2d54:	00 20       	and	r0, r0
    2d56:	49 f0       	breq	.+18     	; 0x2d6a <strstr+0x30>
    2d58:	4d 91       	ld	r20, X+
    2d5a:	40 15       	cp	r20, r0
    2d5c:	41 11       	cpse	r20, r1
    2d5e:	c9 f3       	breq	.-14     	; 0x2d52 <strstr+0x18>
    2d60:	fb 01       	movw	r30, r22
    2d62:	41 11       	cpse	r20, r1
    2d64:	ef cf       	rjmp	.-34     	; 0x2d44 <strstr+0xa>
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	08 95       	ret

00002d6e <itoa>:
    2d6e:	fb 01       	movw	r30, r22
    2d70:	9f 01       	movw	r18, r30
    2d72:	e8 94       	clt
    2d74:	42 30       	cpi	r20, 0x02	; 2
    2d76:	c4 f0       	brlt	.+48     	; 0x2da8 <itoa+0x3a>
    2d78:	45 32       	cpi	r20, 0x25	; 37
    2d7a:	b4 f4       	brge	.+44     	; 0x2da8 <itoa+0x3a>
    2d7c:	4a 30       	cpi	r20, 0x0A	; 10
    2d7e:	29 f4       	brne	.+10     	; 0x2d8a <itoa+0x1c>
    2d80:	97 fb       	bst	r25, 7
    2d82:	1e f4       	brtc	.+6      	; 0x2d8a <itoa+0x1c>
    2d84:	90 95       	com	r25
    2d86:	81 95       	neg	r24
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	64 2f       	mov	r22, r20
    2d8c:	77 27       	eor	r23, r23
    2d8e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__udivmodhi4>
    2d92:	80 5d       	subi	r24, 0xD0	; 208
    2d94:	8a 33       	cpi	r24, 0x3A	; 58
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <itoa+0x2c>
    2d98:	89 5d       	subi	r24, 0xD9	; 217
    2d9a:	81 93       	st	Z+, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	a1 f7       	brne	.-24     	; 0x2d8a <itoa+0x1c>
    2da2:	16 f4       	brtc	.+4      	; 0x2da8 <itoa+0x3a>
    2da4:	5d e2       	ldi	r21, 0x2D	; 45
    2da6:	51 93       	st	Z+, r21
    2da8:	10 82       	st	Z, r1
    2daa:	c9 01       	movw	r24, r18
    2dac:	0c 94 93 19 	jmp	0x3326	; 0x3326 <strrev>

00002db0 <__mulsi_const_10>:
    2db0:	59 2f       	mov	r21, r25
    2db2:	48 2f       	mov	r20, r24
    2db4:	37 2f       	mov	r19, r23
    2db6:	26 2f       	mov	r18, r22
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	88 1f       	adc	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	88 1f       	adc	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	62 0f       	add	r22, r18
    2dca:	73 1f       	adc	r23, r19
    2dcc:	84 1f       	adc	r24, r20
    2dce:	95 1f       	adc	r25, r21
    2dd0:	66 0f       	add	r22, r22
    2dd2:	77 1f       	adc	r23, r23
    2dd4:	88 1f       	adc	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	08 95       	ret

00002dda <ultoa>:
    2dda:	fa 01       	movw	r30, r20
    2ddc:	cf 93       	push	r28
    2dde:	ff 93       	push	r31
    2de0:	ef 93       	push	r30
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	cc f0       	brlt	.+50     	; 0x2e18 <ultoa+0x3e>
    2de6:	25 32       	cpi	r18, 0x25	; 37
    2de8:	bc f4       	brge	.+46     	; 0x2e18 <ultoa+0x3e>
    2dea:	c2 2f       	mov	r28, r18
    2dec:	2c 2f       	mov	r18, r28
    2dee:	33 27       	eor	r19, r19
    2df0:	44 27       	eor	r20, r20
    2df2:	55 27       	eor	r21, r21
    2df4:	ff 93       	push	r31
    2df6:	ef 93       	push	r30
    2df8:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__udivmodsi4>
    2dfc:	ef 91       	pop	r30
    2dfe:	ff 91       	pop	r31
    2e00:	60 5d       	subi	r22, 0xD0	; 208
    2e02:	6a 33       	cpi	r22, 0x3A	; 58
    2e04:	0c f0       	brlt	.+2      	; 0x2e08 <ultoa+0x2e>
    2e06:	69 5d       	subi	r22, 0xD9	; 217
    2e08:	61 93       	st	Z+, r22
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	60 50       	subi	r22, 0x00	; 0
    2e10:	70 40       	sbci	r23, 0x00	; 0
    2e12:	80 40       	sbci	r24, 0x00	; 0
    2e14:	90 40       	sbci	r25, 0x00	; 0
    2e16:	51 f7       	brne	.-44     	; 0x2dec <ultoa+0x12>
    2e18:	10 82       	st	Z, r1
    2e1a:	8f 91       	pop	r24
    2e1c:	9f 91       	pop	r25
    2e1e:	cf 91       	pop	r28
    2e20:	0c 94 93 19 	jmp	0x3326	; 0x3326 <strrev>

00002e24 <__eerd_byte_m328p>:
    2e24:	f9 99       	sbic	0x1f, 1	; 31
    2e26:	fe cf       	rjmp	.-4      	; 0x2e24 <__eerd_byte_m328p>
    2e28:	92 bd       	out	0x22, r25	; 34
    2e2a:	81 bd       	out	0x21, r24	; 33
    2e2c:	f8 9a       	sbi	0x1f, 0	; 31
    2e2e:	99 27       	eor	r25, r25
    2e30:	80 b5       	in	r24, 0x20	; 32
    2e32:	08 95       	ret

00002e34 <__eerd_dword_m328p>:
    2e34:	a6 e1       	ldi	r26, 0x16	; 22
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	44 e0       	ldi	r20, 0x04	; 4
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__eerd_blraw_m328p>

00002e40 <__eeupd_byte_m328p>:
    2e40:	26 2f       	mov	r18, r22

00002e42 <__eeupd_r18_m328p>:
    2e42:	f9 99       	sbic	0x1f, 1	; 31
    2e44:	fe cf       	rjmp	.-4      	; 0x2e42 <__eeupd_r18_m328p>
    2e46:	92 bd       	out	0x22, r25	; 34
    2e48:	81 bd       	out	0x21, r24	; 33
    2e4a:	f8 9a       	sbi	0x1f, 0	; 31
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	00 b4       	in	r0, 0x20	; 32
    2e50:	02 16       	cp	r0, r18
    2e52:	39 f0       	breq	.+14     	; 0x2e62 <__eeupd_r18_m328p+0x20>
    2e54:	1f ba       	out	0x1f, r1	; 31
    2e56:	20 bd       	out	0x20, r18	; 32
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	fa 9a       	sbi	0x1f, 2	; 31
    2e5e:	f9 9a       	sbi	0x1f, 1	; 31
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	08 95       	ret

00002e64 <__eeupd_dword_m328p>:
    2e64:	03 96       	adiw	r24, 0x03	; 3
    2e66:	27 2f       	mov	r18, r23
    2e68:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__eeupd_r18_m328p>
    2e6c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_byte_m328p>
    2e70:	25 2f       	mov	r18, r21
    2e72:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__eeupd_r18_m328p>
    2e76:	24 2f       	mov	r18, r20
    2e78:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__eeupd_r18_m328p>

00002e7c <dtoa_prf>:
    2e7c:	6f 92       	push	r6
    2e7e:	7f 92       	push	r7
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	29 97       	sbiw	r28, 0x09	; 9
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	6a 01       	movw	r12, r20
    2ea8:	b2 2e       	mov	r11, r18
    2eaa:	10 2f       	mov	r17, r16
    2eac:	0c 33       	cpi	r16, 0x3C	; 60
    2eae:	18 f4       	brcc	.+6      	; 0x2eb6 <dtoa_prf+0x3a>
    2eb0:	f0 2e       	mov	r15, r16
    2eb2:	f3 94       	inc	r15
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <dtoa_prf+0x3e>
    2eb6:	5c e3       	ldi	r21, 0x3C	; 60
    2eb8:	f5 2e       	mov	r15, r21
    2eba:	0f 2d       	mov	r16, r15
    2ebc:	27 e0       	ldi	r18, 0x07	; 7
    2ebe:	ae 01       	movw	r20, r28
    2ec0:	4f 5f       	subi	r20, 0xFF	; 255
    2ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec4:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ftoa_engine>
    2ec8:	79 81       	ldd	r23, Y+1	; 0x01
    2eca:	27 2f       	mov	r18, r23
    2ecc:	29 70       	andi	r18, 0x09	; 9
    2ece:	21 30       	cpi	r18, 0x01	; 1
    2ed0:	31 f0       	breq	.+12     	; 0x2ede <dtoa_prf+0x62>
    2ed2:	e1 fc       	sbrc	r14, 1
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <dtoa_prf+0x66>
    2ed6:	e0 fe       	sbrs	r14, 0
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <dtoa_prf+0x6a>
    2eda:	60 e2       	ldi	r22, 0x20	; 32
    2edc:	05 c0       	rjmp	.+10     	; 0x2ee8 <dtoa_prf+0x6c>
    2ede:	6d e2       	ldi	r22, 0x2D	; 45
    2ee0:	03 c0       	rjmp	.+6      	; 0x2ee8 <dtoa_prf+0x6c>
    2ee2:	6b e2       	ldi	r22, 0x2B	; 43
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <dtoa_prf+0x6c>
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	73 ff       	sbrs	r23, 3
    2eea:	3d c0       	rjmp	.+122    	; 0x2f66 <dtoa_prf+0xea>
    2eec:	66 23       	and	r22, r22
    2eee:	11 f0       	breq	.+4      	; 0x2ef4 <dtoa_prf+0x78>
    2ef0:	84 e0       	ldi	r24, 0x04	; 4
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <dtoa_prf+0x7a>
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	8b 15       	cp	r24, r11
    2ef8:	10 f4       	brcc	.+4      	; 0x2efe <dtoa_prf+0x82>
    2efa:	b8 1a       	sub	r11, r24
    2efc:	01 c0       	rjmp	.+2      	; 0x2f00 <dtoa_prf+0x84>
    2efe:	b1 2c       	mov	r11, r1
    2f00:	e4 fc       	sbrc	r14, 4
    2f02:	0b c0       	rjmp	.+22     	; 0x2f1a <dtoa_prf+0x9e>
    2f04:	8b 2d       	mov	r24, r11
    2f06:	f6 01       	movw	r30, r12
    2f08:	90 e2       	ldi	r25, 0x20	; 32
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <dtoa_prf+0x94>
    2f0c:	91 93       	st	Z+, r25
    2f0e:	81 50       	subi	r24, 0x01	; 1
    2f10:	81 11       	cpse	r24, r1
    2f12:	fc cf       	rjmp	.-8      	; 0x2f0c <dtoa_prf+0x90>
    2f14:	cb 0c       	add	r12, r11
    2f16:	d1 1c       	adc	r13, r1
    2f18:	b1 2c       	mov	r11, r1
    2f1a:	66 23       	and	r22, r22
    2f1c:	19 f0       	breq	.+6      	; 0x2f24 <dtoa_prf+0xa8>
    2f1e:	d6 01       	movw	r26, r12
    2f20:	6d 93       	st	X+, r22
    2f22:	6d 01       	movw	r12, r26
    2f24:	e2 fe       	sbrs	r14, 2
    2f26:	0a c0       	rjmp	.+20     	; 0x2f3c <dtoa_prf+0xc0>
    2f28:	8e e4       	ldi	r24, 0x4E	; 78
    2f2a:	f6 01       	movw	r30, r12
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 e4       	ldi	r25, 0x41	; 65
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	82 83       	std	Z+2, r24	; 0x02
    2f34:	f3 e0       	ldi	r31, 0x03	; 3
    2f36:	cf 0e       	add	r12, r31
    2f38:	d1 1c       	adc	r13, r1
    2f3a:	0c c0       	rjmp	.+24     	; 0x2f54 <dtoa_prf+0xd8>
    2f3c:	8e e6       	ldi	r24, 0x6E	; 110
    2f3e:	d6 01       	movw	r26, r12
    2f40:	8c 93       	st	X, r24
    2f42:	91 e6       	ldi	r25, 0x61	; 97
    2f44:	11 96       	adiw	r26, 0x01	; 1
    2f46:	9c 93       	st	X, r25
    2f48:	11 97       	sbiw	r26, 0x01	; 1
    2f4a:	12 96       	adiw	r26, 0x02	; 2
    2f4c:	8c 93       	st	X, r24
    2f4e:	b3 e0       	ldi	r27, 0x03	; 3
    2f50:	cb 0e       	add	r12, r27
    2f52:	d1 1c       	adc	r13, r1
    2f54:	8b 2d       	mov	r24, r11
    2f56:	f6 01       	movw	r30, r12
    2f58:	90 e2       	ldi	r25, 0x20	; 32
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <dtoa_prf+0xe4>
    2f5c:	91 93       	st	Z+, r25
    2f5e:	81 50       	subi	r24, 0x01	; 1
    2f60:	81 11       	cpse	r24, r1
    2f62:	fc cf       	rjmp	.-8      	; 0x2f5c <dtoa_prf+0xe0>
    2f64:	40 c0       	rjmp	.+128    	; 0x2fe6 <dtoa_prf+0x16a>
    2f66:	72 ff       	sbrs	r23, 2
    2f68:	45 c0       	rjmp	.+138    	; 0x2ff4 <dtoa_prf+0x178>
    2f6a:	66 23       	and	r22, r22
    2f6c:	11 f0       	breq	.+4      	; 0x2f72 <dtoa_prf+0xf6>
    2f6e:	84 e0       	ldi	r24, 0x04	; 4
    2f70:	01 c0       	rjmp	.+2      	; 0x2f74 <dtoa_prf+0xf8>
    2f72:	83 e0       	ldi	r24, 0x03	; 3
    2f74:	8b 15       	cp	r24, r11
    2f76:	10 f4       	brcc	.+4      	; 0x2f7c <dtoa_prf+0x100>
    2f78:	b8 1a       	sub	r11, r24
    2f7a:	01 c0       	rjmp	.+2      	; 0x2f7e <dtoa_prf+0x102>
    2f7c:	b1 2c       	mov	r11, r1
    2f7e:	e4 fc       	sbrc	r14, 4
    2f80:	0b c0       	rjmp	.+22     	; 0x2f98 <dtoa_prf+0x11c>
    2f82:	8b 2d       	mov	r24, r11
    2f84:	f6 01       	movw	r30, r12
    2f86:	90 e2       	ldi	r25, 0x20	; 32
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <dtoa_prf+0x112>
    2f8a:	91 93       	st	Z+, r25
    2f8c:	81 50       	subi	r24, 0x01	; 1
    2f8e:	81 11       	cpse	r24, r1
    2f90:	fc cf       	rjmp	.-8      	; 0x2f8a <dtoa_prf+0x10e>
    2f92:	cb 0c       	add	r12, r11
    2f94:	d1 1c       	adc	r13, r1
    2f96:	b1 2c       	mov	r11, r1
    2f98:	66 23       	and	r22, r22
    2f9a:	19 f0       	breq	.+6      	; 0x2fa2 <dtoa_prf+0x126>
    2f9c:	f6 01       	movw	r30, r12
    2f9e:	61 93       	st	Z+, r22
    2fa0:	6f 01       	movw	r12, r30
    2fa2:	e2 fe       	sbrs	r14, 2
    2fa4:	0e c0       	rjmp	.+28     	; 0x2fc2 <dtoa_prf+0x146>
    2fa6:	89 e4       	ldi	r24, 0x49	; 73
    2fa8:	d6 01       	movw	r26, r12
    2faa:	8c 93       	st	X, r24
    2fac:	8e e4       	ldi	r24, 0x4E	; 78
    2fae:	11 96       	adiw	r26, 0x01	; 1
    2fb0:	8c 93       	st	X, r24
    2fb2:	11 97       	sbiw	r26, 0x01	; 1
    2fb4:	86 e4       	ldi	r24, 0x46	; 70
    2fb6:	12 96       	adiw	r26, 0x02	; 2
    2fb8:	8c 93       	st	X, r24
    2fba:	b3 e0       	ldi	r27, 0x03	; 3
    2fbc:	cb 0e       	add	r12, r27
    2fbe:	d1 1c       	adc	r13, r1
    2fc0:	0a c0       	rjmp	.+20     	; 0x2fd6 <dtoa_prf+0x15a>
    2fc2:	89 e6       	ldi	r24, 0x69	; 105
    2fc4:	f6 01       	movw	r30, r12
    2fc6:	80 83       	st	Z, r24
    2fc8:	8e e6       	ldi	r24, 0x6E	; 110
    2fca:	81 83       	std	Z+1, r24	; 0x01
    2fcc:	86 e6       	ldi	r24, 0x66	; 102
    2fce:	82 83       	std	Z+2, r24	; 0x02
    2fd0:	f3 e0       	ldi	r31, 0x03	; 3
    2fd2:	cf 0e       	add	r12, r31
    2fd4:	d1 1c       	adc	r13, r1
    2fd6:	8b 2d       	mov	r24, r11
    2fd8:	f6 01       	movw	r30, r12
    2fda:	90 e2       	ldi	r25, 0x20	; 32
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <dtoa_prf+0x166>
    2fde:	91 93       	st	Z+, r25
    2fe0:	81 50       	subi	r24, 0x01	; 1
    2fe2:	81 11       	cpse	r24, r1
    2fe4:	fc cf       	rjmp	.-8      	; 0x2fde <dtoa_prf+0x162>
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	eb 0d       	add	r30, r11
    2fea:	f1 1d       	adc	r31, r1
    2fec:	10 82       	st	Z, r1
    2fee:	2e ef       	ldi	r18, 0xFE	; 254
    2ff0:	3f ef       	ldi	r19, 0xFF	; 255
    2ff2:	ac c0       	rjmp	.+344    	; 0x314c <dtoa_prf+0x2d0>
    2ff4:	a1 e0       	ldi	r26, 0x01	; 1
    2ff6:	61 11       	cpse	r22, r1
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <dtoa_prf+0x180>
    2ffa:	a0 e0       	ldi	r26, 0x00	; 0
    2ffc:	4a 2f       	mov	r20, r26
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	18 16       	cp	r1, r24
    3002:	19 06       	cpc	r1, r25
    3004:	24 f4       	brge	.+8      	; 0x300e <dtoa_prf+0x192>
    3006:	9c 01       	movw	r18, r24
    3008:	2f 5f       	subi	r18, 0xFF	; 255
    300a:	3f 4f       	sbci	r19, 0xFF	; 255
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <dtoa_prf+0x196>
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	24 0f       	add	r18, r20
    3014:	35 1f       	adc	r19, r21
    3016:	11 23       	and	r17, r17
    3018:	29 f0       	breq	.+10     	; 0x3024 <dtoa_prf+0x1a8>
    301a:	41 2f       	mov	r20, r17
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	4f 5f       	subi	r20, 0xFF	; 255
    3020:	5f 4f       	sbci	r21, 0xFF	; 255
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <dtoa_prf+0x1ac>
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	42 0f       	add	r20, r18
    302a:	53 1f       	adc	r21, r19
    302c:	2b 2d       	mov	r18, r11
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	42 17       	cp	r20, r18
    3032:	53 07       	cpc	r21, r19
    3034:	14 f4       	brge	.+4      	; 0x303a <dtoa_prf+0x1be>
    3036:	b4 1a       	sub	r11, r20
    3038:	01 c0       	rjmp	.+2      	; 0x303c <dtoa_prf+0x1c0>
    303a:	b1 2c       	mov	r11, r1
    303c:	3e 2d       	mov	r19, r14
    303e:	30 71       	andi	r19, 0x10	; 16
    3040:	e4 fc       	sbrc	r14, 4
    3042:	0d c0       	rjmp	.+26     	; 0x305e <dtoa_prf+0x1e2>
    3044:	e3 fc       	sbrc	r14, 3
    3046:	0b c0       	rjmp	.+22     	; 0x305e <dtoa_prf+0x1e2>
    3048:	2b 2d       	mov	r18, r11
    304a:	f6 01       	movw	r30, r12
    304c:	40 e2       	ldi	r20, 0x20	; 32
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <dtoa_prf+0x1d8>
    3050:	41 93       	st	Z+, r20
    3052:	21 50       	subi	r18, 0x01	; 1
    3054:	21 11       	cpse	r18, r1
    3056:	fc cf       	rjmp	.-8      	; 0x3050 <dtoa_prf+0x1d4>
    3058:	cb 0c       	add	r12, r11
    305a:	d1 1c       	adc	r13, r1
    305c:	b1 2c       	mov	r11, r1
    305e:	aa 23       	and	r26, r26
    3060:	19 f0       	breq	.+6      	; 0x3068 <dtoa_prf+0x1ec>
    3062:	d6 01       	movw	r26, r12
    3064:	6d 93       	st	X+, r22
    3066:	6d 01       	movw	r12, r26
    3068:	31 11       	cpse	r19, r1
    306a:	0b c0       	rjmp	.+22     	; 0x3082 <dtoa_prf+0x206>
    306c:	2b 2d       	mov	r18, r11
    306e:	f6 01       	movw	r30, r12
    3070:	30 e3       	ldi	r19, 0x30	; 48
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <dtoa_prf+0x1fc>
    3074:	31 93       	st	Z+, r19
    3076:	21 50       	subi	r18, 0x01	; 1
    3078:	21 11       	cpse	r18, r1
    307a:	fc cf       	rjmp	.-8      	; 0x3074 <dtoa_prf+0x1f8>
    307c:	cb 0c       	add	r12, r11
    307e:	d1 1c       	adc	r13, r1
    3080:	b1 2c       	mov	r11, r1
    3082:	f8 0e       	add	r15, r24
    3084:	0a 81       	ldd	r16, Y+2	; 0x02
    3086:	40 e1       	ldi	r20, 0x10	; 16
    3088:	a4 2e       	mov	r10, r20
    308a:	a7 22       	and	r10, r23
    308c:	74 ff       	sbrs	r23, 4
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <dtoa_prf+0x21a>
    3090:	01 33       	cpi	r16, 0x31	; 49
    3092:	09 f4       	brne	.+2      	; 0x3096 <dtoa_prf+0x21a>
    3094:	fa 94       	dec	r15
    3096:	1f 14       	cp	r1, r15
    3098:	2c f4       	brge	.+10     	; 0x30a4 <dtoa_prf+0x228>
    309a:	2f 2d       	mov	r18, r15
    309c:	29 30       	cpi	r18, 0x09	; 9
    309e:	18 f0       	brcs	.+6      	; 0x30a6 <dtoa_prf+0x22a>
    30a0:	28 e0       	ldi	r18, 0x08	; 8
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <dtoa_prf+0x22a>
    30a4:	21 e0       	ldi	r18, 0x01	; 1
    30a6:	ac 01       	movw	r20, r24
    30a8:	97 ff       	sbrs	r25, 7
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <dtoa_prf+0x234>
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	3e e2       	ldi	r19, 0x2E	; 46
    30b6:	93 2e       	mov	r9, r19
    30b8:	fc 01       	movw	r30, r24
    30ba:	e2 1b       	sub	r30, r18
    30bc:	f1 09       	sbc	r31, r1
    30be:	9f 01       	movw	r18, r30
    30c0:	dc 01       	movw	r26, r24
    30c2:	a4 1b       	sub	r26, r20
    30c4:	b5 0b       	sbc	r27, r21
    30c6:	fe 01       	movw	r30, r28
    30c8:	31 96       	adiw	r30, 0x01	; 1
    30ca:	ea 0f       	add	r30, r26
    30cc:	fb 1f       	adc	r31, r27
    30ce:	a1 2f       	mov	r26, r17
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	66 24       	eor	r6, r6
    30d4:	77 24       	eor	r7, r7
    30d6:	6a 1a       	sub	r6, r26
    30d8:	7b 0a       	sbc	r7, r27
    30da:	4f 3f       	cpi	r20, 0xFF	; 255
    30dc:	1f ef       	ldi	r17, 0xFF	; 255
    30de:	51 07       	cpc	r21, r17
    30e0:	19 f4       	brne	.+6      	; 0x30e8 <dtoa_prf+0x26c>
    30e2:	d6 01       	movw	r26, r12
    30e4:	9d 92       	st	X+, r9
    30e6:	6d 01       	movw	r12, r26
    30e8:	84 17       	cp	r24, r20
    30ea:	95 07       	cpc	r25, r21
    30ec:	54 f0       	brlt	.+20     	; 0x3102 <dtoa_prf+0x286>
    30ee:	24 17       	cp	r18, r20
    30f0:	35 07       	cpc	r19, r21
    30f2:	3c f4       	brge	.+14     	; 0x3102 <dtoa_prf+0x286>
    30f4:	7f 01       	movw	r14, r30
    30f6:	e6 0e       	add	r14, r22
    30f8:	f7 1e       	adc	r15, r23
    30fa:	d7 01       	movw	r26, r14
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	1c 91       	ld	r17, X
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <dtoa_prf+0x288>
    3102:	10 e3       	ldi	r17, 0x30	; 48
    3104:	41 50       	subi	r20, 0x01	; 1
    3106:	51 09       	sbc	r21, r1
    3108:	6f 5f       	subi	r22, 0xFF	; 255
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	46 15       	cp	r20, r6
    310e:	57 05       	cpc	r21, r7
    3110:	24 f0       	brlt	.+8      	; 0x311a <dtoa_prf+0x29e>
    3112:	d6 01       	movw	r26, r12
    3114:	1d 93       	st	X+, r17
    3116:	6d 01       	movw	r12, r26
    3118:	e0 cf       	rjmp	.-64     	; 0x30da <dtoa_prf+0x25e>
    311a:	48 17       	cp	r20, r24
    311c:	59 07       	cpc	r21, r25
    311e:	39 f4       	brne	.+14     	; 0x312e <dtoa_prf+0x2b2>
    3120:	06 33       	cpi	r16, 0x36	; 54
    3122:	20 f4       	brcc	.+8      	; 0x312c <dtoa_prf+0x2b0>
    3124:	05 33       	cpi	r16, 0x35	; 53
    3126:	19 f4       	brne	.+6      	; 0x312e <dtoa_prf+0x2b2>
    3128:	a1 10       	cpse	r10, r1
    312a:	01 c0       	rjmp	.+2      	; 0x312e <dtoa_prf+0x2b2>
    312c:	11 e3       	ldi	r17, 0x31	; 49
    312e:	f6 01       	movw	r30, r12
    3130:	11 93       	st	Z+, r17
    3132:	8b 2d       	mov	r24, r11
    3134:	df 01       	movw	r26, r30
    3136:	90 e2       	ldi	r25, 0x20	; 32
    3138:	02 c0       	rjmp	.+4      	; 0x313e <dtoa_prf+0x2c2>
    313a:	9d 93       	st	X+, r25
    313c:	81 50       	subi	r24, 0x01	; 1
    313e:	81 11       	cpse	r24, r1
    3140:	fc cf       	rjmp	.-8      	; 0x313a <dtoa_prf+0x2be>
    3142:	eb 0d       	add	r30, r11
    3144:	f1 1d       	adc	r31, r1
    3146:	10 82       	st	Z, r1
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	c9 01       	movw	r24, r18
    314e:	29 96       	adiw	r28, 0x09	; 9
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	bf 90       	pop	r11
    316c:	af 90       	pop	r10
    316e:	9f 90       	pop	r9
    3170:	7f 90       	pop	r7
    3172:	6f 90       	pop	r6
    3174:	08 95       	ret

00003176 <__ftoa_engine>:
    3176:	28 30       	cpi	r18, 0x08	; 8
    3178:	08 f0       	brcs	.+2      	; 0x317c <__ftoa_engine+0x6>
    317a:	27 e0       	ldi	r18, 0x07	; 7
    317c:	33 27       	eor	r19, r19
    317e:	da 01       	movw	r26, r20
    3180:	99 0f       	add	r25, r25
    3182:	31 1d       	adc	r19, r1
    3184:	87 fd       	sbrc	r24, 7
    3186:	91 60       	ori	r25, 0x01	; 1
    3188:	00 96       	adiw	r24, 0x00	; 0
    318a:	61 05       	cpc	r22, r1
    318c:	71 05       	cpc	r23, r1
    318e:	39 f4       	brne	.+14     	; 0x319e <__ftoa_engine+0x28>
    3190:	32 60       	ori	r19, 0x02	; 2
    3192:	2e 5f       	subi	r18, 0xFE	; 254
    3194:	3d 93       	st	X+, r19
    3196:	30 e3       	ldi	r19, 0x30	; 48
    3198:	2a 95       	dec	r18
    319a:	e1 f7       	brne	.-8      	; 0x3194 <__ftoa_engine+0x1e>
    319c:	08 95       	ret
    319e:	9f 3f       	cpi	r25, 0xFF	; 255
    31a0:	30 f0       	brcs	.+12     	; 0x31ae <__ftoa_engine+0x38>
    31a2:	80 38       	cpi	r24, 0x80	; 128
    31a4:	71 05       	cpc	r23, r1
    31a6:	61 05       	cpc	r22, r1
    31a8:	09 f0       	breq	.+2      	; 0x31ac <__ftoa_engine+0x36>
    31aa:	3c 5f       	subi	r19, 0xFC	; 252
    31ac:	3c 5f       	subi	r19, 0xFC	; 252
    31ae:	3d 93       	st	X+, r19
    31b0:	91 30       	cpi	r25, 0x01	; 1
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <__ftoa_engine+0x40>
    31b4:	80 68       	ori	r24, 0x80	; 128
    31b6:	91 1d       	adc	r25, r1
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	1f 93       	push	r17
    31be:	0f 93       	push	r16
    31c0:	ff 92       	push	r15
    31c2:	ef 92       	push	r14
    31c4:	19 2f       	mov	r17, r25
    31c6:	98 7f       	andi	r25, 0xF8	; 248
    31c8:	96 95       	lsr	r25
    31ca:	e9 2f       	mov	r30, r25
    31cc:	96 95       	lsr	r25
    31ce:	96 95       	lsr	r25
    31d0:	e9 0f       	add	r30, r25
    31d2:	ff 27       	eor	r31, r31
    31d4:	ee 5f       	subi	r30, 0xFE	; 254
    31d6:	fe 4f       	sbci	r31, 0xFE	; 254
    31d8:	99 27       	eor	r25, r25
    31da:	33 27       	eor	r19, r19
    31dc:	ee 24       	eor	r14, r14
    31de:	ff 24       	eor	r15, r15
    31e0:	a7 01       	movw	r20, r14
    31e2:	e7 01       	movw	r28, r14
    31e4:	05 90       	lpm	r0, Z+
    31e6:	08 94       	sec
    31e8:	07 94       	ror	r0
    31ea:	28 f4       	brcc	.+10     	; 0x31f6 <__ftoa_engine+0x80>
    31ec:	36 0f       	add	r19, r22
    31ee:	e7 1e       	adc	r14, r23
    31f0:	f8 1e       	adc	r15, r24
    31f2:	49 1f       	adc	r20, r25
    31f4:	51 1d       	adc	r21, r1
    31f6:	66 0f       	add	r22, r22
    31f8:	77 1f       	adc	r23, r23
    31fa:	88 1f       	adc	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	06 94       	lsr	r0
    3200:	a1 f7       	brne	.-24     	; 0x31ea <__ftoa_engine+0x74>
    3202:	05 90       	lpm	r0, Z+
    3204:	07 94       	ror	r0
    3206:	28 f4       	brcc	.+10     	; 0x3212 <__ftoa_engine+0x9c>
    3208:	e7 0e       	add	r14, r23
    320a:	f8 1e       	adc	r15, r24
    320c:	49 1f       	adc	r20, r25
    320e:	56 1f       	adc	r21, r22
    3210:	c1 1d       	adc	r28, r1
    3212:	77 0f       	add	r23, r23
    3214:	88 1f       	adc	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	66 1f       	adc	r22, r22
    321a:	06 94       	lsr	r0
    321c:	a1 f7       	brne	.-24     	; 0x3206 <__ftoa_engine+0x90>
    321e:	05 90       	lpm	r0, Z+
    3220:	07 94       	ror	r0
    3222:	28 f4       	brcc	.+10     	; 0x322e <__ftoa_engine+0xb8>
    3224:	f8 0e       	add	r15, r24
    3226:	49 1f       	adc	r20, r25
    3228:	56 1f       	adc	r21, r22
    322a:	c7 1f       	adc	r28, r23
    322c:	d1 1d       	adc	r29, r1
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	66 1f       	adc	r22, r22
    3234:	77 1f       	adc	r23, r23
    3236:	06 94       	lsr	r0
    3238:	a1 f7       	brne	.-24     	; 0x3222 <__ftoa_engine+0xac>
    323a:	05 90       	lpm	r0, Z+
    323c:	07 94       	ror	r0
    323e:	20 f4       	brcc	.+8      	; 0x3248 <__ftoa_engine+0xd2>
    3240:	49 0f       	add	r20, r25
    3242:	56 1f       	adc	r21, r22
    3244:	c7 1f       	adc	r28, r23
    3246:	d8 1f       	adc	r29, r24
    3248:	99 0f       	add	r25, r25
    324a:	66 1f       	adc	r22, r22
    324c:	77 1f       	adc	r23, r23
    324e:	88 1f       	adc	r24, r24
    3250:	06 94       	lsr	r0
    3252:	a9 f7       	brne	.-22     	; 0x323e <__ftoa_engine+0xc8>
    3254:	84 91       	lpm	r24, Z
    3256:	10 95       	com	r17
    3258:	17 70       	andi	r17, 0x07	; 7
    325a:	41 f0       	breq	.+16     	; 0x326c <__ftoa_engine+0xf6>
    325c:	d6 95       	lsr	r29
    325e:	c7 95       	ror	r28
    3260:	57 95       	ror	r21
    3262:	47 95       	ror	r20
    3264:	f7 94       	ror	r15
    3266:	e7 94       	ror	r14
    3268:	1a 95       	dec	r17
    326a:	c1 f7       	brne	.-16     	; 0x325c <__ftoa_engine+0xe6>
    326c:	e8 ea       	ldi	r30, 0xA8	; 168
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	68 94       	set
    3272:	15 90       	lpm	r1, Z+
    3274:	15 91       	lpm	r17, Z+
    3276:	35 91       	lpm	r19, Z+
    3278:	65 91       	lpm	r22, Z+
    327a:	95 91       	lpm	r25, Z+
    327c:	05 90       	lpm	r0, Z+
    327e:	7f e2       	ldi	r23, 0x2F	; 47
    3280:	73 95       	inc	r23
    3282:	e1 18       	sub	r14, r1
    3284:	f1 0a       	sbc	r15, r17
    3286:	43 0b       	sbc	r20, r19
    3288:	56 0b       	sbc	r21, r22
    328a:	c9 0b       	sbc	r28, r25
    328c:	d0 09       	sbc	r29, r0
    328e:	c0 f7       	brcc	.-16     	; 0x3280 <__ftoa_engine+0x10a>
    3290:	e1 0c       	add	r14, r1
    3292:	f1 1e       	adc	r15, r17
    3294:	43 1f       	adc	r20, r19
    3296:	56 1f       	adc	r21, r22
    3298:	c9 1f       	adc	r28, r25
    329a:	d0 1d       	adc	r29, r0
    329c:	7e f4       	brtc	.+30     	; 0x32bc <__ftoa_engine+0x146>
    329e:	70 33       	cpi	r23, 0x30	; 48
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <__ftoa_engine+0x130>
    32a2:	8a 95       	dec	r24
    32a4:	e6 cf       	rjmp	.-52     	; 0x3272 <__ftoa_engine+0xfc>
    32a6:	e8 94       	clt
    32a8:	01 50       	subi	r16, 0x01	; 1
    32aa:	30 f0       	brcs	.+12     	; 0x32b8 <__ftoa_engine+0x142>
    32ac:	08 0f       	add	r16, r24
    32ae:	0a f4       	brpl	.+2      	; 0x32b2 <__ftoa_engine+0x13c>
    32b0:	00 27       	eor	r16, r16
    32b2:	02 17       	cp	r16, r18
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <__ftoa_engine+0x142>
    32b6:	20 2f       	mov	r18, r16
    32b8:	23 95       	inc	r18
    32ba:	02 2f       	mov	r16, r18
    32bc:	7a 33       	cpi	r23, 0x3A	; 58
    32be:	28 f0       	brcs	.+10     	; 0x32ca <__ftoa_engine+0x154>
    32c0:	79 e3       	ldi	r23, 0x39	; 57
    32c2:	7d 93       	st	X+, r23
    32c4:	2a 95       	dec	r18
    32c6:	e9 f7       	brne	.-6      	; 0x32c2 <__ftoa_engine+0x14c>
    32c8:	10 c0       	rjmp	.+32     	; 0x32ea <__ftoa_engine+0x174>
    32ca:	7d 93       	st	X+, r23
    32cc:	2a 95       	dec	r18
    32ce:	89 f6       	brne	.-94     	; 0x3272 <__ftoa_engine+0xfc>
    32d0:	06 94       	lsr	r0
    32d2:	97 95       	ror	r25
    32d4:	67 95       	ror	r22
    32d6:	37 95       	ror	r19
    32d8:	17 95       	ror	r17
    32da:	17 94       	ror	r1
    32dc:	e1 18       	sub	r14, r1
    32de:	f1 0a       	sbc	r15, r17
    32e0:	43 0b       	sbc	r20, r19
    32e2:	56 0b       	sbc	r21, r22
    32e4:	c9 0b       	sbc	r28, r25
    32e6:	d0 09       	sbc	r29, r0
    32e8:	98 f0       	brcs	.+38     	; 0x3310 <__ftoa_engine+0x19a>
    32ea:	23 95       	inc	r18
    32ec:	7e 91       	ld	r23, -X
    32ee:	73 95       	inc	r23
    32f0:	7a 33       	cpi	r23, 0x3A	; 58
    32f2:	08 f0       	brcs	.+2      	; 0x32f6 <__ftoa_engine+0x180>
    32f4:	70 e3       	ldi	r23, 0x30	; 48
    32f6:	7c 93       	st	X, r23
    32f8:	20 13       	cpse	r18, r16
    32fa:	b8 f7       	brcc	.-18     	; 0x32ea <__ftoa_engine+0x174>
    32fc:	7e 91       	ld	r23, -X
    32fe:	70 61       	ori	r23, 0x10	; 16
    3300:	7d 93       	st	X+, r23
    3302:	30 f0       	brcs	.+12     	; 0x3310 <__ftoa_engine+0x19a>
    3304:	83 95       	inc	r24
    3306:	71 e3       	ldi	r23, 0x31	; 49
    3308:	7d 93       	st	X+, r23
    330a:	70 e3       	ldi	r23, 0x30	; 48
    330c:	2a 95       	dec	r18
    330e:	e1 f7       	brne	.-8      	; 0x3308 <__ftoa_engine+0x192>
    3310:	11 24       	eor	r1, r1
    3312:	ef 90       	pop	r14
    3314:	ff 90       	pop	r15
    3316:	0f 91       	pop	r16
    3318:	1f 91       	pop	r17
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	99 27       	eor	r25, r25
    3320:	87 fd       	sbrc	r24, 7
    3322:	90 95       	com	r25
    3324:	08 95       	ret

00003326 <strrev>:
    3326:	dc 01       	movw	r26, r24
    3328:	fc 01       	movw	r30, r24
    332a:	67 2f       	mov	r22, r23
    332c:	71 91       	ld	r23, Z+
    332e:	77 23       	and	r23, r23
    3330:	e1 f7       	brne	.-8      	; 0x332a <strrev+0x4>
    3332:	32 97       	sbiw	r30, 0x02	; 2
    3334:	04 c0       	rjmp	.+8      	; 0x333e <strrev+0x18>
    3336:	7c 91       	ld	r23, X
    3338:	6d 93       	st	X+, r22
    333a:	70 83       	st	Z, r23
    333c:	62 91       	ld	r22, -Z
    333e:	ae 17       	cp	r26, r30
    3340:	bf 07       	cpc	r27, r31
    3342:	c8 f3       	brcs	.-14     	; 0x3336 <strrev+0x10>
    3344:	08 95       	ret

00003346 <__eerd_block_m328p>:
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22

0000334a <__eerd_blraw_m328p>:
    334a:	fc 01       	movw	r30, r24
    334c:	f9 99       	sbic	0x1f, 1	; 31
    334e:	fe cf       	rjmp	.-4      	; 0x334c <__eerd_blraw_m328p+0x2>
    3350:	06 c0       	rjmp	.+12     	; 0x335e <__eerd_blraw_m328p+0x14>
    3352:	f2 bd       	out	0x22, r31	; 34
    3354:	e1 bd       	out	0x21, r30	; 33
    3356:	f8 9a       	sbi	0x1f, 0	; 31
    3358:	31 96       	adiw	r30, 0x01	; 1
    335a:	00 b4       	in	r0, 0x20	; 32
    335c:	0d 92       	st	X+, r0
    335e:	41 50       	subi	r20, 0x01	; 1
    3360:	50 40       	sbci	r21, 0x00	; 0
    3362:	b8 f7       	brcc	.-18     	; 0x3352 <__eerd_blraw_m328p+0x8>
    3364:	08 95       	ret

00003366 <_exit>:
    3366:	f8 94       	cli

00003368 <__stop_program>:
    3368:	ff cf       	rjmp	.-2      	; 0x3368 <__stop_program>
